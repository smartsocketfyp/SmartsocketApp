{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ReferenceBase from \"../../utils/ReferenceBase\";\nimport StorageTask, { UPLOAD_TASK, DOWNLOAD_TASK } from \"./task\";\nimport { isIOS } from \"../../utils\";\nimport { getNativeModule } from \"../../utils/native\";\n\nvar StorageReference = function (_ReferenceBase) {\n  _inherits(StorageReference, _ReferenceBase);\n\n  var _super = _createSuper(StorageReference);\n\n  function StorageReference(storage, path) {\n    var _this;\n\n    _classCallCheck(this, StorageReference);\n\n    _this = _super.call(this, path);\n    _this._storage = storage;\n    return _this;\n  }\n\n  _createClass(StorageReference, [{\n    key: \"toString\",\n    value: function toString() {\n      return \"gs://\" + this._storage.app.options.storageBucket + this.path;\n    }\n  }, {\n    key: \"child\",\n    value: function child(path) {\n      return new StorageReference(this._storage, this.path + \"/\" + path);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return getNativeModule(this._storage).delete(this.path);\n    }\n  }, {\n    key: \"getDownloadURL\",\n    value: function getDownloadURL() {\n      return getNativeModule(this._storage).getDownloadURL(this.path);\n    }\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      return getNativeModule(this._storage).getMetadata(this.path);\n    }\n  }, {\n    key: \"updateMetadata\",\n    value: function updateMetadata() {\n      var metadata = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getNativeModule(this._storage).updateMetadata(this.path, metadata);\n    }\n  }, {\n    key: \"downloadFile\",\n    value: function downloadFile(filePath) {\n      return new StorageTask(DOWNLOAD_TASK, getNativeModule(this._storage).downloadFile(this.path, filePath), this);\n    }\n  }, {\n    key: \"putFile\",\n    value: function putFile(filePath) {\n      var metadata = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      var _filePath = isIOS ? filePath.replace('file://', '') : filePath;\n\n      if (_filePath.includes('%')) _filePath = decodeURIComponent(_filePath);\n      return new StorageTask(UPLOAD_TASK, getNativeModule(this._storage).putFile(this.path, _filePath, metadata), this);\n    }\n  }, {\n    key: \"fullPath\",\n    get: function get() {\n      return this.path;\n    }\n  }, {\n    key: \"put\",\n    get: function get() {\n      return this.putFile;\n    }\n  }]);\n\n  return StorageReference;\n}(ReferenceBase);\n\nexport { StorageReference as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/storage/reference.js"],"names":["ReferenceBase","StorageTask","UPLOAD_TASK","DOWNLOAD_TASK","isIOS","getNativeModule","StorageReference","storage","path","_storage","app","options","storageBucket","delete","getDownloadURL","getMetadata","metadata","updateMetadata","filePath","downloadFile","_filePath","replace","includes","decodeURIComponent","putFile"],"mappings":";;;;;;;;;;AAIA,OAAOA,aAAP;AACA,OAAOC,WAAP,IAAsBC,WAAtB,EAAmCC,aAAnC;AACA,SAASC,KAAT;AACA,SAASC,eAAT;;IAKqBC,gB;;;;;AACnB,4BAAYC,OAAZ,EAAqBC,IAArB,EAA2B;AAAA;;AAAA;;AACzB,8BAAMA,IAAN;AACA,UAAKC,QAAL,GAAgBF,OAAhB;AAFyB;AAG1B;;;;+BAMU;AACT,uBAAe,KAAKE,QAAL,CAAcC,GAAd,CAAkBC,OAAlB,CAA0BC,aAAzC,GAAyD,KAAKJ,IAA9D;AACD;;;0BAQKA,I,EAAM;AACV,aAAO,IAAIF,gBAAJ,CAAqB,KAAKG,QAA1B,EAAuC,KAAKD,IAA5C,SAAoDA,IAApD,CAAP;AACD;;;8BAOQ;AACP,aAAOH,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+BI,MAA/B,CAAsC,KAAKL,IAA3C,CAAP;AACD;;;qCAOgB;AACf,aAAOH,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+BK,cAA/B,CAA8C,KAAKN,IAAnD,CAAP;AACD;;;kCAOa;AACZ,aAAOH,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+BM,WAA/B,CAA2C,KAAKP,IAAhD,CAAP;AACD;;;qCAQ6B;AAAA,UAAfQ,QAAe,uEAAJ,EAAI;AAC5B,aAAOX,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+BQ,cAA/B,CAA8C,KAAKT,IAAnD,EAAyDQ,QAAzD,CAAP;AACD;;;iCAQYE,Q,EAAU;AACrB,aAAO,IAAIjB,WAAJ,CAAgBE,aAAhB,EAA+BE,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+BU,YAA/B,CAA4C,KAAKX,IAAjD,EAAuDU,QAAvD,CAA/B,EAAiG,IAAjG,CAAP;AACD;;;4BAkBOA,Q,EAAyB;AAAA,UAAfF,QAAe,uEAAJ,EAAI;;AAC/B,UAAII,SAAS,GAAGhB,KAAK,GAAGc,QAAQ,CAACG,OAAT,CAAiB,SAAjB,EAA4B,EAA5B,CAAH,GAAqCH,QAA1D;;AAEA,UAAIE,SAAS,CAACE,QAAV,CAAmB,GAAnB,CAAJ,EAA6BF,SAAS,GAAGG,kBAAkB,CAACH,SAAD,CAA9B;AAC7B,aAAO,IAAInB,WAAJ,CAAgBC,WAAhB,EAA6BG,eAAe,CAAC,KAAKI,QAAN,CAAf,CAA+Be,OAA/B,CAAuC,KAAKhB,IAA5C,EAAkDY,SAAlD,EAA6DJ,QAA7D,CAA7B,EAAqG,IAArG,CAAP;AACD;;;wBAtFc;AACb,aAAO,KAAKR,IAAZ;AACD;;;wBAoES;AACR,aAAO,KAAKgB,OAAZ;AACD;;;;EA9E2CxB,a;;SAAzBM,gB","sourcesContent":["/**\n * \n * StorageReference representation wrapper\n */\nimport ReferenceBase from '../../utils/ReferenceBase';\nimport StorageTask, { UPLOAD_TASK, DOWNLOAD_TASK } from './task';\nimport { isIOS } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n\n/**\n * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference\n */\nexport default class StorageReference extends ReferenceBase {\n  constructor(storage, path) {\n    super(path);\n    this._storage = storage;\n  }\n\n  get fullPath() {\n    return this.path;\n  }\n\n  toString() {\n    return `gs://${this._storage.app.options.storageBucket}${this.path}`;\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#child\n   * @param path\n   * @returns {StorageReference}\n   */\n\n\n  child(path) {\n    return new StorageReference(this._storage, `${this.path}/${path}`);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#delete\n   * @returns {Promise.<T>|*}\n   */\n\n\n  delete() {\n    return getNativeModule(this._storage).delete(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getDownloadURL\n   * @returns {Promise.<T>|*}\n   */\n\n\n  getDownloadURL() {\n    return getNativeModule(this._storage).getDownloadURL(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#getMetadata\n   * @returns {Promise.<T>|*}\n   */\n\n\n  getMetadata() {\n    return getNativeModule(this._storage).getMetadata(this.path);\n  }\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Reference#updateMetadata\n   * @param metadata\n   * @returns {Promise.<T>|*}\n   */\n\n\n  updateMetadata(metadata = {}) {\n    return getNativeModule(this._storage).updateMetadata(this.path, metadata);\n  }\n  /**\n   * Downloads a reference to the device\n   * @param {String} filePath Where to store the file\n   * @return {Promise}\n   */\n\n\n  downloadFile(filePath) {\n    return new StorageTask(DOWNLOAD_TASK, getNativeModule(this._storage).downloadFile(this.path, filePath), this);\n  }\n  /**\n   * Alias to putFile\n   * @returns {StorageReference.putFile}\n   */\n\n\n  get put() {\n    return this.putFile;\n  }\n  /**\n   * Upload a file path\n   * @param  {string} filePath The local path of the file\n   * @param  {object} metadata An object containing metadata\n   * @return {Promise}\n   */\n\n\n  putFile(filePath, metadata = {}) {\n    let _filePath = isIOS ? filePath.replace('file://', '') : filePath;\n\n    if (_filePath.includes('%')) _filePath = decodeURIComponent(_filePath);\n    return new StorageTask(UPLOAD_TASK, getNativeModule(this._storage).putFile(this.path, _filePath, metadata), this);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}