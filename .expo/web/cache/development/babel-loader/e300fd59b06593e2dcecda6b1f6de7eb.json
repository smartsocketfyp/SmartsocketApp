{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\nimport { getNativeModule } from \"../../utils/native\";\n\nvar WriteBatch = function () {\n  function WriteBatch(firestore) {\n    _classCallCheck(this, WriteBatch);\n\n    this._firestore = firestore;\n    this._writes = [];\n  }\n\n  _createClass(WriteBatch, [{\n    key: \"commit\",\n    value: function commit() {\n      return getNativeModule(this._firestore).documentBatch(this._writes);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(docRef) {\n      this._writes.push({\n        path: docRef.path,\n        type: 'DELETE'\n      });\n\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(docRef, data, options) {\n      var nativeData = buildNativeMap(data);\n\n      this._writes.push({\n        data: nativeData,\n        options: options,\n        path: docRef.path,\n        type: 'SET'\n      });\n\n      return this;\n    }\n  }, {\n    key: \"update\",\n    value: function update(docRef) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      var data = parseUpdateArgs(args, 'WriteBatch.update');\n\n      this._writes.push({\n        data: buildNativeMap(data),\n        path: docRef.path,\n        type: 'UPDATE'\n      });\n\n      return this;\n    }\n  }]);\n\n  return WriteBatch;\n}();\n\nexport { WriteBatch as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/firestore/WriteBatch.js"],"names":["parseUpdateArgs","buildNativeMap","getNativeModule","WriteBatch","firestore","_firestore","_writes","documentBatch","docRef","push","path","type","data","options","nativeData","args"],"mappings":";;AAIA,SAASA,eAAT;AACA,SAASC,cAAT;AACA,SAASC,eAAT;;IAKqBC,U;AACnB,sBAAYC,SAAZ,EAAuB;AAAA;;AACrB,SAAKC,UAAL,GAAkBD,SAAlB;AACA,SAAKE,OAAL,GAAe,EAAf;AACD;;;;6BAEQ;AACP,aAAOJ,eAAe,CAAC,KAAKG,UAAN,CAAf,CAAiCE,aAAjC,CAA+C,KAAKD,OAApD,CAAP;AACD;;;4BAEME,M,EAAQ;AAIb,WAAKF,OAAL,CAAaG,IAAb,CAAkB;AAChBC,QAAAA,IAAI,EAAEF,MAAM,CAACE,IADG;AAEhBC,QAAAA,IAAI,EAAE;AAFU,OAAlB;;AAKA,aAAO,IAAP;AACD;;;wBAEGH,M,EAAQI,I,EAAMC,O,EAAS;AAKzB,UAAMC,UAAU,GAAGb,cAAc,CAACW,IAAD,CAAjC;;AAEA,WAAKN,OAAL,CAAaG,IAAb,CAAkB;AAChBG,QAAAA,IAAI,EAAEE,UADU;AAEhBD,QAAAA,OAAO,EAAPA,OAFgB;AAGhBH,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAHG;AAIhBC,QAAAA,IAAI,EAAE;AAJU,OAAlB;;AAOA,aAAO,IAAP;AACD;;;2BAEMH,M,EAAiB;AAAA,wCAANO,IAAM;AAANA,QAAAA,IAAM;AAAA;;AAGtB,UAAMH,IAAI,GAAGZ,eAAe,CAACe,IAAD,EAAO,mBAAP,CAA5B;;AAEA,WAAKT,OAAL,CAAaG,IAAb,CAAkB;AAChBG,QAAAA,IAAI,EAAEX,cAAc,CAACW,IAAD,CADJ;AAEhBF,QAAAA,IAAI,EAAEF,MAAM,CAACE,IAFG;AAGhBC,QAAAA,IAAI,EAAE;AAHU,OAAlB;;AAMA,aAAO,IAAP;AACD;;;;;;SAnDkBR,U","sourcesContent":["/**\n * \n * WriteBatch representation wrapper\n */\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport { getNativeModule } from '../../utils/native';\n\n/**\n * @class WriteBatch\n */\nexport default class WriteBatch {\n  constructor(firestore) {\n    this._firestore = firestore;\n    this._writes = [];\n  }\n\n  commit() {\n    return getNativeModule(this._firestore).documentBatch(this._writes);\n  }\n\n  delete(docRef) {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    // validate.isOptionalPrecondition('deleteOptions', deleteOptions);\n    this._writes.push({\n      path: docRef.path,\n      type: 'DELETE'\n    });\n\n    return this;\n  }\n\n  set(docRef, data, options) {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    // validate.isDocument('data', data);\n    // validate.isOptionalPrecondition('options', writeOptions);\n    const nativeData = buildNativeMap(data);\n\n    this._writes.push({\n      data: nativeData,\n      options,\n      path: docRef.path,\n      type: 'SET'\n    });\n\n    return this;\n  }\n\n  update(docRef, ...args) {\n    // TODO: Validation\n    // validate.isDocumentReference('docRef', docRef);\n    const data = parseUpdateArgs(args, 'WriteBatch.update');\n\n    this._writes.push({\n      data: buildNativeMap(data),\n      path: docRef.path,\n      type: 'UPDATE'\n    });\n\n    return this;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}