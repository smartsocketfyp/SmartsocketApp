{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\fong\\\\Desktop\\\\code-18122020-combined\\\\Screens\\\\SchedulingCountdownTimerScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport CountDown from 'react-native-countdown-component';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\n\nvar SchedulingCountdownTimerScreen = function (_React$Component) {\n  _inherits(SchedulingCountdownTimerScreen, _React$Component);\n\n  var _super = _createSuper(SchedulingCountdownTimerScreen);\n\n  function SchedulingCountdownTimerScreen() {\n    _classCallCheck(this, SchedulingCountdownTimerScreen);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SchedulingCountdownTimerScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      console.warn(route);\n      var Text_Minutes = route.params;\n      return React.createElement(View, {\n        style: {\n          backgroundColor: '#90FF33',\n          flex: 1,\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 13\n        }\n      }, React.createElement(StatusBar, {\n        barStyle: \"dark-content\",\n        backgroundColor: \"#ecf0f1\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }\n      }), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 17\n        }\n      }, \"Countdown Timer\"), React.createElement(Text, {\n        style: {\n          fontSize: 30\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 13,\n          columnNumber: 17\n        }\n      }, \" \", Text_Minutes, \" \"), React.createElement(CountDown, {\n        size: 30,\n        until: Text_Minutes * 60,\n        onFinish: function onFinish() {\n          return alert('Finished') > _this.props.navigation.navigate(\"TimesUp\");\n        },\n        digitStyle: {\n          backgroundColor: '#FFF',\n          borderWidth: 2,\n          borderColor: '#1CC625'\n        },\n        digitTxtStyle: {\n          color: '#1CC625'\n        },\n        timeLabelStyle: {\n          color: 'red',\n          fontWeight: 'bold'\n        },\n        separatorStyle: {\n          color: '#1CC625'\n        },\n        timeToShow: ['H', 'M', 'S'],\n        timeLabels: {\n          m: null,\n          s: null\n        },\n        showSeparator: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 17\n        }\n      }), React.createElement(Button, {\n        title: \"Stop Now\",\n        onPress: function onPress() {\n          return _this.props.navigation.navigate(\"TimesUp\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return SchedulingCountdownTimerScreen;\n}(React.Component);\n\nexport { SchedulingCountdownTimerScreen as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/Screens/SchedulingCountdownTimerScreen.js"],"names":["React","CountDown","SchedulingCountdownTimerScreen","console","warn","route","Text_Minutes","params","backgroundColor","flex","alignItems","justifyContent","fontSize","alert","props","navigation","navigate","borderWidth","borderColor","color","fontWeight","m","s","Component"],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,kCAAtB;;;;;;IAGqBC,8B;;;;;;;;;;;;;6BACZ;AAAA;;AACDC,MAAAA,OAAO,CAACC,IAAR,CAAaC,KAAb;AACA,UAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AACA,aACI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE;AAAEC,UAAAA,eAAe,EAAE,SAAnB;AAA8BC,UAAAA,IAAI,EAAE,CAApC;AAAuCC,UAAAA,UAAU,EAAE,QAAnD;AAA6DC,UAAAA,cAAc,EAAE;AAA7E,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,cAApB;AAAmC,QAAA,eAAe,EAAC,SAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,EAEI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAFJ,EAGI,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAI;AAACC,UAAAA,QAAQ,EAAE;AAAX,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAkCN,YAAlC,MAHJ,EAKI,oBAAC,SAAD;AACI,QAAA,IAAI,EAAE,EADV;AAEI,QAAA,KAAK,EAAEA,YAAY,GAAC,EAFxB;AAGI,QAAA,QAAQ,EAAE;AAAA,iBAAMO,KAAK,CAAC,UAAD,CAAL,GAAoB,KAAI,CAACC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,SAA/B,CAA1B;AAAA,SAHd;AAII,QAAA,UAAU,EAAE;AAACR,UAAAA,eAAe,EAAE,MAAlB;AAA0BS,UAAAA,WAAW,EAAE,CAAvC;AAA0CC,UAAAA,WAAW,EAAE;AAAvD,SAJhB;AAKI,QAAA,aAAa,EAAE;AAACC,UAAAA,KAAK,EAAE;AAAR,SALnB;AAMI,QAAA,cAAc,EAAE;AAACA,UAAAA,KAAK,EAAE,KAAR;AAAeC,UAAAA,UAAU,EAAE;AAA3B,SANpB;AAOI,QAAA,cAAc,EAAE;AAACD,UAAAA,KAAK,EAAE;AAAR,SAPpB;AAQI,QAAA,UAAU,EAAE,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CARhB;AASI,QAAA,UAAU,EAAE;AAACE,UAAAA,CAAC,EAAE,IAAJ;AAAUC,UAAAA,CAAC,EAAE;AAAb,SAThB;AAUI,QAAA,aAAa,MAVjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,EAkBI,oBAAC,MAAD;AACI,QAAA,KAAK,EAAC,UADV;AAEI,QAAA,OAAO,EAAE;AAAA,iBAAM,KAAI,CAACR,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+B,SAA/B,CAAN;AAAA,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAlBJ,CADJ;AAyBN;;;;EA7B0DhB,KAAK,CAACuB,S;;SAA7CrB,8B","sourcesContent":["import * as React from 'react';\r\nimport CountDown from 'react-native-countdown-component';\r\nimport { Button, View, Text, StatusBar} from 'react-native';\r\n\r\nexport default class SchedulingCountdownTimerScreen extends React.Component {\r\n\trender(){\r\n        console.warn(route)\r\n        let Text_Minutes = route.params;\r\n        return (\r\n            <View style={{ backgroundColor: '#90FF33', flex: 1, alignItems: 'center', justifyContent: 'center' }}>\r\n                <StatusBar barStyle=\"dark-content\" backgroundColor=\"#ecf0f1\" />\r\n                <Text>Countdown Timer</Text>\r\n                <Text style = {{fontSize: 30}} > {Text_Minutes} </Text>\r\n            \r\n                <CountDown\r\n                    size={30}\r\n                    until={Text_Minutes*60}\r\n                    onFinish={() => alert('Finished') > this.props.navigation.navigate(\"TimesUp\")}\r\n                    digitStyle={{backgroundColor: '#FFF', borderWidth: 2, borderColor: '#1CC625'}}\r\n                    digitTxtStyle={{color: '#1CC625'}}\r\n                    timeLabelStyle={{color: 'red', fontWeight: 'bold'}}\r\n                    separatorStyle={{color: '#1CC625'}}\r\n                    timeToShow={['H', 'M', 'S']}\r\n                    timeLabels={{m: null, s: null}}\r\n                    showSeparator\r\n                />\r\n            \r\n                <Button\r\n                    title=\"Stop Now\"\r\n                    onPress={() => this.props.navigation.navigate(\"TimesUp\")}\r\n                />\r\n            </View>\r\n        )\r\n\t}\r\n}"]},"metadata":{},"sourceType":"module"}