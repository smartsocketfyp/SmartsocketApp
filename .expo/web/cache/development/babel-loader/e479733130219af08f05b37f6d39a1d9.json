{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeEventEmitter from \"react-native-web/dist/exports/NativeEventEmitter\";\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { SharedEventEmitter } from \"./events\";\nimport DataSnapshot from \"../modules/database/DataSnapshot\";\nimport DatabaseReference from \"../modules/database/Reference\";\nimport { isString, nativeToJSError } from \"./\";\n\nvar SyncTree = function () {\n  function SyncTree() {\n    _classCallCheck(this, SyncTree);\n\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n\n  _createClass(SyncTree, [{\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      if (event.error) {\n        this._handleErrorEvent(event);\n      } else {\n        this._handleValueEvent(event);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration = event.registration,\n          key = _event$registration.key,\n          eventRegistrationKey = _event$registration.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n\n      if (!registration) {\n        return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n      }\n\n      var _event$data = event.data,\n          snapshot = _event$data.snapshot,\n          previousChildName = _event$data.previousChildName;\n      return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$error = event.error,\n          code = _event$error.code,\n          message = _event$error.message;\n      var _event$registration2 = event.registration,\n          eventRegistrationKey = _event$registration2.eventRegistrationKey,\n          registrationCancellationKey = _event$registration2.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n\n      if (registration) {\n        var error = nativeToJSError(code, message, {\n          ref: registration.ref\n        });\n        SharedEventEmitter.emit(registrationCancellationKey, error);\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? _extends({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if (isString(registrations)) {\n        this.removeRegistration(registrations);\n        SharedEventEmitter.removeAllListeners(registrations);\n        return 1;\n      }\n\n      if (!Array.isArray(registrations)) return 0;\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n        SharedEventEmitter.removeAllListeners(registrations[i]);\n      }\n\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) return [];\n      var removed = [];\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n\n        var subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) return [];\n      if (!this._tree[path][eventType]) return [];\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) return null;\n      if (!this._tree[path][eventType]) return null;\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n        if (registration[1] === listener) return registration[0];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var eventRegistrationKey = registration.eventRegistrationKey,\n          eventType = registration.eventType,\n          listener = registration.listener,\n          once = registration.once,\n          path = registration.path;\n      if (!this._tree[path]) this._tree[path] = {};\n      if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n\n      if (once) {\n        SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n      } else {\n        SharedEventEmitter.addListener(eventRegistrationKey, listener);\n      }\n\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) return false;\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n          path = _this$_reverseLookup$.path,\n          eventType = _this$_reverseLookup$.eventType,\n          once = _this$_reverseLookup$.once;\n\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      var registrationObj = this._reverseLookup[registration];\n\n      if (registrationObj && !once) {\n        NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n      }\n\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this = this;\n\n      return function () {\n        _this.removeRegistration(registration);\n\n        listener.apply(void 0, arguments);\n      };\n    }\n  }]);\n\n  return SyncTree;\n}();\n\nexport default new SyncTree();","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/utils/SyncTree.js"],"names":["SharedEventEmitter","DataSnapshot","DatabaseReference","isString","nativeToJSError","SyncTree","_tree","_reverseLookup","NativeModules","RNFirebaseDatabase","_nativeEmitter","NativeEventEmitter","addListener","_handleSyncEvent","bind","event","error","_handleErrorEvent","_handleValueEvent","registration","key","eventRegistrationKey","getRegistration","off","data","snapshot","previousChildName","emit","ref","code","message","registrationCancellationKey","removeRegistration","registrations","removeAllListeners","Array","isArray","i","len","length","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","path","out","eventKeys","Object","keys","prototype","apply","eventType","registrationsForPathEvent","entries","once","_onOnceRemoveRegistration","registrationObj"],"mappings":"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","sourcesContent":["import { NativeEventEmitter, NativeModules } from 'react-native';\nimport { SharedEventEmitter } from './events';\nimport DataSnapshot from '../modules/database/DataSnapshot';\nimport DatabaseReference from '../modules/database/Reference';\nimport { isString, nativeToJSError } from './';\n\n/**\n * Internally used to manage firebase database realtime event\n * subscriptions and keep the listeners in sync in js vs native.\n */\nclass SyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    if (NativeModules.RNFirebaseDatabase) {\n      this._nativeEmitter = new NativeEventEmitter(NativeModules.RNFirebaseDatabase);\n\n      this._nativeEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n    }\n  }\n  /**\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleSyncEvent(event) {\n    if (event.error) {\n      this._handleErrorEvent(event);\n    } else {\n      this._handleValueEvent(event);\n    }\n  }\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If there is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const {\n      key,\n      eventRegistrationKey\n    } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return NativeModules.RNFirebaseDatabase.off(key, eventRegistrationKey);\n    }\n\n    const {\n      snapshot,\n      previousChildName\n    } = event.data; // forward on to users .on(successCallback <-- listener\n\n    return SharedEventEmitter.emit(eventRegistrationKey, new DataSnapshot(registration.ref, snapshot), previousChildName);\n  }\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n\n\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const {\n      code,\n      message\n    } = event.error;\n    const {\n      eventRegistrationKey,\n      registrationCancellationKey\n    } = event.registration;\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = nativeToJSError(code, message, {\n        ref: registration.ref\n      }); // forward on to users .on(successCallback, cancellationCallback <-- listener\n\n      SharedEventEmitter.emit(registrationCancellationKey, error); // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n\n\n  getRegistration(registration) {\n    return this._reverseLookup[registration] ? Object.assign({}, this._reverseLookup[registration]) : null;\n  }\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n\n\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) return 0;\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n\n\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) return [];\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j]; // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n\n\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) return [];\n    if (!this._tree[path][eventType]) return [];\n    return Object.keys(this._tree[path][eventType]);\n  }\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n\n\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) return null;\n    if (!this._tree[path][eventType]) return null;\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) return registration[0];\n    }\n\n    return null;\n  }\n  /**\n   * Register a new listener.\n   *\n   * @param parameters\n   * @param listener\n   * @return {String}\n   */\n\n\n  addRegistration(registration) {\n    const {\n      eventRegistrationKey,\n      eventType,\n      listener,\n      once,\n      path\n    } = registration;\n    if (!this._tree[path]) this._tree[path] = {};\n    if (!this._tree[path][eventType]) this._tree[path][eventType] = {};\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      SharedEventEmitter.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n\n\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) return false;\n    const {\n      path,\n      eventType,\n      once\n    } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    } // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n\n\n    const registrationObj = this._reverseLookup[registration];\n\n    if (registrationObj && !once) {\n      NativeModules.RNFirebaseDatabase.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n    return !!registrationObj;\n  }\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n\n\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n\n}\n\nexport default new SyncTree();"]},"metadata":{},"sourceType":"module"}