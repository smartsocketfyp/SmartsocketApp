{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { statics } from \"./\";\nimport AdRequest from \"./AdRequest\";\nimport { SharedEventEmitter } from \"../../utils/events\";\nimport { getNativeModule } from \"../../utils/native\";\nimport { nativeToJSError } from \"../../utils\";\nvar subscriptions = [];\n\nvar RewardedVideo = function () {\n  function RewardedVideo(admob, adUnit) {\n    var _this = this;\n\n    _classCallCheck(this, RewardedVideo);\n\n    this._onRewardedVideoEvent = function (event) {\n      var eventType = \"rewarded_video:\" + _this.adUnit + \":\" + event.type;\n\n      var emitData = _extends({}, event);\n\n      switch (event.type) {\n        case 'onAdLoaded':\n          _this.loaded = true;\n          break;\n\n        case 'onAdFailedToLoad':\n          emitData = nativeToJSError(event.payload.code, event.payload.message);\n          emitData.type = event.type;\n          break;\n\n        default:\n      }\n\n      SharedEventEmitter.emit(eventType, emitData);\n      SharedEventEmitter.emit(\"rewarded_video:\" + _this.adUnit + \":*\", emitData);\n    };\n\n    for (var i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n    SharedEventEmitter.removeAllListeners(\"rewarded_video_\" + adUnit);\n    SharedEventEmitter.addListener(\"rewarded_video_\" + adUnit, this._onRewardedVideoEvent);\n  }\n\n  _createClass(RewardedVideo, [{\n    key: \"loadAd\",\n    value: function loadAd(request) {\n      var adRequest = request;\n\n      if (!adRequest || !Object.keys(adRequest)) {\n        adRequest = new AdRequest().addTestDevice().build();\n      }\n\n      return getNativeModule(this._admob).rewardedVideoLoadAd(this.adUnit, adRequest);\n    }\n  }, {\n    key: \"setCustomData\",\n    value: function setCustomData(customData) {\n      return getNativeModule(this._admob).rewardedVideoSetCustomData(this.adUnit, customData);\n    }\n  }, {\n    key: \"isLoaded\",\n    value: function isLoaded() {\n      return this.loaded;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (this.loaded) {\n        getNativeModule(this._admob).rewardedVideoShowAd(this.adUnit);\n      }\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, listenerCb) {\n      var types = _objectSpread(_objectSpread({}, statics.EventTypes), statics.RewardedVideoEventTypes);\n\n      if (!types[eventType]) {\n        console.warn(\"Invalid event type provided, must be one of: \" + Object.keys(types).join(', '));\n        return null;\n      }\n\n      var sub = SharedEventEmitter.addListener(\"rewarded_video:\" + this.adUnit + \":\" + eventType, listenerCb);\n      subscriptions.push(sub);\n      return sub;\n    }\n  }]);\n\n  return RewardedVideo;\n}();\n\nexport { RewardedVideo as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/admob/RewardedVideo.js"],"names":["statics","AdRequest","SharedEventEmitter","getNativeModule","nativeToJSError","subscriptions","RewardedVideo","admob","adUnit","_onRewardedVideoEvent","event","eventType","type","emitData","loaded","payload","code","message","emit","i","len","length","remove","_admob","removeAllListeners","addListener","request","adRequest","Object","keys","addTestDevice","build","rewardedVideoLoadAd","customData","rewardedVideoSetCustomData","rewardedVideoShowAd","listenerCb","types","EventTypes","RewardedVideoEventTypes","console","warn","join","sub","push"],"mappings":"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","sourcesContent":["import { statics } from './';\nimport AdRequest from './AdRequest';\nimport { SharedEventEmitter } from '../../utils/events';\nimport { getNativeModule } from '../../utils/native';\nimport { nativeToJSError } from '../../utils';\nlet subscriptions = [];\nexport default class RewardedVideo {\n  constructor(admob, adUnit) {\n    for (let i = 0, len = subscriptions.length; i < len; i++) {\n      subscriptions[i].remove();\n    }\n\n    subscriptions = [];\n    this._admob = admob;\n    this.adUnit = adUnit;\n    this.loaded = false;\n    SharedEventEmitter.removeAllListeners(`rewarded_video_${adUnit}`);\n    SharedEventEmitter.addListener(`rewarded_video_${adUnit}`, this._onRewardedVideoEvent);\n  }\n  /**\n   * Handle a JS emit event\n   * @param event\n   * @private\n   */\n\n\n  _onRewardedVideoEvent = event => {\n    const eventType = `rewarded_video:${this.adUnit}:${event.type}`;\n    let emitData = Object.assign({}, event);\n\n    switch (event.type) {\n      case 'onAdLoaded':\n        this.loaded = true;\n        break;\n\n      case 'onAdFailedToLoad':\n        emitData = nativeToJSError(event.payload.code, event.payload.message);\n        emitData.type = event.type;\n        break;\n\n      default:\n    }\n\n    SharedEventEmitter.emit(eventType, emitData);\n    SharedEventEmitter.emit(`rewarded_video:${this.adUnit}:*`, emitData);\n  };\n  /**\n   * Load an ad with an instance of AdRequest\n   * @param request\n   * @returns {*}\n   */\n\n  loadAd(request) {\n    let adRequest = request;\n\n    if (!adRequest || !Object.keys(adRequest)) {\n      adRequest = new AdRequest().addTestDevice().build();\n    }\n\n    return getNativeModule(this._admob).rewardedVideoLoadAd(this.adUnit, adRequest);\n  }\n  /**\n   * Set custom data\n   * @param customData\n   * @returns {*}\n   */\n\n\n  setCustomData(customData) {\n    return getNativeModule(this._admob).rewardedVideoSetCustomData(this.adUnit, customData);\n  }\n  /**\n   * Return a local instance of isLoaded\n   * @returns {boolean}\n   */\n\n\n  isLoaded() {\n    return this.loaded;\n  }\n  /**\n   * Show the advert - will only show if loaded\n   * @returns {*}\n   */\n\n\n  show() {\n    if (this.loaded) {\n      getNativeModule(this._admob).rewardedVideoShowAd(this.adUnit);\n    }\n  }\n  /**\n   * Listen to an Ad event\n   * @param eventType\n   * @param listenerCb\n   * @returns {null}\n   */\n\n\n  on(eventType, listenerCb) {\n    const types = { ...statics.EventTypes,\n      ...statics.RewardedVideoEventTypes\n    };\n\n    if (!types[eventType]) {\n      console.warn(`Invalid event type provided, must be one of: ${Object.keys(types).join(', ')}`);\n      return null;\n    }\n\n    const sub = SharedEventEmitter.addListener(`rewarded_video:${this.adUnit}:${eventType}`, listenerCb);\n    subscriptions.push(sub);\n    return sub;\n  }\n\n}"]},"metadata":{},"sourceType":"module"}