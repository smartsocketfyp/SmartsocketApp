{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { getLogger } from \"../../utils/log\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport var NAMESPACE = 'config';\n\nvar RemoteConfig = function (_ModuleBase) {\n  _inherits(RemoteConfig, _ModuleBase);\n\n  var _super = _createSuper(RemoteConfig);\n\n  function RemoteConfig(app) {\n    var _this;\n\n    _classCallCheck(this, RemoteConfig);\n\n    _this = _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    _this._developerModeEnabled = false;\n    return _this;\n  }\n\n  _createClass(RemoteConfig, [{\n    key: \"_nativeValueToJS\",\n    value: function _nativeValueToJS(nativeValue) {\n      return {\n        source: nativeValue.source,\n        val: function val() {\n          if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n          if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n          if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n          return nativeValue.stringValue;\n        }\n      };\n    }\n  }, {\n    key: \"enableDeveloperMode\",\n    value: function enableDeveloperMode() {\n      if (!this._developerModeEnabled) {\n        getLogger(this).debug('Enabled developer mode');\n        getNativeModule(this).enableDeveloperMode();\n        this._developerModeEnabled = true;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(expiration) {\n      if (expiration !== undefined) {\n        getLogger(this).debug(\"Fetching remote config data with expiration \" + expiration.toString());\n        return getNativeModule(this).fetchWithExpirationDuration(expiration);\n      }\n\n      getLogger(this).debug('Fetching remote config data');\n      return getNativeModule(this).fetch();\n    }\n  }, {\n    key: \"activateFetched\",\n    value: function activateFetched() {\n      getLogger(this).debug('Activating remote config');\n      return getNativeModule(this).activateFetched();\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(key) {\n      return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n    }\n  }, {\n    key: \"getValues\",\n    value: function getValues(keys) {\n      var _this2 = this;\n\n      return getNativeModule(this).getValues(keys || []).then(function (nativeValues) {\n        var values = {};\n\n        for (var i = 0, len = keys.length; i < len; i++) {\n          values[keys[i]] = _this2._nativeValueToJS(nativeValues[i]);\n        }\n\n        return values;\n      });\n    }\n  }, {\n    key: \"getKeysByPrefix\",\n    value: function getKeysByPrefix(prefix) {\n      return getNativeModule(this).getKeysByPrefix(prefix);\n    }\n  }, {\n    key: \"setDefaults\",\n    value: function setDefaults(defaults) {\n      getNativeModule(this).setDefaults(defaults);\n    }\n  }, {\n    key: \"setDefaultsFromResource\",\n    value: function setDefaultsFromResource(resource) {\n      getNativeModule(this).setDefaultsFromResource(resource);\n    }\n  }]);\n\n  return RemoteConfig;\n}(ModuleBase);\n\nexport { RemoteConfig as default };\nexport var statics = {};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/config/index.js"],"names":["getLogger","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","RemoteConfig","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_developerModeEnabled","nativeValue","source","val","boolValue","stringValue","numberValue","undefined","toString","dataValue","debug","enableDeveloperMode","expiration","fetchWithExpirationDuration","fetch","activateFetched","key","getValue","then","_nativeValueToJS","keys","getValues","nativeValues","values","i","len","length","prefix","getKeysByPrefix","defaults","setDefaults","resource","setDefaultsFromResource","statics"],"mappings":"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","sourcesContent":["/**\n * \n * Remote Config representation wrapper\n */\nimport { getLogger } from '../../utils/log';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseRemoteConfig';\nexport const NAMESPACE = 'config';\n\n/**\n * @class Config\n */\nexport default class RemoteConfig extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._developerModeEnabled = false;\n  }\n  /**\n   * Converts a native map to single JS value\n   * @param nativeValue\n   * @returns {*}\n   * @private\n   */\n\n\n  _nativeValueToJS(nativeValue) {\n    return {\n      source: nativeValue.source,\n\n      val() {\n        if (nativeValue.boolValue !== null && (nativeValue.stringValue === 'true' || nativeValue.stringValue === 'false' || nativeValue.stringValue === null)) return nativeValue.boolValue;\n        if (nativeValue.numberValue !== null && nativeValue.numberValue !== undefined && (nativeValue.stringValue == null || nativeValue.stringValue === '' || nativeValue.numberValue.toString() === nativeValue.stringValue)) return nativeValue.numberValue;\n        if (nativeValue.dataValue !== nativeValue.stringValue && (nativeValue.stringValue == null || nativeValue.stringValue === '')) return nativeValue.dataValue;\n        return nativeValue.stringValue;\n      }\n\n    };\n  }\n  /**\n   * Enable Remote Config developer mode to allow for frequent refreshes of the cache\n   */\n\n\n  enableDeveloperMode() {\n    if (!this._developerModeEnabled) {\n      getLogger(this).debug('Enabled developer mode');\n      getNativeModule(this).enableDeveloperMode();\n      this._developerModeEnabled = true;\n    }\n  }\n  /**\n   * Fetches Remote Config data\n   * Call activateFetched to make fetched data available in app\n   * @returns {*|Promise.<String>}:\n   */\n\n\n  fetch(expiration) {\n    if (expiration !== undefined) {\n      getLogger(this).debug(`Fetching remote config data with expiration ${expiration.toString()}`);\n      return getNativeModule(this).fetchWithExpirationDuration(expiration);\n    }\n\n    getLogger(this).debug('Fetching remote config data');\n    return getNativeModule(this).fetch();\n  }\n  /**\n   * Applies Fetched Config data to the Active Config\n   * @returns {*|Promise.<Bool>}\n   * resolves if there was a Fetched Config, and it was activated,\n   * rejects if no Fetched Config was found, or the Fetched Config was already activated.\n   */\n\n\n  activateFetched() {\n    getLogger(this).debug('Activating remote config');\n    return getNativeModule(this).activateFetched();\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param key: Config key\n   * @returns {*|Promise.<Object>}, will always resolve\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValue(key) {\n    return getNativeModule(this).getValue(key || '').then(this._nativeValueToJS);\n  }\n  /**\n   * Gets the config value of the default namespace.\n   * @param keys: Config key\n   * @returns {*|Promise.<Object>}, will always resolve.\n   * Result will be a dictionary of key and config objects\n   * Object looks like\n   *  {\n   *    \"stringValue\" : stringValue,\n   *    \"numberValue\" : numberValue,\n   *    \"dataValue\" : dataValue,\n   *    \"boolValue\" : boolValue,\n   *    \"source\" : OneOf<String>(remoteConfigSourceRemote|remoteConfigSourceDefault|remoteConfigSourceStatic)\n   *  }\n   */\n\n\n  getValues(keys) {\n    return getNativeModule(this).getValues(keys || []).then(nativeValues => {\n      const values = {};\n\n      for (let i = 0, len = keys.length; i < len; i++) {\n        values[keys[i]] = this._nativeValueToJS(nativeValues[i]);\n      }\n\n      return values;\n    });\n  }\n  /**\n   * Get the set of parameter keys that start with the given prefix, from the default namespace\n   * @param prefix: The key prefix to look for. If prefix is nil or empty, returns all the keys.\n   * @returns {*|Promise.<Array<String>>}\n   */\n\n\n  getKeysByPrefix(prefix) {\n    return getNativeModule(this).getKeysByPrefix(prefix);\n  }\n  /**\n   * Sets config defaults for parameter keys and values in the default namespace config.\n   * @param defaults: A dictionary mapping a String key to a Object values.\n   */\n\n\n  setDefaults(defaults) {\n    getNativeModule(this).setDefaults(defaults);\n  }\n  /**\n   * Sets default configs from plist for default namespace;\n   * @param resource: The plist file name or resource ID\n   */\n\n\n  setDefaultsFromResource(resource) {\n    getNativeModule(this).setDefaultsFromResource(resource);\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"module"}