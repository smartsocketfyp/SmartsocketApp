{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebaseCrashlytics';\nexport var NAMESPACE = 'crashlytics';\n\nvar Crashlytics = function (_ModuleBase) {\n  _inherits(Crashlytics, _ModuleBase);\n\n  var _super = _createSuper(Crashlytics);\n\n  function Crashlytics(app) {\n    _classCallCheck(this, Crashlytics);\n\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  _createClass(Crashlytics, [{\n    key: \"crash\",\n    value: function crash() {\n      getNativeModule(this).crash();\n    }\n  }, {\n    key: \"log\",\n    value: function log(message) {\n      if (typeof message === 'string') {\n        getNativeModule(this).log(message);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"recordError\",\n    value: function recordError(code, message) {\n      if (typeof code === 'number' && typeof message === 'string') {\n        getNativeModule(this).recordError(code, message);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"recordCustomError\",\n    value: function recordCustomError(name, message, stack) {\n      if (typeof stack === 'undefined') {\n        if (typeof name === 'string' && typeof message === 'string') {\n          getNativeModule(this).recordCustomError(name, message, []);\n        } else {\n          throw new Error('Invalid parameter type!');\n        }\n      } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n        var hasKey = true;\n        stack.forEach(function (v) {\n          if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n            hasKey = false;\n          }\n        });\n\n        if (hasKey) {\n          getNativeModule(this).recordCustomError(name, message, stack);\n        } else {\n          throw new Error('Missing required argument fileName!');\n        }\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setBoolValue\",\n    value: function setBoolValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'boolean') {\n        getNativeModule(this).setBoolValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setFloatValue\",\n    value: function setFloatValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'number') {\n        getNativeModule(this).setFloatValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setIntValue\",\n    value: function setIntValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'number') {\n        getNativeModule(this).setIntValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setStringValue\",\n    value: function setStringValue(key, value) {\n      if (typeof key === 'string' && typeof value === 'string') {\n        getNativeModule(this).setStringValue(key, value);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setUserIdentifier\",\n    value: function setUserIdentifier(userId) {\n      if (typeof userId === 'string') {\n        getNativeModule(this).setUserIdentifier(userId);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"setUserName\",\n    value: function setUserName(userName) {\n      if (typeof userName === 'string') {\n        return getNativeModule(this).setUserName(userName);\n      }\n\n      throw new Error('Invalid parameter type!');\n    }\n  }, {\n    key: \"setUserEmail\",\n    value: function setUserEmail(userEmail) {\n      if (typeof userEmail === 'string') {\n        getNativeModule(this).setUserEmail(userEmail);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    }\n  }, {\n    key: \"enableCrashlyticsCollection\",\n    value: function enableCrashlyticsCollection() {\n      getNativeModule(this).enableCrashlyticsCollection();\n    }\n  }]);\n\n  return Crashlytics;\n}(ModuleBase);\n\nexport { Crashlytics as default };\nexport var statics = {};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/crashlytics/index.js"],"names":["ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","Crashlytics","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","crash","message","log","Error","code","recordError","name","stack","recordCustomError","Array","isArray","hasKey","forEach","v","Object","prototype","hasOwnProperty","call","key","value","setBoolValue","setFloatValue","setIntValue","setStringValue","userId","setUserIdentifier","userName","setUserName","userEmail","setUserEmail","enableCrashlyticsCollection","statics"],"mappings":"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","sourcesContent":["/**\n * \n * Crash Reporting representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebaseCrashlytics';\nexport const NAMESPACE = 'crashlytics';\nexport default class Crashlytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Forces a crash. Useful for testing your application is set up correctly.\n   */\n\n\n  crash() {\n    getNativeModule(this).crash();\n  }\n  /**\n   * Logs a message that will appear in any subsequent crash reports.\n   * @param {string} message\n   */\n\n\n  log(message) {\n    if (typeof message === 'string') {\n      getNativeModule(this).log(message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a non fatal exception.\n   * @param {number} code\n   * @param {string} message\n   */\n\n\n  recordError(code, message) {\n    if (typeof code === 'number' && typeof message === 'string') {\n      getNativeModule(this).recordError(code, message);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Logs a custom non fatal exception.\n   * @param {string} name\n   * @param {string} message\n   * @param {Object[]} stack Optional\n   */\n\n\n  recordCustomError(name, message, stack) {\n    if (typeof stack === 'undefined') {\n      if (typeof name === 'string' && typeof message === 'string') {\n        getNativeModule(this).recordCustomError(name, message, []);\n      } else {\n        throw new Error('Invalid parameter type!');\n      }\n    } else if (typeof name === 'string' && typeof message === 'string' && Array.isArray(stack)) {\n      let hasKey = true;\n      stack.forEach(v => {\n        if (!Object.prototype.hasOwnProperty.call(v, 'fileName')) {\n          hasKey = false;\n        }\n      });\n\n      if (hasKey) {\n        getNativeModule(this).recordCustomError(name, message, stack);\n      } else {\n        throw new Error('Missing required argument fileName!');\n      }\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a boolean value to show alongside any subsequent crash reports.\n   */\n\n\n  setBoolValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'boolean') {\n      getNativeModule(this).setBoolValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a float value to show alongside any subsequent crash reports.\n   */\n\n\n  setFloatValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setFloatValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set an integer value to show alongside any subsequent crash reports.\n   */\n\n\n  setIntValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'number') {\n      getNativeModule(this).setIntValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set a string value to show alongside any subsequent crash reports.\n   */\n\n\n  setStringValue(key, value) {\n    if (typeof key === 'string' && typeof value === 'string') {\n      getNativeModule(this).setStringValue(key, value);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user ID to show alongside any subsequent crash reports.\n   */\n\n\n  setUserIdentifier(userId) {\n    if (typeof userId === 'string') {\n      getNativeModule(this).setUserIdentifier(userId);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Set the user name to show alongside any subsequent crash reports.\n   */\n\n\n  setUserName(userName) {\n    if (typeof userName === 'string') {\n      return getNativeModule(this).setUserName(userName);\n    }\n\n    throw new Error('Invalid parameter type!');\n  }\n  /**\n   * Set the user email to show alongside any subsequent crash reports.\n   */\n\n\n  setUserEmail(userEmail) {\n    if (typeof userEmail === 'string') {\n      getNativeModule(this).setUserEmail(userEmail);\n    } else {\n      throw new Error('Invalid parameter type!');\n    }\n  }\n  /**\n   * Enable Crashlytics reporting. Only avaliable when disabled automatic initialization\n   */\n\n\n  enableCrashlyticsCollection() {\n    getNativeModule(this).enableCrashlyticsCollection();\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"module"}