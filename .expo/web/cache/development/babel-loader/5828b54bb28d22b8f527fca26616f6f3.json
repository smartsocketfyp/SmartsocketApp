{"ast":null,"code":"import INTERNALS from \"./internals\";\nvar NATIVE_LOGGERS = {};\n\nvar getModuleKey = function getModuleKey(module) {\n  return module.app.name + \":\" + module.namespace;\n};\n\nexport var getLogger = function getLogger(module) {\n  var key = getModuleKey(module);\n  return NATIVE_LOGGERS[key];\n};\nexport var LEVELS = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n};\nexport var initialiseLogger = function initialiseLogger(module, logNamespace) {\n  var key = getModuleKey(module);\n\n  if (!NATIVE_LOGGERS[key]) {\n    var prefix = \"\\uD83D\\uDD25 \" + logNamespace.toUpperCase();\n    NATIVE_LOGGERS[key] = {\n      debug: function debug() {\n        var _console;\n\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n\n        if (__DEV__ && LEVELS.debug >= LEVELS[INTERNALS.OPTIONS.logLevel]) (_console = console).log.apply(_console, [prefix].concat(args));\n      },\n      info: function info() {\n        var _console2;\n\n        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n          args[_key2] = arguments[_key2];\n        }\n\n        if (__DEV__ && LEVELS.info >= LEVELS[INTERNALS.OPTIONS.logLevel]) (_console2 = console).log.apply(_console2, [prefix].concat(args));\n      },\n      warn: function warn() {\n        var _console3;\n\n        if (__DEV__ && LEVELS.warn >= LEVELS[INTERNALS.OPTIONS.logLevel]) (_console3 = console).warn.apply(_console3, arguments);\n      },\n      error: function error() {\n        var _console4;\n\n        (_console4 = console).error.apply(_console4, arguments);\n      }\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/utils/log.js"],"names":["INTERNALS","NATIVE_LOGGERS","getModuleKey","module","app","name","namespace","getLogger","key","LEVELS","debug","info","warn","error","initialiseLogger","logNamespace","prefix","toUpperCase","args","__DEV__","OPTIONS","logLevel","console","log"],"mappings":"AAAA,OAAOA,SAAP;AACA,IAAMC,cAAc,GAAG,EAAvB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,MAAM;AAAA,SAAOA,MAAM,CAACC,GAAP,CAAWC,IAAlB,SAA0BF,MAAM,CAACG,SAAjC;AAAA,CAA3B;;AAEA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAJ,MAAM,EAAI;AACjC,MAAMK,GAAG,GAAGN,YAAY,CAACC,MAAD,CAAxB;AACA,SAAOF,cAAc,CAACO,GAAD,CAArB;AACD,CAHM;AAIP,OAAO,IAAMC,MAAM,GAAG;AACpBC,EAAAA,KAAK,EAAE,CADa;AAEpBC,EAAAA,IAAI,EAAE,CAFc;AAGpBC,EAAAA,IAAI,EAAE,CAHc;AAIpBC,EAAAA,KAAK,EAAE;AAJa,CAAf;AAMP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACX,MAAD,EAASY,YAAT,EAA0B;AACxD,MAAMP,GAAG,GAAGN,YAAY,CAACC,MAAD,CAAxB;;AAEA,MAAI,CAACF,cAAc,CAACO,GAAD,CAAnB,EAA0B;AACxB,QAAMQ,MAAM,qBAASD,YAAY,CAACE,WAAb,EAArB;AACAhB,IAAAA,cAAc,CAACO,GAAD,CAAd,GAAsB;AACpBE,MAAAA,KADoB,mBACL;AAAA;;AAAA,0CAANQ,IAAM;AAANA,UAAAA,IAAM;AAAA;;AACb,YAAIC,OAAO,IAAIV,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACT,SAAS,CAACoB,OAAV,CAAkBC,QAAnB,CAArC,EAAmE,YAAAC,OAAO,EAACC,GAAR,kBAAgBP,MAAhB,SAA2BE,IAA3B;AACpE,OAHmB;AAKpBP,MAAAA,IALoB,kBAKN;AAAA;;AAAA,2CAANO,IAAM;AAANA,UAAAA,IAAM;AAAA;;AACZ,YAAIC,OAAO,IAAIV,MAAM,CAACE,IAAP,IAAeF,MAAM,CAACT,SAAS,CAACoB,OAAV,CAAkBC,QAAnB,CAApC,EAAkE,aAAAC,OAAO,EAACC,GAAR,mBAAgBP,MAAhB,SAA2BE,IAA3B;AACnE,OAPmB;AASpBN,MAAAA,IAToB,kBASN;AAAA;;AACZ,YAAIO,OAAO,IAAIV,MAAM,CAACG,IAAP,IAAeH,MAAM,CAACT,SAAS,CAACoB,OAAV,CAAkBC,QAAnB,CAApC,EAAkE,aAAAC,OAAO,EAACV,IAAR;AACnE,OAXmB;AAapBC,MAAAA,KAboB,mBAaL;AAAA;;AACb,qBAAAS,OAAO,EAACT,KAAR;AACD;AAfmB,KAAtB;AAkBD;AACF,CAxBM","sourcesContent":["import INTERNALS from './internals';\nconst NATIVE_LOGGERS = {};\n\nconst getModuleKey = module => `${module.app.name}:${module.namespace}`;\n\nexport const getLogger = module => {\n  const key = getModuleKey(module);\n  return NATIVE_LOGGERS[key];\n};\nexport const LEVELS = {\n  debug: 0,\n  info: 1,\n  warn: 2,\n  error: 3\n};\nexport const initialiseLogger = (module, logNamespace) => {\n  const key = getModuleKey(module);\n\n  if (!NATIVE_LOGGERS[key]) {\n    const prefix = `ðŸ”¥ ${logNamespace.toUpperCase()}`;\n    NATIVE_LOGGERS[key] = {\n      debug(...args) {\n        if (__DEV__ && LEVELS.debug >= LEVELS[INTERNALS.OPTIONS.logLevel]) console.log(...[prefix, ...args]);\n      },\n\n      info(...args) {\n        if (__DEV__ && LEVELS.info >= LEVELS[INTERNALS.OPTIONS.logLevel]) console.log(...[prefix, ...args]);\n      },\n\n      warn(...args) {\n        if (__DEV__ && LEVELS.warn >= LEVELS[INTERNALS.OPTIONS.logLevel]) console.warn(...args);\n      },\n\n      error(...args) {\n        console.error(...args);\n      }\n\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}