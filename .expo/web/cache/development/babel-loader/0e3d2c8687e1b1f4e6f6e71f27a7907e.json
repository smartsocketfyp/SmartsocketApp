{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport CollectionReference from \"./CollectionReference\";\nimport DocumentReference from \"./DocumentReference\";\nimport FieldPath from \"./FieldPath\";\nimport FieldValue from \"./FieldValue\";\nimport GeoPoint from \"./GeoPoint\";\nimport Blob from \"./Blob\";\nimport Path from \"./Path\";\nimport WriteBatch from \"./WriteBatch\";\nimport TransactionHandler from \"./TransactionHandler\";\nimport Timestamp from \"./Timestamp\";\nimport Transaction from \"./Transaction\";\nimport { isBoolean, isObject, isString, isNumber, hop } from \"../../utils\";\nimport { getNativeModule } from \"../../utils/native\";\nvar CACHE_SIZE_UNLIMITED = -1;\nvar MIN_CACHE_SIZE = 1048576;\nvar NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nvar LogLevels = ['debug', 'error', 'silent'];\nexport var MODULE_NAME = 'RNFirebaseFirestore';\nexport var NAMESPACE = 'firestore';\n\nvar Firestore = function (_ModuleBase) {\n  _inherits(Firestore, _ModuleBase);\n\n  var _super = _createSuper(Firestore);\n\n  function Firestore(app) {\n    var _this;\n\n    _classCallCheck(this, Firestore);\n\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    _this._referencePath = new Path([]);\n    _this._transactionHandler = new TransactionHandler(_assertThisInitialized(_this));\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'firestore_collection_sync_event'), _this._onCollectionSyncEvent.bind(_assertThisInitialized(_this)));\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'firestore_document_sync_event'), _this._onDocumentSyncEvent.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Firestore, [{\n    key: \"batch\",\n    value: function batch() {\n      return new WriteBatch(this);\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      var path = this._referencePath.child(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error('Argument \"collectionPath\" must point to a collection.');\n      }\n\n      return new CollectionReference(this, path);\n    }\n  }, {\n    key: \"disableNetwork\",\n    value: function disableNetwork() {\n      return getNativeModule(this).disableNetwork();\n    }\n  }, {\n    key: \"doc\",\n    value: function doc(documentPath) {\n      var path = this._referencePath.child(documentPath);\n\n      if (!path.isDocument) {\n        throw new Error('Argument \"documentPath\" must point to a document.');\n      }\n\n      return new DocumentReference(this, path);\n    }\n  }, {\n    key: \"enableNetwork\",\n    value: function enableNetwork() {\n      return getNativeModule(this).enableNetwork();\n    }\n  }, {\n    key: \"runTransaction\",\n    value: function runTransaction(updateFunction) {\n      return this._transactionHandler._add(updateFunction);\n    }\n  }, {\n    key: \"settings\",\n    value: function settings(_settings) {\n      if (!isObject(_settings)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n      }\n\n      if (hop(_settings, 'host') && !isString(_settings.host)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n      }\n\n      if (hop(_settings, 'persistence') && !isBoolean(_settings.persistence)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n      }\n\n      if (hop(_settings, 'cacheSizeBytes')) {\n        if (!isNumber(_settings.cacheSizeBytes)) {\n          return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n        }\n\n        if (_settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && _settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n          return Promise.reject(new Error(\"Firestore.settings failed: settings.cacheSizeBytes must be set to \" + MIN_CACHE_SIZE + \" at least bytes.\"));\n        }\n      }\n\n      if (hop(_settings, 'ssl') && !isBoolean(_settings.ssl)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n      }\n\n      if (hop(_settings, 'timestampsInSnapshots') && !isBoolean(_settings.timestampsInSnapshots)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n      }\n\n      return getNativeModule(this).settings(_settings);\n    }\n  }, {\n    key: \"enablePersistence\",\n    value: function enablePersistence() {\n      console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n      return Promise.resolve();\n    }\n  }, {\n    key: \"_onCollectionSyncEvent\",\n    value: function _onCollectionSyncEvent(event) {\n      if (event.error) {\n        SharedEventEmitter.emit(getAppEventName(this, \"onQuerySnapshotError:\" + event.listenerId), event);\n      } else {\n        SharedEventEmitter.emit(getAppEventName(this, \"onQuerySnapshot:\" + event.listenerId), event.querySnapshot);\n      }\n    }\n  }, {\n    key: \"_onDocumentSyncEvent\",\n    value: function _onDocumentSyncEvent(event) {\n      if (event.error) {\n        SharedEventEmitter.emit(getAppEventName(this, \"onDocumentSnapshotError:\" + event.listenerId), event);\n      } else {\n        SharedEventEmitter.emit(getAppEventName(this, \"onDocumentSnapshot:\" + event.listenerId), event.documentSnapshot);\n      }\n    }\n  }]);\n\n  return Firestore;\n}(ModuleBase);\n\nexport { Firestore as default };\nexport var statics = {\n  Blob: Blob,\n  FieldPath: FieldPath,\n  FieldValue: FieldValue,\n  GeoPoint: GeoPoint,\n  Timestamp: Timestamp,\n  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED,\n  enableLogging: function enableLogging(enabled) {\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n  setLogLevel: function setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/firestore/index.js"],"names":["getAppEventName","SharedEventEmitter","ModuleBase","CollectionReference","DocumentReference","FieldPath","FieldValue","GeoPoint","Blob","Path","WriteBatch","TransactionHandler","Timestamp","Transaction","isBoolean","isObject","isString","isNumber","hop","getNativeModule","CACHE_SIZE_UNLIMITED","MIN_CACHE_SIZE","NATIVE_EVENTS","LogLevels","MODULE_NAME","NAMESPACE","Firestore","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_referencePath","_transactionHandler","addListener","_onCollectionSyncEvent","bind","_onDocumentSyncEvent","collectionPath","path","child","isCollection","Error","disableNetwork","documentPath","isDocument","enableNetwork","updateFunction","_add","settings","Promise","reject","host","persistence","cacheSizeBytes","ssl","timestampsInSnapshots","console","warn","resolve","event","error","emit","listenerId","querySnapshot","documentSnapshot","statics","enableLogging","enabled","setLogLevel","logLevel","indexOf","NativeModules"],"mappings":"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","sourcesContent":["/**\n * \n * Firestore representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport ModuleBase from '../../utils/ModuleBase';\nimport CollectionReference from './CollectionReference';\nimport DocumentReference from './DocumentReference';\nimport FieldPath from './FieldPath';\nimport FieldValue from './FieldValue';\nimport GeoPoint from './GeoPoint';\nimport Blob from './Blob';\nimport Path from './Path';\nimport WriteBatch from './WriteBatch';\nimport TransactionHandler from './TransactionHandler';\nimport Timestamp from './Timestamp';\nimport Transaction from './Transaction';\nimport { isBoolean, isObject, isString, isNumber, hop } from '../../utils';\nimport { getNativeModule } from '../../utils/native';\n// A flag representing the unlimited cache size\nconst CACHE_SIZE_UNLIMITED = -1; // The minimum cache size in the firebase SDK (currently 1MB)\n\nconst MIN_CACHE_SIZE = 1048576;\nconst NATIVE_EVENTS = ['firestore_transaction_event', 'firestore_document_sync_event', 'firestore_collection_sync_event'];\nconst LogLevels = ['debug', 'error', 'silent'];\nexport const MODULE_NAME = 'RNFirebaseFirestore';\nexport const NAMESPACE = 'firestore';\n/**\n * @class Firestore\n */\n\nexport default class Firestore extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    this._referencePath = new Path([]);\n    this._transactionHandler = new TransactionHandler(this);\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onCollectionSnapshot\n    getAppEventName(this, 'firestore_collection_sync_event'), this._onCollectionSyncEvent.bind(this));\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onDocumentSnapshot\n    getAppEventName(this, 'firestore_document_sync_event'), this._onDocumentSyncEvent.bind(this));\n  }\n  /**\n   * -------------\n   *  PUBLIC API\n   * -------------\n   */\n\n  /**\n   * Creates a write batch, used for performing multiple writes as a single atomic operation.\n   *\n   * @returns {WriteBatch}\n   */\n\n\n  batch() {\n    return new WriteBatch(this);\n  }\n  /**\n   * Gets a CollectionReference instance that refers to the collection at the specified path.\n   *\n   * @param collectionPath\n   * @returns {CollectionReference}\n   */\n\n\n  collection(collectionPath) {\n    const path = this._referencePath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n\n    return new CollectionReference(this, path);\n  }\n\n  disableNetwork() {\n    return getNativeModule(this).disableNetwork();\n  }\n  /**\n   * Gets a DocumentReference instance that refers to the document at the specified path.\n   *\n   * @param documentPath\n   * @returns {DocumentReference}\n   */\n\n\n  doc(documentPath) {\n    const path = this._referencePath.child(documentPath);\n\n    if (!path.isDocument) {\n      throw new Error('Argument \"documentPath\" must point to a document.');\n    }\n\n    return new DocumentReference(this, path);\n  }\n\n  enableNetwork() {\n    return getNativeModule(this).enableNetwork();\n  }\n  /**\n   * Executes the given updateFunction and then attempts to commit the\n   * changes applied within the transaction. If any document read within\n   * the transaction has changed, Cloud Firestore retries the updateFunction.\n   *\n   * If it fails to commit after 5 attempts, the transaction fails.\n   *\n   * @param updateFunction\n   * @returns {void|Promise<any>}\n   */\n\n\n  runTransaction(updateFunction) {\n    return this._transactionHandler._add(updateFunction);\n  }\n\n  settings(settings) {\n    if (!isObject(settings)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings must be an object.'));\n    }\n\n    if (hop(settings, 'host') && !isString(settings.host)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.host must be a string.'));\n    }\n\n    if (hop(settings, 'persistence') && !isBoolean(settings.persistence)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.persistence must be boolean.'));\n    }\n\n    if (hop(settings, 'cacheSizeBytes')) {\n      if (!isNumber(settings.cacheSizeBytes)) {\n        return Promise.reject(new Error('Firestore.settings failed: settings.cacheSizeBytes must be number.'));\n      }\n\n      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < MIN_CACHE_SIZE) {\n        return Promise.reject(new Error(`Firestore.settings failed: settings.cacheSizeBytes must be set to ${MIN_CACHE_SIZE} at least bytes.`));\n      }\n    }\n\n    if (hop(settings, 'ssl') && !isBoolean(settings.ssl)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.ssl must be boolean.'));\n    }\n\n    if (hop(settings, 'timestampsInSnapshots') && !isBoolean(settings.timestampsInSnapshots)) {\n      return Promise.reject(new Error('Firestore.settings failed: settings.timestampsInSnapshots must be boolean.'));\n    }\n\n    return getNativeModule(this).settings(settings);\n  }\n  /**\n   * -------------\n   *  UNSUPPORTED\n   * -------------\n   */\n\n\n  enablePersistence() {\n    console.warn('Due to restrictions in the native SDK, persistence must be configured in firebase.firestore().settings()');\n    return Promise.resolve();\n  }\n  /**\n   * -------------\n   *   INTERNALS\n   * -------------\n   */\n\n  /**\n   * Internal collection sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onCollectionSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onQuerySnapshot:${event.listenerId}`), event.querySnapshot);\n    }\n  }\n  /**\n   * Internal document sync listener\n   *\n   * @param event\n   * @private\n   */\n\n\n  _onDocumentSyncEvent(event) {\n    if (event.error) {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshotError:${event.listenerId}`), event);\n    } else {\n      SharedEventEmitter.emit(getAppEventName(this, `onDocumentSnapshot:${event.listenerId}`), event.documentSnapshot);\n    }\n  }\n\n}\nexport const statics = {\n  Blob,\n  FieldPath,\n  FieldValue,\n  GeoPoint,\n  Timestamp,\n  CACHE_SIZE_UNLIMITED,\n\n  enableLogging(enabled) {\n    // DEPRECATED: Remove method in v4.1.0\n    console.warn('firebase.firestore.enableLogging is deprecated, use firebase.firestore().setLogLevel instead.');\n    this.setLogLevel(enabled ? 'debug' : 'silent');\n  },\n\n  setLogLevel(logLevel) {\n    if (LogLevels.indexOf(logLevel) === -1) {\n      throw new Error('Argument `logLevel` must be one of: `debug`, `error`, `silent`');\n    }\n\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].setLogLevel(logLevel);\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"module"}