{"ast":null,"code":"import _construct from \"@babel/runtime/helpers/construct\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport FieldPath from \"./FieldPath\";\nimport QuerySnapshot from \"./QuerySnapshot\";\nimport SnapshotError from \"./SnapshotError\";\nimport DocumentSnapshot from \"./DocumentSnapshot\";\nimport { getNativeModule } from \"../../utils/native\";\nimport { buildNativeArray, buildTypeMap } from \"./utils/serialize\";\nimport { firestoreAutoId, isFunction, isObject } from \"../../utils\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nvar DIRECTIONS = {\n  ASC: 'ASCENDING',\n  asc: 'ASCENDING',\n  DESC: 'DESCENDING',\n  desc: 'DESCENDING'\n};\nvar OPERATORS = {\n  '=': 'EQUAL',\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS'\n};\n\nfunction buildNativeFieldPath(fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return {\n      elements: fieldPath._segments,\n      type: 'fieldpath'\n    };\n  }\n\n  return {\n    string: fieldPath,\n    type: 'string'\n  };\n}\n\nvar Query = function () {\n  function Query(firestore, path, fieldFilters, fieldOrders, queryOptions) {\n    _classCallCheck(this, Query);\n\n    this._fieldFilters = fieldFilters || [];\n    this._fieldOrders = fieldOrders || [];\n    this._firestore = firestore;\n    this._queryOptions = queryOptions || {};\n    this._referencePath = path;\n  }\n\n  _createClass(Query, [{\n    key: \"endAt\",\n    value: function endAt() {\n      for (var _len = arguments.length, snapshotOrVarArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n        snapshotOrVarArgs[_key] = arguments[_key];\n      }\n\n      var options = _objectSpread(_objectSpread({}, this._queryOptions), {}, {\n        endAt: this._buildOrderByOption(snapshotOrVarArgs)\n      });\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n    }\n  }, {\n    key: \"endBefore\",\n    value: function endBefore() {\n      for (var _len2 = arguments.length, snapshotOrVarArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        snapshotOrVarArgs[_key2] = arguments[_key2];\n      }\n\n      var options = _objectSpread(_objectSpread({}, this._queryOptions), {}, {\n        endBefore: this._buildOrderByOption(snapshotOrVarArgs)\n      });\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n\n      if (options) {\n        if (!isObject(options)) {\n          return Promise.reject(new Error('Query.get failed: First argument must be an object.'));\n        }\n\n        if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n          return Promise.reject(new Error('Query.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n        }\n      }\n\n      return getNativeModule(this._firestore).collectionGet(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, options).then(function (nativeData) {\n        return new QuerySnapshot(_this._firestore, _this, nativeData);\n      });\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(otherQuery) {\n      if (!(otherQuery instanceof Query)) {\n        throw new Error('firebase.firestore.Query.isEqual(*) expects an instance of Query.');\n      }\n\n      if (this._firestore.app.name !== otherQuery._firestore.app.name) {\n        return false;\n      }\n\n      if (this._firestore.app.options.projectId !== otherQuery._firestore.app.options.projectId) {\n        return false;\n      }\n\n      if (this._fieldFilters.length !== otherQuery._fieldFilters.length) {\n        return false;\n      }\n\n      for (var i = 0; i < this._fieldFilters.length; i++) {\n        var thisFieldFilter = this._fieldFilters[i];\n        var otherFieldFilter = otherQuery._fieldFilters[i];\n\n        if (thisFieldFilter.fieldPath.string !== otherFieldFilter.fieldPath.string) {\n          return false;\n        }\n\n        if (thisFieldFilter.fieldPath.type !== otherFieldFilter.fieldPath.type) {\n          return false;\n        }\n\n        if (thisFieldFilter.value.type !== otherFieldFilter.value.type) {\n          return false;\n        }\n\n        if (thisFieldFilter.value.value !== otherFieldFilter.value.value) {\n          return false;\n        }\n\n        if (thisFieldFilter.operator !== otherFieldFilter.operator) {\n          return false;\n        }\n      }\n\n      if (this._fieldOrders.length !== otherQuery._fieldOrders.length) {\n        return false;\n      }\n\n      for (var _i = 0; _i < this._fieldOrders.length; _i++) {\n        var thisFieldOrder = this._fieldOrders[_i];\n        var otherFieldOrder = otherQuery._fieldOrders[_i];\n\n        if (thisFieldOrder.direction !== otherFieldOrder.direction) {\n          return false;\n        }\n\n        if (thisFieldOrder.fieldPath.string !== otherFieldOrder.fieldPath.string) {\n          return false;\n        }\n\n        if (thisFieldOrder.fieldPath.type !== otherFieldOrder.fieldPath.type) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }, {\n    key: \"limit\",\n    value: function limit(_limit) {\n      var options = _objectSpread(_objectSpread({}, this._queryOptions), {}, {\n        limit: _limit\n      });\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n      var _this2 = this;\n\n      var observer;\n      var metadataChanges = {};\n\n      if (isFunction(optionsOrObserverOrOnNext)) {\n        if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n          throw new Error('Query.onSnapshot failed: Second argument must be a valid function.');\n        }\n\n        observer = {\n          next: optionsOrObserverOrOnNext,\n          error: observerOrOnNextOrOnError\n        };\n      } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n        if (optionsOrObserverOrOnNext.next) {\n          if (isFunction(optionsOrObserverOrOnNext.next)) {\n            if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n              throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n            }\n\n            observer = {\n              next: optionsOrObserverOrOnNext.next,\n              error: optionsOrObserverOrOnNext.error\n            };\n          } else {\n            throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n          metadataChanges = optionsOrObserverOrOnNext;\n\n          if (isFunction(observerOrOnNextOrOnError)) {\n            if (onError && !isFunction(onError)) {\n              throw new Error('Query.onSnapshot failed: Third argument must be a valid function.');\n            }\n\n            observer = {\n              next: observerOrOnNextOrOnError,\n              error: onError\n            };\n          } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n            if (isFunction(observerOrOnNextOrOnError.next)) {\n              if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n                throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n              }\n\n              observer = {\n                next: observerOrOnNextOrOnError.next,\n                error: observerOrOnNextOrOnError.error\n              };\n            } else {\n              throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n            }\n          } else {\n            throw new Error('Query.onSnapshot failed: Second argument must be a function or observer.');\n          }\n        } else {\n          throw new Error('Query.onSnapshot failed: First argument must be a function, observer or options.');\n        }\n      } else {\n        throw new Error('Query.onSnapshot failed: Called with invalid arguments.');\n      }\n\n      var listenerId = firestoreAutoId();\n\n      var listener = function listener(nativeQuerySnapshot) {\n        var querySnapshot = new QuerySnapshot(_this2._firestore, _this2, nativeQuerySnapshot);\n        observer.next(querySnapshot);\n      };\n\n      var unsubscribe;\n      var snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, \"onQuerySnapshot:\" + listenerId), listener);\n      var errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, \"onQuerySnapshotError:\" + listenerId), function (e) {\n        if (unsubscribe) unsubscribe();\n        var error = new SnapshotError(e);\n        if (observer.error) observer.error(error);else _this2.firestore.log.error(error);\n      });\n      getNativeModule(this._firestore).collectionOnSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId, metadataChanges);\n\n      unsubscribe = function unsubscribe() {\n        snapshotSubscription.remove();\n        errorSubscription.remove();\n        getNativeModule(_this2._firestore).collectionOffSnapshot(_this2._referencePath.relativeName, _this2._fieldFilters, _this2._fieldOrders, _this2._queryOptions, listenerId);\n      };\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"orderBy\",\n    value: function orderBy(fieldPath) {\n      var directionStr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'asc';\n\n      if (this._queryOptions.startAt || this._queryOptions.startAfter || this._queryOptions.endAt || this._queryOptions.endBefore) {\n        throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');\n      }\n\n      var newOrder = {\n        direction: DIRECTIONS[directionStr],\n        fieldPath: buildNativeFieldPath(fieldPath)\n      };\n\n      var combinedOrders = this._fieldOrders.concat(newOrder);\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, combinedOrders, this._queryOptions);\n    }\n  }, {\n    key: \"startAfter\",\n    value: function startAfter() {\n      for (var _len3 = arguments.length, snapshotOrVarArgs = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        snapshotOrVarArgs[_key3] = arguments[_key3];\n      }\n\n      var options = _objectSpread(_objectSpread({}, this._queryOptions), {}, {\n        startAfter: this._buildOrderByOption(snapshotOrVarArgs)\n      });\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt() {\n      for (var _len4 = arguments.length, snapshotOrVarArgs = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        snapshotOrVarArgs[_key4] = arguments[_key4];\n      }\n\n      var options = _objectSpread(_objectSpread({}, this._queryOptions), {}, {\n        startAt: this._buildOrderByOption(snapshotOrVarArgs)\n      });\n\n      return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n    }\n  }, {\n    key: \"where\",\n    value: function where(fieldPath, opStr, value) {\n      var nativeValue = buildTypeMap(value);\n      var newFilter = {\n        fieldPath: buildNativeFieldPath(fieldPath),\n        operator: OPERATORS[opStr],\n        value: nativeValue\n      };\n\n      var combinedFilters = this._fieldFilters.concat(newFilter);\n\n      return new Query(this.firestore, this._referencePath, combinedFilters, this._fieldOrders, this._queryOptions);\n    }\n  }, {\n    key: \"_buildOrderByOption\",\n    value: function _buildOrderByOption(snapshotOrVarArgs) {\n      var values;\n\n      if (snapshotOrVarArgs.length === 1 && snapshotOrVarArgs[0] instanceof DocumentSnapshot) {\n        var docSnapshot = snapshotOrVarArgs[0];\n        values = [];\n\n        for (var i = 0; i < this._fieldOrders.length; i++) {\n          var fieldOrder = this._fieldOrders[i];\n\n          if (fieldOrder.fieldPath.type === 'string' && fieldOrder.fieldPath.string) {\n            values.push(docSnapshot.get(fieldOrder.fieldPath.string));\n          } else if (fieldOrder.fieldPath.elements) {\n            var fieldPath = _construct(FieldPath, _toConsumableArray(fieldOrder.fieldPath.elements));\n\n            values.push(docSnapshot.get(fieldPath));\n          }\n        }\n      } else {\n        values = snapshotOrVarArgs;\n      }\n\n      return buildNativeArray(values);\n    }\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }]);\n\n  return Query;\n}();\n\nexport { Query as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/firestore/Query.js"],"names":["FieldPath","QuerySnapshot","SnapshotError","DocumentSnapshot","getNativeModule","buildNativeArray","buildTypeMap","firestoreAutoId","isFunction","isObject","getAppEventName","SharedEventEmitter","DIRECTIONS","ASC","asc","DESC","desc","OPERATORS","buildNativeFieldPath","fieldPath","elements","_segments","type","string","Query","firestore","path","fieldFilters","fieldOrders","queryOptions","_fieldFilters","_fieldOrders","_firestore","_queryOptions","_referencePath","snapshotOrVarArgs","options","endAt","_buildOrderByOption","endBefore","Promise","reject","Error","source","collectionGet","relativeName","then","nativeData","otherQuery","app","name","projectId","length","i","thisFieldFilter","otherFieldFilter","value","operator","thisFieldOrder","otherFieldOrder","direction","limit","optionsOrObserverOrOnNext","observerOrOnNextOrOnError","onError","observer","metadataChanges","next","error","Object","prototype","hasOwnProperty","call","listenerId","listener","nativeQuerySnapshot","querySnapshot","unsubscribe","snapshotSubscription","addListener","errorSubscription","e","log","collectionOnSnapshot","remove","collectionOffSnapshot","directionStr","startAt","startAfter","newOrder","combinedOrders","concat","opStr","nativeValue","newFilter","combinedFilters","values","docSnapshot","fieldOrder","push","get"],"mappings":"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","sourcesContent":["/**\n * \n * Query representation wrapper\n */\nimport FieldPath from './FieldPath';\nimport QuerySnapshot from './QuerySnapshot';\nimport SnapshotError from './SnapshotError';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport { getNativeModule } from '../../utils/native';\nimport { buildNativeArray, buildTypeMap } from './utils/serialize';\nimport { firestoreAutoId, isFunction, isObject } from '../../utils';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nconst DIRECTIONS = {\n  ASC: 'ASCENDING',\n  asc: 'ASCENDING',\n  DESC: 'DESCENDING',\n  desc: 'DESCENDING'\n};\nconst OPERATORS = {\n  '=': 'EQUAL',\n  '==': 'EQUAL',\n  '>': 'GREATER_THAN',\n  '>=': 'GREATER_THAN_OR_EQUAL',\n  '<': 'LESS_THAN',\n  '<=': 'LESS_THAN_OR_EQUAL',\n  'array-contains': 'ARRAY_CONTAINS'\n};\n\nfunction buildNativeFieldPath(fieldPath) {\n  if (fieldPath instanceof FieldPath) {\n    return {\n      elements: fieldPath._segments,\n      type: 'fieldpath'\n    };\n  }\n\n  return {\n    string: fieldPath,\n    type: 'string'\n  };\n}\n/**\n * @class Query\n */\n\n\nexport default class Query {\n  constructor(firestore, path, fieldFilters, fieldOrders, queryOptions) {\n    this._fieldFilters = fieldFilters || [];\n    this._fieldOrders = fieldOrders || [];\n    this._firestore = firestore;\n    this._queryOptions = queryOptions || {};\n    this._referencePath = path;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  endAt(...snapshotOrVarArgs) {\n    const options = { ...this._queryOptions,\n      endAt: this._buildOrderByOption(snapshotOrVarArgs)\n    };\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n  }\n\n  endBefore(...snapshotOrVarArgs) {\n    const options = { ...this._queryOptions,\n      endBefore: this._buildOrderByOption(snapshotOrVarArgs)\n    };\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n  }\n\n  get(options) {\n    if (options) {\n      if (!isObject(options)) {\n        return Promise.reject(new Error('Query.get failed: First argument must be an object.'));\n      }\n\n      if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        return Promise.reject(new Error('Query.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n      }\n    }\n\n    return getNativeModule(this._firestore).collectionGet(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, options).then(nativeData => new QuerySnapshot(this._firestore, this, nativeData));\n  }\n\n  isEqual(otherQuery) {\n    if (!(otherQuery instanceof Query)) {\n      throw new Error('firebase.firestore.Query.isEqual(*) expects an instance of Query.');\n    }\n\n    if (this._firestore.app.name !== otherQuery._firestore.app.name) {\n      return false;\n    }\n\n    if (this._firestore.app.options.projectId !== otherQuery._firestore.app.options.projectId) {\n      return false;\n    }\n\n    if (this._fieldFilters.length !== otherQuery._fieldFilters.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this._fieldFilters.length; i++) {\n      const thisFieldFilter = this._fieldFilters[i];\n      const otherFieldFilter = otherQuery._fieldFilters[i];\n\n      if (thisFieldFilter.fieldPath.string !== otherFieldFilter.fieldPath.string) {\n        return false;\n      }\n\n      if (thisFieldFilter.fieldPath.type !== otherFieldFilter.fieldPath.type) {\n        return false;\n      }\n\n      if (thisFieldFilter.value.type !== otherFieldFilter.value.type) {\n        return false;\n      }\n\n      if (thisFieldFilter.value.value !== otherFieldFilter.value.value) {\n        return false;\n      }\n\n      if (thisFieldFilter.operator !== otherFieldFilter.operator) {\n        return false;\n      }\n    }\n\n    if (this._fieldOrders.length !== otherQuery._fieldOrders.length) {\n      return false;\n    }\n\n    for (let i = 0; i < this._fieldOrders.length; i++) {\n      const thisFieldOrder = this._fieldOrders[i];\n      const otherFieldOrder = otherQuery._fieldOrders[i];\n\n      if (thisFieldOrder.direction !== otherFieldOrder.direction) {\n        return false;\n      }\n\n      if (thisFieldOrder.fieldPath.string !== otherFieldOrder.fieldPath.string) {\n        return false;\n      }\n\n      if (thisFieldOrder.fieldPath.type !== otherFieldOrder.fieldPath.type) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  limit(limit) {\n    // TODO: Validation\n    // validate.isInteger('n', n);\n    const options = { ...this._queryOptions,\n      limit\n    };\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n  }\n\n  onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n    // TODO refactor this 💩\n    let observer;\n    let metadataChanges = {}; // Called with: onNext, ?onError\n\n    if (isFunction(optionsOrObserverOrOnNext)) {\n      if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n        throw new Error('Query.onSnapshot failed: Second argument must be a valid function.');\n      } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n      observer = {\n        next: optionsOrObserverOrOnNext,\n        error: observerOrOnNextOrOnError\n      };\n    } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n      // Called with: Observer\n      if (optionsOrObserverOrOnNext.next) {\n        if (isFunction(optionsOrObserverOrOnNext.next)) {\n          if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n            throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: optionsOrObserverOrOnNext.next,\n            error: optionsOrObserverOrOnNext.error\n          };\n        } else {\n          throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n        }\n      } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n        metadataChanges = optionsOrObserverOrOnNext; // Called with: Options, onNext, ?onError\n\n        if (isFunction(observerOrOnNextOrOnError)) {\n          if (onError && !isFunction(onError)) {\n            throw new Error('Query.onSnapshot failed: Third argument must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: observerOrOnNextOrOnError,\n            error: onError\n          }; // Called with Options, Observer\n        } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n          if (isFunction(observerOrOnNextOrOnError.next)) {\n            if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n              throw new Error('Query.onSnapshot failed: Observer.error must be a valid function.');\n            }\n\n            observer = {\n              next: observerOrOnNextOrOnError.next,\n              error: observerOrOnNextOrOnError.error\n            };\n          } else {\n            throw new Error('Query.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else {\n          throw new Error('Query.onSnapshot failed: Second argument must be a function or observer.');\n        }\n      } else {\n        throw new Error('Query.onSnapshot failed: First argument must be a function, observer or options.');\n      }\n    } else {\n      throw new Error('Query.onSnapshot failed: Called with invalid arguments.');\n    }\n\n    const listenerId = firestoreAutoId();\n\n    const listener = nativeQuerySnapshot => {\n      const querySnapshot = new QuerySnapshot(this._firestore, this, nativeQuerySnapshot);\n      observer.next(querySnapshot);\n    };\n\n    let unsubscribe; // Listen to snapshot events\n\n    const snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onQuerySnapshot:${listenerId}`), listener); // listen for snapshot error events\n\n    const errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onQuerySnapshotError:${listenerId}`), e => {\n      if (unsubscribe) unsubscribe();\n      const error = new SnapshotError(e);\n      if (observer.error) observer.error(error);else this.firestore.log.error(error);\n    }); // Add the native listener\n\n    getNativeModule(this._firestore).collectionOnSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId, metadataChanges); // return an unsubscribe method\n\n    unsubscribe = () => {\n      snapshotSubscription.remove();\n      errorSubscription.remove(); // cancel native listener\n\n      getNativeModule(this._firestore).collectionOffSnapshot(this._referencePath.relativeName, this._fieldFilters, this._fieldOrders, this._queryOptions, listenerId);\n    };\n\n    return unsubscribe;\n  }\n\n  orderBy(fieldPath, directionStr = 'asc') {\n    // TODO: Validation\n    // validate.isFieldPath('fieldPath', fieldPath);\n    // validate.isOptionalFieldOrder('directionStr', directionStr);\n    if (this._queryOptions.startAt || this._queryOptions.startAfter || this._queryOptions.endAt || this._queryOptions.endBefore) {\n      throw new Error('Cannot specify an orderBy() constraint after calling ' + 'startAt(), startAfter(), endBefore() or endAt().');\n    }\n\n    const newOrder = {\n      direction: DIRECTIONS[directionStr],\n      fieldPath: buildNativeFieldPath(fieldPath)\n    };\n\n    const combinedOrders = this._fieldOrders.concat(newOrder);\n\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, combinedOrders, this._queryOptions);\n  }\n\n  startAfter(...snapshotOrVarArgs) {\n    const options = { ...this._queryOptions,\n      startAfter: this._buildOrderByOption(snapshotOrVarArgs)\n    };\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n  }\n\n  startAt(...snapshotOrVarArgs) {\n    const options = { ...this._queryOptions,\n      startAt: this._buildOrderByOption(snapshotOrVarArgs)\n    };\n    return new Query(this.firestore, this._referencePath, this._fieldFilters, this._fieldOrders, options);\n  }\n\n  where(fieldPath, opStr, value) {\n    // TODO: Validation\n    // validate.isFieldPath('fieldPath', fieldPath);\n    // validate.isFieldFilter('fieldFilter', opStr, value);\n    const nativeValue = buildTypeMap(value);\n    const newFilter = {\n      fieldPath: buildNativeFieldPath(fieldPath),\n      operator: OPERATORS[opStr],\n      value: nativeValue\n    };\n\n    const combinedFilters = this._fieldFilters.concat(newFilter);\n\n    return new Query(this.firestore, this._referencePath, combinedFilters, this._fieldOrders, this._queryOptions);\n  }\n  /**\n   * INTERNALS\n   */\n\n\n  _buildOrderByOption(snapshotOrVarArgs) {\n    // TODO: Validation\n    let values;\n\n    if (snapshotOrVarArgs.length === 1 && snapshotOrVarArgs[0] instanceof DocumentSnapshot) {\n      const docSnapshot = snapshotOrVarArgs[0];\n      values = [];\n\n      for (let i = 0; i < this._fieldOrders.length; i++) {\n        const fieldOrder = this._fieldOrders[i];\n\n        if (fieldOrder.fieldPath.type === 'string' && fieldOrder.fieldPath.string) {\n          values.push(docSnapshot.get(fieldOrder.fieldPath.string));\n        } else if (fieldOrder.fieldPath.elements) {\n          const fieldPath = new FieldPath(...fieldOrder.fieldPath.elements);\n          values.push(docSnapshot.get(fieldPath));\n        }\n      }\n    } else {\n      values = snapshotOrVarArgs;\n    }\n\n    return buildNativeArray(values);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}