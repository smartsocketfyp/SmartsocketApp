{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport Reference from \"./Reference\";\nimport TransactionHandler from \"./transaction\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nimport firebase from \"../core/firebase\";\nvar NATIVE_EVENTS = ['database_transaction_event'];\nexport var MODULE_NAME = 'RNFirebaseDatabase';\nexport var NAMESPACE = 'database';\n\nvar Database = function (_ModuleBase) {\n  _inherits(Database, _ModuleBase);\n\n  var _super = _createSuper(Database);\n\n  function Database(appOrCustomUrl, customUrl) {\n    var _this;\n\n    _classCallCheck(this, Database);\n\n    var app;\n    var url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    }\n\n    url = url.endsWith('/') ? url : url + \"/\";\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    _this._serverTimeOffset = 0;\n    _this._databaseURL = url;\n    _this._transactionHandler = new TransactionHandler(_assertThisInitialized(_this));\n\n    if (app.options.persistence) {\n      getNativeModule(_assertThisInitialized(_this)).setPersistence(app.options.persistence);\n    }\n\n    setTimeout(function () {\n      _this._offsetRef = _this.ref('.info/serverTimeOffset');\n\n      _this._offsetRef.on('value', function (snapshot) {\n        _this._serverTimeOffset = snapshot.val() || _this._serverTimeOffset;\n      });\n    }, 1);\n    return _this;\n  }\n\n  _createClass(Database, [{\n    key: \"getServerTime\",\n    value: function getServerTime() {\n      return new Date(Date.now() + this._serverTimeOffset);\n    }\n  }, {\n    key: \"goOnline\",\n    value: function goOnline() {\n      getNativeModule(this).goOnline();\n    }\n  }, {\n    key: \"goOffline\",\n    value: function goOffline() {\n      getNativeModule(this).goOffline();\n    }\n  }, {\n    key: \"ref\",\n    value: function ref(path) {\n      return new Reference(this, path);\n    }\n  }, {\n    key: \"databaseUrl\",\n    get: function get() {\n      return this._databaseURL;\n    }\n  }]);\n\n  return Database;\n}(ModuleBase);\n\nexport { Database as default };\nexport var statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n  enableLogging: function enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/database/index.js"],"names":["Reference","TransactionHandler","ModuleBase","getNativeModule","firebase","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Database","appOrCustomUrl","customUrl","app","url","options","databaseURL","endsWith","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","_serverTimeOffset","_databaseURL","_transactionHandler","persistence","setPersistence","setTimeout","_offsetRef","ref","on","snapshot","val","Date","now","goOnline","goOffline","path","statics","ServerValue","NativeModules","RNFirebaseDatabase","TIMESTAMP","serverValueTimestamp","enableLogging","enabled"],"mappings":";;;;;;;;;;;;AAKA,OAAOA,SAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,UAAP;AACA,SAASC,eAAT;AACA,OAAOC,QAAP;AACA,IAAMC,aAAa,GAAG,CAAC,4BAAD,CAAtB;AAEA,OAAO,IAAMC,WAAW,GAAG,oBAApB;AACP,OAAO,IAAMC,SAAS,GAAG,UAAlB;;IAKcC,Q;;;;;AACnB,oBAAYC,cAAZ,EAA4BC,SAA5B,EAAuC;AAAA;;AAAA;;AACrC,QAAIC,GAAJ;AACA,QAAIC,GAAJ;;AAEA,QAAI,OAAOH,cAAP,KAA0B,QAA9B,EAAwC;AACtCE,MAAAA,GAAG,GAAGP,QAAQ,CAACO,GAAT,EAAN;AACAC,MAAAA,GAAG,GAAGH,cAAN;AACD,KAHD,MAGO;AACLE,MAAAA,GAAG,GAAGF,cAAN;AACAG,MAAAA,GAAG,GAAGF,SAAS,IAAIC,GAAG,CAACE,OAAJ,CAAYC,WAA/B;AACD;;AAGDF,IAAAA,GAAG,GAAGA,GAAG,CAACG,QAAJ,CAAa,GAAb,IAAoBH,GAApB,GAA6BA,GAA7B,MAAN;AACA,8BAAMD,GAAN,EAAW;AACTK,MAAAA,MAAM,EAAEX,aADC;AAETY,MAAAA,UAAU,EAAEX,WAFH;AAGTY,MAAAA,kBAAkB,EAAE,IAHX;AAITC,MAAAA,mBAAmB,EAAE,IAJZ;AAKTC,MAAAA,SAAS,EAAEb;AALF,KAAX,EAMGK,GANH;AAOA,UAAKS,iBAAL,GAAyB,CAAzB;AACA,UAAKC,YAAL,GAAoBV,GAApB;AACA,UAAKW,mBAAL,GAA2B,IAAItB,kBAAJ,+BAA3B;;AAEA,QAAIU,GAAG,CAACE,OAAJ,CAAYW,WAAhB,EAA6B;AAC3BrB,MAAAA,eAAe,+BAAf,CAAsBsB,cAAtB,CAAqCd,GAAG,CAACE,OAAJ,CAAYW,WAAjD;AACD;;AAMDE,IAAAA,UAAU,CAAC,YAAM;AACf,YAAKC,UAAL,GAAkB,MAAKC,GAAL,CAAS,wBAAT,CAAlB;;AAEA,YAAKD,UAAL,CAAgBE,EAAhB,CAAmB,OAAnB,EAA4B,UAAAC,QAAQ,EAAI;AACtC,cAAKT,iBAAL,GAAyBS,QAAQ,CAACC,GAAT,MAAkB,MAAKV,iBAAhD;AACD,OAFD;AAGD,KANS,EAMP,CANO,CAAV;AAjCqC;AAwCtC;;;;oCAOe;AACd,aAAO,IAAIW,IAAJ,CAASA,IAAI,CAACC,GAAL,KAAa,KAAKZ,iBAA3B,CAAP;AACD;;;+BAMU;AACTlB,MAAAA,eAAe,CAAC,IAAD,CAAf,CAAsB+B,QAAtB;AACD;;;gCAMW;AACV/B,MAAAA,eAAe,CAAC,IAAD,CAAf,CAAsBgC,SAAtB;AACD;;;wBAQGC,I,EAAM;AACR,aAAO,IAAIpC,SAAJ,CAAc,IAAd,EAAoBoC,IAApB,CAAP;AACD;;;wBAOiB;AAChB,aAAO,KAAKd,YAAZ;AACD;;;;EArFmCpB,U;;SAAjBM,Q;AAwFrB,OAAO,IAAM6B,OAAO,GAAG;AACrBC,EAAAA,WAAW,EAAEC,aAAa,CAACC,kBAAd,GAAmC;AAC9CC,IAAAA,SAAS,EAAEF,aAAa,CAACC,kBAAd,CAAiCE,oBAAjC,IAAyD;AAClE,aAAO;AAD2D;AADtB,GAAnC,GAIT,EALiB;AAOrBC,EAAAA,aAPqB,yBAOPC,OAPO,EAOE;AACrB,QAAIL,aAAa,CAACjC,WAAD,CAAjB,EAAgC;AAC9BiC,MAAAA,aAAa,CAACjC,WAAD,CAAb,CAA2BqC,aAA3B,CAAyCC,OAAzC;AACD;AACF;AAXoB,CAAhB","sourcesContent":["/**\n * \n * Database representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport Reference from './Reference';\nimport TransactionHandler from './transaction';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport firebase from '../core/firebase';\nconst NATIVE_EVENTS = ['database_transaction_event' // 'database_server_offset', // TODO\n];\nexport const MODULE_NAME = 'RNFirebaseDatabase';\nexport const NAMESPACE = 'database';\n/**\n * @class Database\n */\n\nexport default class Database extends ModuleBase {\n  constructor(appOrCustomUrl, customUrl) {\n    let app;\n    let url;\n\n    if (typeof appOrCustomUrl === 'string') {\n      app = firebase.app();\n      url = appOrCustomUrl;\n    } else {\n      app = appOrCustomUrl;\n      url = customUrl || app.options.databaseURL;\n    } // enforce trailing slash\n\n\n    url = url.endsWith('/') ? url : `${url}/`;\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: true,\n      namespace: NAMESPACE\n    }, url);\n    this._serverTimeOffset = 0;\n    this._databaseURL = url;\n    this._transactionHandler = new TransactionHandler(this);\n\n    if (app.options.persistence) {\n      getNativeModule(this).setPersistence(app.options.persistence);\n    } // server time listener\n    // setTimeout used to avoid setPersistence race conditions\n    // todo move this and persistence to native side, create a db configure() method natively perhaps?\n    // todo and then native can call setPersistence and then emit offset events\n\n\n    setTimeout(() => {\n      this._offsetRef = this.ref('.info/serverTimeOffset');\n\n      this._offsetRef.on('value', snapshot => {\n        this._serverTimeOffset = snapshot.val() || this._serverTimeOffset;\n      });\n    }, 1);\n  }\n  /**\n   *\n   * @return {Date}\n   */\n\n\n  getServerTime() {\n    return new Date(Date.now() + this._serverTimeOffset);\n  }\n  /**\n   *\n   */\n\n\n  goOnline() {\n    getNativeModule(this).goOnline();\n  }\n  /**\n   *\n   */\n\n\n  goOffline() {\n    getNativeModule(this).goOffline();\n  }\n  /**\n   * Returns a new firebase reference instance\n   * @param path\n   * @returns {Reference}\n   */\n\n\n  ref(path) {\n    return new Reference(this, path);\n  }\n  /**\n   * Returns the database url\n   * @returns {string}\n   */\n\n\n  get databaseUrl() {\n    return this._databaseURL;\n  }\n\n}\nexport const statics = {\n  ServerValue: NativeModules.RNFirebaseDatabase ? {\n    TIMESTAMP: NativeModules.RNFirebaseDatabase.serverValueTimestamp || {\n      '.sv': 'timestamp'\n    }\n  } : {},\n\n  enableLogging(enabled) {\n    if (NativeModules[MODULE_NAME]) {\n      NativeModules[MODULE_NAME].enableLogging(enabled);\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"module"}