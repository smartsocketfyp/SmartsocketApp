{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { isIOS } from \"../../utils\";\nimport { getLogger } from \"../../utils/log\";\nimport { getNativeModule } from \"../../utils/native\";\n\nvar IOSNotification = function () {\n  function IOSNotification(notification, notifications, data) {\n    _classCallCheck(this, IOSNotification);\n\n    this._notification = notification;\n\n    if (data) {\n      this._alertAction = data.alertAction;\n      this._attachments = data.attachments || [];\n      this._badge = data.badge;\n      this._category = data.category;\n      this._hasAction = data.hasAction;\n      this._launchImage = data.launchImage;\n      this._threadIdentifier = data.threadIdentifier;\n    } else {\n      this._attachments = [];\n    }\n\n    if (!isIOS || !notifications || !notifications.ios) {\n      return this;\n    }\n\n    var complete = function complete(fetchResult) {\n      var notificationId = notification.notificationId;\n\n      if (notificationId && notifications) {\n        getLogger(notifications).debug(\"Completion handler called for notificationId=\" + notificationId);\n        getNativeModule(notifications).complete(notificationId, fetchResult);\n      }\n    };\n\n    if (notifications.ios.shouldAutoComplete) {\n      complete(notifications.ios.backgroundFetchResult.noData);\n    } else {\n      this._complete = complete;\n    }\n  }\n\n  _createClass(IOSNotification, [{\n    key: \"addAttachment\",\n    value: function addAttachment(identifier, url, options) {\n      this._attachments.push({\n        identifier: identifier,\n        options: options,\n        url: url\n      });\n\n      return this._notification;\n    }\n  }, {\n    key: \"setAlertAction\",\n    value: function setAlertAction(alertAction) {\n      this._alertAction = alertAction;\n      return this._notification;\n    }\n  }, {\n    key: \"setBadge\",\n    value: function setBadge(badge) {\n      this._badge = badge;\n      return this._notification;\n    }\n  }, {\n    key: \"setCategory\",\n    value: function setCategory(category) {\n      this._category = category;\n      return this._notification;\n    }\n  }, {\n    key: \"setHasAction\",\n    value: function setHasAction(hasAction) {\n      this._hasAction = hasAction;\n      return this._notification;\n    }\n  }, {\n    key: \"setLaunchImage\",\n    value: function setLaunchImage(launchImage) {\n      this._launchImage = launchImage;\n      return this._notification;\n    }\n  }, {\n    key: \"setThreadIdentifier\",\n    value: function setThreadIdentifier(threadIdentifier) {\n      this._threadIdentifier = threadIdentifier;\n      return this._notification;\n    }\n  }, {\n    key: \"build\",\n    value: function build() {\n      return {\n        alertAction: this._alertAction,\n        attachments: this._attachments,\n        badge: this._badge,\n        category: this._category,\n        hasAction: this._hasAction,\n        launchImage: this._launchImage,\n        threadIdentifier: this._threadIdentifier\n      };\n    }\n  }, {\n    key: \"alertAction\",\n    get: function get() {\n      return this._alertAction;\n    }\n  }, {\n    key: \"attachments\",\n    get: function get() {\n      return this._attachments;\n    }\n  }, {\n    key: \"badge\",\n    get: function get() {\n      return this._badge;\n    }\n  }, {\n    key: \"category\",\n    get: function get() {\n      return this._category;\n    }\n  }, {\n    key: \"hasAction\",\n    get: function get() {\n      return this._hasAction;\n    }\n  }, {\n    key: \"launchImage\",\n    get: function get() {\n      return this._launchImage;\n    }\n  }, {\n    key: \"threadIdentifier\",\n    get: function get() {\n      return this._threadIdentifier;\n    }\n  }, {\n    key: \"complete\",\n    get: function get() {\n      return this._complete;\n    }\n  }]);\n\n  return IOSNotification;\n}();\n\nexport { IOSNotification as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/notifications/IOSNotification.js"],"names":["isIOS","getLogger","getNativeModule","IOSNotification","notification","notifications","data","_notification","_alertAction","alertAction","_attachments","attachments","_badge","badge","_category","category","_hasAction","hasAction","_launchImage","launchImage","_threadIdentifier","threadIdentifier","ios","complete","fetchResult","notificationId","debug","shouldAutoComplete","backgroundFetchResult","noData","_complete","identifier","url","options","push"],"mappings":"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","sourcesContent":["/**\n * \n * IOSNotification representation wrapper\n */\nimport { isIOS } from '../../utils';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nexport default class IOSNotification {\n  constructor(notification, notifications, data) {\n    this._notification = notification;\n\n    if (data) {\n      this._alertAction = data.alertAction;\n      this._attachments = data.attachments || [];\n      this._badge = data.badge;\n      this._category = data.category;\n      this._hasAction = data.hasAction;\n      this._launchImage = data.launchImage;\n      this._threadIdentifier = data.threadIdentifier;\n    } else {\n      this._attachments = [];\n    }\n\n    if (!isIOS || !notifications || !notifications.ios) {\n      return this;\n    } // IOS + Native Notification Only\n\n\n    const complete = fetchResult => {\n      const {\n        notificationId\n      } = notification; // && notifications check for Flow\n\n      if (notificationId && notifications) {\n        getLogger(notifications).debug(`Completion handler called for notificationId=${notificationId}`);\n        getNativeModule(notifications).complete(notificationId, fetchResult);\n      }\n    };\n\n    if (notifications.ios.shouldAutoComplete) {\n      complete(notifications.ios.backgroundFetchResult.noData);\n    } else {\n      this._complete = complete;\n    }\n  }\n\n  get alertAction() {\n    return this._alertAction;\n  }\n\n  get attachments() {\n    return this._attachments;\n  }\n\n  get badge() {\n    return this._badge;\n  }\n\n  get category() {\n    return this._category;\n  }\n\n  get hasAction() {\n    return this._hasAction;\n  }\n\n  get launchImage() {\n    return this._launchImage;\n  }\n\n  get threadIdentifier() {\n    return this._threadIdentifier;\n  }\n\n  get complete() {\n    return this._complete;\n  }\n  /**\n   *\n   * @param identifier\n   * @param url\n   * @param options\n   * @returns {Notification}\n   */\n\n\n  addAttachment(identifier, url, options) {\n    this._attachments.push({\n      identifier,\n      options,\n      url\n    });\n\n    return this._notification;\n  }\n  /**\n   *\n   * @param alertAction\n   * @returns {Notification}\n   */\n\n\n  setAlertAction(alertAction) {\n    this._alertAction = alertAction;\n    return this._notification;\n  }\n  /**\n   *\n   * @param badge\n   * @returns {Notification}\n   */\n\n\n  setBadge(badge) {\n    this._badge = badge;\n    return this._notification;\n  }\n  /**\n   *\n   * @param category\n   * @returns {Notification}\n   */\n\n\n  setCategory(category) {\n    this._category = category;\n    return this._notification;\n  }\n  /**\n   *\n   * @param hasAction\n   * @returns {Notification}\n   */\n\n\n  setHasAction(hasAction) {\n    this._hasAction = hasAction;\n    return this._notification;\n  }\n  /**\n   *\n   * @param launchImage\n   * @returns {Notification}\n   */\n\n\n  setLaunchImage(launchImage) {\n    this._launchImage = launchImage;\n    return this._notification;\n  }\n  /**\n   *\n   * @param threadIdentifier\n   * @returns {Notification}\n   */\n\n\n  setThreadIdentifier(threadIdentifier) {\n    this._threadIdentifier = threadIdentifier;\n    return this._notification;\n  }\n\n  build() {\n    // TODO: Validation of required fields\n    return {\n      alertAction: this._alertAction,\n      attachments: this._attachments,\n      badge: this._badge,\n      category: this._category,\n      hasAction: this._hasAction,\n      launchImage: this._launchImage,\n      threadIdentifier: this._threadIdentifier\n    };\n  }\n\n}"]},"metadata":{},"sourceType":"module"}