{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport SnapshotError from \"./SnapshotError\";\nimport DocumentSnapshot from \"./DocumentSnapshot\";\nimport CollectionReference from \"./CollectionReference\";\nimport { parseUpdateArgs } from \"./utils\";\nimport { buildNativeMap } from \"./utils/serialize\";\nimport { getNativeModule } from \"../../utils/native\";\nimport { firestoreAutoId, isFunction, isObject } from \"../../utils\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\n\nvar DocumentReference = function () {\n  function DocumentReference(firestore, documentPath) {\n    _classCallCheck(this, DocumentReference);\n\n    this._documentPath = documentPath;\n    this._firestore = firestore;\n  }\n\n  _createClass(DocumentReference, [{\n    key: \"isEqual\",\n    value: function isEqual(otherDocumentReference) {\n      if (!(otherDocumentReference instanceof DocumentReference)) {\n        throw new Error('firebase.firestore.DocumentReference.isEqual(*) expects an instance of DocumentReference.');\n      }\n\n      if (this.path !== otherDocumentReference.path) return false;\n\n      if (this._firestore.app.name !== otherDocumentReference._firestore.app.name) {\n        return false;\n      }\n\n      if (this._firestore.app.options.projectId !== otherDocumentReference._firestore.app.options.projectId) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"collection\",\n    value: function collection(collectionPath) {\n      var path = this._documentPath.child(collectionPath);\n\n      if (!path.isCollection) {\n        throw new Error('Argument \"collectionPath\" must point to a collection.');\n      }\n\n      return new CollectionReference(this._firestore, path);\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      return getNativeModule(this._firestore).documentDelete(this.path);\n    }\n  }, {\n    key: \"get\",\n    value: function get(options) {\n      var _this = this;\n\n      if (options) {\n        if (!isObject(options)) {\n          return Promise.reject(new Error('DocumentReference.get failed: First argument must be an object.'));\n        }\n\n        if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n          return Promise.reject(new Error('DocumentReference.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n        }\n      }\n\n      return getNativeModule(this._firestore).documentGet(this.path, options).then(function (result) {\n        return new DocumentSnapshot(_this._firestore, result);\n      });\n    }\n  }, {\n    key: \"onSnapshot\",\n    value: function onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n      var _this2 = this;\n\n      var observer;\n      var docListenOptions = {};\n\n      if (isFunction(optionsOrObserverOrOnNext)) {\n        if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n          throw new Error('DocumentReference.onSnapshot failed: Second argument must be a valid function.');\n        }\n\n        observer = {\n          next: optionsOrObserverOrOnNext,\n          error: observerOrOnNextOrOnError\n        };\n      } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n        if (optionsOrObserverOrOnNext.next) {\n          if (isFunction(optionsOrObserverOrOnNext.next)) {\n            if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n              throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n            }\n\n            observer = {\n              next: optionsOrObserverOrOnNext.next,\n              error: optionsOrObserverOrOnNext.error\n            };\n          } else {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n          docListenOptions = optionsOrObserverOrOnNext;\n\n          if (isFunction(observerOrOnNextOrOnError)) {\n            if (onError && !isFunction(onError)) {\n              throw new Error('DocumentReference.onSnapshot failed: Third argument must be a valid function.');\n            }\n\n            observer = {\n              next: observerOrOnNextOrOnError,\n              error: onError\n            };\n          } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n            if (isFunction(observerOrOnNextOrOnError.next)) {\n              if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n                throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n              }\n\n              observer = {\n                next: observerOrOnNextOrOnError.next,\n                error: observerOrOnNextOrOnError.error\n              };\n            } else {\n              throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n            }\n          } else {\n            throw new Error('DocumentReference.onSnapshot failed: Second argument must be a function or observer.');\n          }\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: First argument must be a function, observer or options.');\n        }\n      } else {\n        throw new Error('DocumentReference.onSnapshot failed: Called with invalid arguments.');\n      }\n\n      var listenerId = firestoreAutoId();\n\n      var listener = function listener(nativeDocumentSnapshot) {\n        var documentSnapshot = new DocumentSnapshot(_this2.firestore, nativeDocumentSnapshot);\n        observer.next(documentSnapshot);\n      };\n\n      var snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, \"onDocumentSnapshot:\" + listenerId), listener);\n      var unsubscribe;\n      var errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, \"onDocumentSnapshotError:\" + listenerId), function (e) {\n        if (unsubscribe) unsubscribe();\n        var error = new SnapshotError(e);\n        if (observer.error) observer.error(error);else _this2.firestore.log.error(error);\n      });\n      getNativeModule(this._firestore).documentOnSnapshot(this.path, listenerId, docListenOptions);\n\n      unsubscribe = function unsubscribe() {\n        snapshotSubscription.remove();\n        errorSubscription.remove();\n        getNativeModule(_this2._firestore).documentOffSnapshot(_this2.path, listenerId);\n      };\n\n      return unsubscribe;\n    }\n  }, {\n    key: \"set\",\n    value: function set(data, options) {\n      var nativeData = buildNativeMap(data);\n      return getNativeModule(this._firestore).documentSet(this.path, nativeData, options);\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var data = parseUpdateArgs(args, 'DocumentReference.update');\n      var nativeData = buildNativeMap(data);\n      return getNativeModule(this._firestore).documentUpdate(this.path, nativeData);\n    }\n  }, {\n    key: \"firestore\",\n    get: function get() {\n      return this._firestore;\n    }\n  }, {\n    key: \"id\",\n    get: function get() {\n      return this._documentPath.id;\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var parentPath = this._documentPath.parent();\n\n      return new CollectionReference(this._firestore, parentPath);\n    }\n  }, {\n    key: \"path\",\n    get: function get() {\n      return this._documentPath.relativeName;\n    }\n  }]);\n\n  return DocumentReference;\n}();\n\nexport { DocumentReference as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/firestore/DocumentReference.js"],"names":["SnapshotError","DocumentSnapshot","CollectionReference","parseUpdateArgs","buildNativeMap","getNativeModule","firestoreAutoId","isFunction","isObject","getAppEventName","SharedEventEmitter","DocumentReference","firestore","documentPath","_documentPath","_firestore","otherDocumentReference","Error","path","app","name","options","projectId","collectionPath","child","isCollection","documentDelete","Promise","reject","source","documentGet","then","result","optionsOrObserverOrOnNext","observerOrOnNextOrOnError","onError","observer","docListenOptions","next","error","Object","prototype","hasOwnProperty","call","listenerId","listener","nativeDocumentSnapshot","documentSnapshot","snapshotSubscription","addListener","unsubscribe","errorSubscription","e","log","documentOnSnapshot","remove","documentOffSnapshot","data","nativeData","documentSet","args","documentUpdate","id","parentPath","parent","relativeName"],"mappings":"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","sourcesContent":["/**\n * \n * DocumentReference representation wrapper\n */\nimport SnapshotError from './SnapshotError';\nimport DocumentSnapshot from './DocumentSnapshot';\nimport CollectionReference from './CollectionReference';\nimport { parseUpdateArgs } from './utils';\nimport { buildNativeMap } from './utils/serialize';\nimport { getNativeModule } from '../../utils/native';\nimport { firestoreAutoId, isFunction, isObject } from '../../utils';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\n\n/**\n * @class DocumentReference\n */\nexport default class DocumentReference {\n  constructor(firestore, documentPath) {\n    this._documentPath = documentPath;\n    this._firestore = firestore;\n  }\n\n  get firestore() {\n    return this._firestore;\n  }\n\n  get id() {\n    return this._documentPath.id;\n  }\n\n  get parent() {\n    const parentPath = this._documentPath.parent(); // $FlowExpectedError: parentPath can never be null\n\n\n    return new CollectionReference(this._firestore, parentPath);\n  }\n\n  get path() {\n    return this._documentPath.relativeName;\n  }\n\n  isEqual(otherDocumentReference) {\n    if (!(otherDocumentReference instanceof DocumentReference)) {\n      throw new Error('firebase.firestore.DocumentReference.isEqual(*) expects an instance of DocumentReference.');\n    } // check paths match\n\n\n    if (this.path !== otherDocumentReference.path) return false; // check same firestore app name\n\n    if (this._firestore.app.name !== otherDocumentReference._firestore.app.name) {\n      return false;\n    } // check same firestore app projectId\n    // noinspection RedundantIfStatementJS\n\n\n    if (this._firestore.app.options.projectId !== otherDocumentReference._firestore.app.options.projectId) {\n      return false;\n    }\n\n    return true;\n  }\n\n  collection(collectionPath) {\n    const path = this._documentPath.child(collectionPath);\n\n    if (!path.isCollection) {\n      throw new Error('Argument \"collectionPath\" must point to a collection.');\n    }\n\n    return new CollectionReference(this._firestore, path);\n  }\n\n  delete() {\n    return getNativeModule(this._firestore).documentDelete(this.path);\n  }\n\n  get(options) {\n    if (options) {\n      if (!isObject(options)) {\n        return Promise.reject(new Error('DocumentReference.get failed: First argument must be an object.'));\n      }\n\n      if (options.source && options.source !== 'default' && options.source !== 'server' && options.source !== 'cache') {\n        return Promise.reject(new Error('DocumentReference.get failed: GetOptions.source must be one of `default`, `server` or `cache`.'));\n      }\n    }\n\n    return getNativeModule(this._firestore).documentGet(this.path, options).then(result => new DocumentSnapshot(this._firestore, result));\n  }\n\n  onSnapshot(optionsOrObserverOrOnNext, observerOrOnNextOrOnError, onError) {\n    let observer;\n    let docListenOptions = {}; // Called with: onNext, ?onError\n\n    if (isFunction(optionsOrObserverOrOnNext)) {\n      if (observerOrOnNextOrOnError && !isFunction(observerOrOnNextOrOnError)) {\n        throw new Error('DocumentReference.onSnapshot failed: Second argument must be a valid function.');\n      } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n      observer = {\n        next: optionsOrObserverOrOnNext,\n        error: observerOrOnNextOrOnError\n      };\n    } else if (optionsOrObserverOrOnNext && isObject(optionsOrObserverOrOnNext)) {\n      // Called with: Observer\n      if (optionsOrObserverOrOnNext.next) {\n        if (isFunction(optionsOrObserverOrOnNext.next)) {\n          if (optionsOrObserverOrOnNext.error && !isFunction(optionsOrObserverOrOnNext.error)) {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: optionsOrObserverOrOnNext.next,\n            error: optionsOrObserverOrOnNext.error\n          };\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n        }\n      } else if (Object.prototype.hasOwnProperty.call(optionsOrObserverOrOnNext, 'includeMetadataChanges')) {\n        docListenOptions = optionsOrObserverOrOnNext; // Called with: Options, onNext, ?onError\n\n        if (isFunction(observerOrOnNextOrOnError)) {\n          if (onError && !isFunction(onError)) {\n            throw new Error('DocumentReference.onSnapshot failed: Third argument must be a valid function.');\n          } // $FlowExpectedError: Not coping with the overloaded method signature\n\n\n          observer = {\n            next: observerOrOnNextOrOnError,\n            error: onError\n          }; // Called with Options, Observer\n        } else if (observerOrOnNextOrOnError && isObject(observerOrOnNextOrOnError) && observerOrOnNextOrOnError.next) {\n          if (isFunction(observerOrOnNextOrOnError.next)) {\n            if (observerOrOnNextOrOnError.error && !isFunction(observerOrOnNextOrOnError.error)) {\n              throw new Error('DocumentReference.onSnapshot failed: Observer.error must be a valid function.');\n            }\n\n            observer = {\n              next: observerOrOnNextOrOnError.next,\n              error: observerOrOnNextOrOnError.error\n            };\n          } else {\n            throw new Error('DocumentReference.onSnapshot failed: Observer.next must be a valid function.');\n          }\n        } else {\n          throw new Error('DocumentReference.onSnapshot failed: Second argument must be a function or observer.');\n        }\n      } else {\n        throw new Error('DocumentReference.onSnapshot failed: First argument must be a function, observer or options.');\n      }\n    } else {\n      throw new Error('DocumentReference.onSnapshot failed: Called with invalid arguments.');\n    }\n\n    const listenerId = firestoreAutoId();\n\n    const listener = nativeDocumentSnapshot => {\n      const documentSnapshot = new DocumentSnapshot(this.firestore, nativeDocumentSnapshot);\n      observer.next(documentSnapshot);\n    }; // Listen to snapshot events\n\n\n    const snapshotSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshot:${listenerId}`), listener);\n    let unsubscribe; // listen for snapshot error events\n\n    const errorSubscription = SharedEventEmitter.addListener(getAppEventName(this._firestore, `onDocumentSnapshotError:${listenerId}`), e => {\n      if (unsubscribe) unsubscribe();\n      const error = new SnapshotError(e);\n      if (observer.error) observer.error(error);else this.firestore.log.error(error);\n    }); // Add the native listener\n\n    getNativeModule(this._firestore).documentOnSnapshot(this.path, listenerId, docListenOptions); // return an unsubscribe method\n\n    unsubscribe = () => {\n      snapshotSubscription.remove();\n      errorSubscription.remove(); // cancel native listener\n\n      getNativeModule(this._firestore).documentOffSnapshot(this.path, listenerId);\n    };\n\n    return unsubscribe;\n  }\n\n  set(data, options) {\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentSet(this.path, nativeData, options);\n  }\n\n  update(...args) {\n    const data = parseUpdateArgs(args, 'DocumentReference.update');\n    const nativeData = buildNativeMap(data);\n    return getNativeModule(this._firestore).documentUpdate(this.path, nativeData);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}