{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport INTERNALS from \"../../../utils/internals\";\nimport { SharedEventEmitter } from \"../../../utils/events\";\nimport { generatePushID, isFunction, isAndroid, isIOS, isString, nativeToJSError } from \"../../../utils\";\nimport { getNativeModule } from \"../../../utils/native\";\n\nvar PhoneAuthListener = function () {\n  function PhoneAuthListener(auth, phoneNumber, timeout, forceResend) {\n    _classCallCheck(this, PhoneAuthListener);\n\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._credential = null;\n    this._timeout = timeout || 20;\n    this._forceResending = forceResend || false;\n    this._phoneAuthRequestKey = generatePushID();\n    this._internalEvents = {\n      codeSent: \"phone:auth:\" + this._phoneAuthRequestKey + \":onCodeSent\",\n      verificationFailed: \"phone:auth:\" + this._phoneAuthRequestKey + \":onVerificationFailed\",\n      verificationComplete: \"phone:auth:\" + this._phoneAuthRequestKey + \":onVerificationComplete\",\n      codeAutoRetrievalTimeout: \"phone:auth:\" + this._phoneAuthRequestKey + \":onCodeAutoRetrievalTimeout\"\n    };\n    this._publicEvents = {\n      error: \"phone:auth:\" + this._phoneAuthRequestKey + \":error\",\n      event: \"phone:auth:\" + this._phoneAuthRequestKey + \":event\",\n      success: \"phone:auth:\" + this._phoneAuthRequestKey + \":success\"\n    };\n\n    this._subscribeToEvents();\n\n    if (isAndroid) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey, this._timeout, this._forceResending);\n    }\n\n    if (isIOS) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey);\n    }\n  }\n\n  _createClass(PhoneAuthListener, [{\n    key: \"_subscribeToEvents\",\n    value: function _subscribeToEvents() {\n      var events = Object.keys(this._internalEvents);\n\n      for (var i = 0, len = events.length; i < len; i++) {\n        var type = events[i];\n        SharedEventEmitter.once(this._internalEvents[type], this[\"_\" + type + \"Handler\"].bind(this));\n      }\n    }\n  }, {\n    key: \"_addUserObserver\",\n    value: function _addUserObserver(observer) {\n      SharedEventEmitter.addListener(this._publicEvents.event, observer);\n    }\n  }, {\n    key: \"_emitToObservers\",\n    value: function _emitToObservers(snapshot) {\n      SharedEventEmitter.emit(this._publicEvents.event, snapshot);\n    }\n  }, {\n    key: \"_emitToErrorCb\",\n    value: function _emitToErrorCb(snapshot) {\n      var error = snapshot.error;\n      if (this._reject) this._reject(error);\n      SharedEventEmitter.emit(this._publicEvents.error, error);\n    }\n  }, {\n    key: \"_emitToSuccessCb\",\n    value: function _emitToSuccessCb(snapshot) {\n      if (this._resolve) this._resolve(snapshot);\n      SharedEventEmitter.emit(this._publicEvents.success, snapshot);\n    }\n  }, {\n    key: \"_removeAllListeners\",\n    value: function _removeAllListeners() {\n      var _this = this;\n\n      setTimeout(function () {\n        Object.values(_this._internalEvents).forEach(function (event) {\n          SharedEventEmitter.removeAllListeners(event);\n        });\n        Object.values(_this._publicEvents).forEach(function (publicEvent) {\n          SharedEventEmitter.removeAllListeners(publicEvent);\n        });\n      }, 0);\n    }\n  }, {\n    key: \"_promiseDeferred\",\n    value: function _promiseDeferred() {\n      var _this2 = this;\n\n      if (!this._promise) {\n        this._promise = new Promise(function (resolve, reject) {\n          _this2._resolve = function (result) {\n            _this2._resolve = null;\n            return resolve(result);\n          };\n\n          _this2._reject = function (possibleError) {\n            _this2._reject = null;\n            return reject(possibleError);\n          };\n        });\n      }\n    }\n  }, {\n    key: \"_codeSentHandler\",\n    value: function _codeSentHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: null,\n        error: null,\n        state: 'sent'\n      };\n\n      this._emitToObservers(snapshot);\n\n      if (isIOS) {\n        this._emitToSuccessCb(snapshot);\n      }\n\n      if (isAndroid) {}\n    }\n  }, {\n    key: \"_codeAutoRetrievalTimeoutHandler\",\n    value: function _codeAutoRetrievalTimeoutHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: null,\n        error: null,\n        state: 'timeout'\n      };\n\n      this._emitToObservers(snapshot);\n\n      this._emitToSuccessCb(snapshot);\n    }\n  }, {\n    key: \"_verificationCompleteHandler\",\n    value: function _verificationCompleteHandler(credential) {\n      var snapshot = {\n        verificationId: credential.verificationId,\n        code: credential.code || null,\n        error: null,\n        state: 'verified'\n      };\n\n      this._emitToObservers(snapshot);\n\n      this._emitToSuccessCb(snapshot);\n\n      this._removeAllListeners();\n    }\n  }, {\n    key: \"_verificationFailedHandler\",\n    value: function _verificationFailedHandler(state) {\n      var snapshot = {\n        verificationId: state.verificationId,\n        code: null,\n        error: null,\n        state: 'error'\n      };\n      var _state$error = state.error,\n          code = _state$error.code,\n          message = _state$error.message,\n          nativeErrorMessage = _state$error.nativeErrorMessage;\n      snapshot.error = nativeToJSError(code, message, {\n        nativeErrorMessage: nativeErrorMessage\n      });\n\n      this._emitToObservers(snapshot);\n\n      this._emitToErrorCb(snapshot);\n\n      this._removeAllListeners();\n    }\n  }, {\n    key: \"on\",\n    value: function on(event, observer, errorCb, successCb) {\n      if (!isString(event)) {\n        throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('event', 'string', 'on'));\n      }\n\n      if (event !== 'state_changed') {\n        throw new Error(INTERNALS.STRINGS.ERROR_ARG_INVALID_VALUE('event', 'state_changed', event));\n      }\n\n      if (!isFunction(observer)) {\n        throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('observer', 'function', 'on'));\n      }\n\n      this._addUserObserver(observer);\n\n      if (isFunction(errorCb)) {\n        SharedEventEmitter.once(this._publicEvents.error, errorCb);\n      }\n\n      if (isFunction(successCb)) {\n        SharedEventEmitter.once(this._publicEvents.success, successCb);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(fn) {\n      this._promiseDeferred();\n\n      if (this._promise) return this._promise.then.bind(this._promise)(fn);\n      return undefined;\n    }\n  }, {\n    key: \"catch\",\n    value: function _catch(fn) {\n      this._promiseDeferred();\n\n      if (this._promise) return this._promise.catch.bind(this._promise)(fn);\n      return undefined;\n    }\n  }]);\n\n  return PhoneAuthListener;\n}();\n\nexport { PhoneAuthListener as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/auth/phone/PhoneAuthListener.js"],"names":["INTERNALS","SharedEventEmitter","generatePushID","isFunction","isAndroid","isIOS","isString","nativeToJSError","getNativeModule","PhoneAuthListener","auth","phoneNumber","timeout","forceResend","_auth","_reject","_resolve","_promise","_credential","_timeout","_forceResending","_phoneAuthRequestKey","_internalEvents","codeSent","verificationFailed","verificationComplete","codeAutoRetrievalTimeout","_publicEvents","error","event","success","_subscribeToEvents","verifyPhoneNumber","events","Object","keys","i","len","length","type","once","bind","observer","addListener","snapshot","emit","setTimeout","values","forEach","removeAllListeners","publicEvent","Promise","resolve","reject","result","possibleError","credential","verificationId","code","state","_emitToObservers","_emitToSuccessCb","_removeAllListeners","message","nativeErrorMessage","_emitToErrorCb","errorCb","successCb","Error","STRINGS","ERROR_MISSING_ARG_NAMED","ERROR_ARG_INVALID_VALUE","_addUserObserver","fn","_promiseDeferred","then","undefined","catch"],"mappings":"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","sourcesContent":["import INTERNALS from '../../../utils/internals';\nimport { SharedEventEmitter } from '../../../utils/events';\nimport { generatePushID, isFunction, isAndroid, isIOS, isString, nativeToJSError } from '../../../utils';\nimport { getNativeModule } from '../../../utils/native';\nexport default class PhoneAuthListener {\n  /**\n   *\n   * @param auth\n   * @param phoneNumber\n   * @param timeout\n   * @param forceResend\n   */\n  constructor(auth, phoneNumber, timeout, forceResend) {\n    this._auth = auth;\n    this._reject = null;\n    this._resolve = null;\n    this._promise = null;\n    this._credential = null;\n    this._timeout = timeout || 20; // 20 secs\n\n    this._forceResending = forceResend || false;\n    this._phoneAuthRequestKey = generatePushID(); // internal events\n\n    this._internalEvents = {\n      codeSent: `phone:auth:${this._phoneAuthRequestKey}:onCodeSent`,\n      verificationFailed: `phone:auth:${this._phoneAuthRequestKey}:onVerificationFailed`,\n      verificationComplete: `phone:auth:${this._phoneAuthRequestKey}:onVerificationComplete`,\n      codeAutoRetrievalTimeout: `phone:auth:${this._phoneAuthRequestKey}:onCodeAutoRetrievalTimeout`\n    }; // user observer events\n\n    this._publicEvents = {\n      // error cb\n      error: `phone:auth:${this._phoneAuthRequestKey}:error`,\n      // observer\n      event: `phone:auth:${this._phoneAuthRequestKey}:event`,\n      // success cb\n      success: `phone:auth:${this._phoneAuthRequestKey}:success`\n    }; // setup internal event listeners\n\n    this._subscribeToEvents(); // start verification flow natively\n\n\n    if (isAndroid) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey, this._timeout, this._forceResending);\n    }\n\n    if (isIOS) {\n      getNativeModule(this._auth).verifyPhoneNumber(phoneNumber, this._phoneAuthRequestKey);\n    }\n  }\n  /**\n   * Subscribes to all EE events on this._internalEvents\n   * @private\n   */\n\n\n  _subscribeToEvents() {\n    const events = Object.keys(this._internalEvents);\n\n    for (let i = 0, len = events.length; i < len; i++) {\n      const type = events[i];\n      SharedEventEmitter.once(this._internalEvents[type], // $FlowExpectedError: Flow doesn't support indexable signatures on classes: https://github.com/facebook/flow/issues/1323\n      this[`_${type}Handler`].bind(this));\n    }\n  }\n  /**\n   * Subscribe a users listener cb to the snapshot events.\n   * @param observer\n   * @private\n   */\n\n\n  _addUserObserver(observer) {\n    SharedEventEmitter.addListener(this._publicEvents.event, observer);\n  }\n  /**\n   * Send a snapshot event to users event observer.\n   * @param snapshot PhoneAuthSnapshot\n   * @private\n   */\n\n\n  _emitToObservers(snapshot) {\n    SharedEventEmitter.emit(this._publicEvents.event, snapshot);\n  }\n  /**\n   * Send a error snapshot event to any subscribed errorCb's\n   * @param snapshot\n   * @private\n   */\n\n\n  _emitToErrorCb(snapshot) {\n    const {\n      error\n    } = snapshot;\n    if (this._reject) this._reject(error);\n    SharedEventEmitter.emit(this._publicEvents.error, error);\n  }\n  /**\n   * Send a success snapshot event to any subscribed completeCb's\n   * @param snapshot\n   * @private\n   */\n\n\n  _emitToSuccessCb(snapshot) {\n    if (this._resolve) this._resolve(snapshot);\n    SharedEventEmitter.emit(this._publicEvents.success, snapshot);\n  }\n  /**\n   * Removes all listeners for this phone auth instance\n   * @private\n   */\n\n\n  _removeAllListeners() {\n    setTimeout(() => {\n      // move to next event loop - not sure if needed\n      // internal listeners\n      Object.values(this._internalEvents).forEach(event => {\n        SharedEventEmitter.removeAllListeners(event);\n      }); // user observer listeners\n\n      Object.values(this._publicEvents).forEach(publicEvent => {\n        SharedEventEmitter.removeAllListeners(publicEvent);\n      });\n    }, 0);\n  }\n  /**\n   * Create a new internal deferred promise, if not already created\n   * @private\n   */\n\n\n  _promiseDeferred() {\n    if (!this._promise) {\n      this._promise = new Promise((resolve, reject) => {\n        this._resolve = result => {\n          this._resolve = null;\n          return resolve(result);\n        };\n\n        this._reject = possibleError => {\n          this._reject = null;\n          return reject(possibleError);\n        };\n      });\n    }\n  }\n  /* --------------------------\n   --- INTERNAL EVENT HANDLERS\n   ---------------------------- */\n\n  /**\n   * Internal code sent event handler\n   * @private\n   * @param credential\n   */\n\n\n  _codeSentHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'sent'\n    };\n\n    this._emitToObservers(snapshot);\n\n    if (isIOS) {\n      this._emitToSuccessCb(snapshot);\n    }\n\n    if (isAndroid) {// android can auto retrieve so we don't emit to successCb immediately,\n      // if auto retrieve times out then that will emit to successCb\n    }\n  }\n  /**\n   * Internal code auto retrieve timeout event handler\n   * @private\n   * @param credential\n   */\n\n\n  _codeAutoRetrievalTimeoutHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: null,\n      error: null,\n      state: 'timeout'\n    };\n\n    this._emitToObservers(snapshot);\n\n    this._emitToSuccessCb(snapshot);\n  }\n  /**\n   * Internal verification complete event handler\n   * @param credential\n   * @private\n   */\n\n\n  _verificationCompleteHandler(credential) {\n    const snapshot = {\n      verificationId: credential.verificationId,\n      code: credential.code || null,\n      error: null,\n      state: 'verified'\n    };\n\n    this._emitToObservers(snapshot);\n\n    this._emitToSuccessCb(snapshot);\n\n    this._removeAllListeners();\n  }\n  /**\n   * Internal verification failed event handler\n   * @param state\n   * @private\n   */\n\n\n  _verificationFailedHandler(state) {\n    const snapshot = {\n      verificationId: state.verificationId,\n      code: null,\n      error: null,\n      state: 'error'\n    };\n    const {\n      code,\n      message,\n      nativeErrorMessage\n    } = state.error;\n    snapshot.error = nativeToJSError(code, message, {\n      nativeErrorMessage\n    });\n\n    this._emitToObservers(snapshot);\n\n    this._emitToErrorCb(snapshot);\n\n    this._removeAllListeners();\n  }\n  /* -------------\n   -- PUBLIC API\n   --------------*/\n\n\n  on(event, observer, errorCb, successCb) {\n    if (!isString(event)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('event', 'string', 'on'));\n    }\n\n    if (event !== 'state_changed') {\n      throw new Error(INTERNALS.STRINGS.ERROR_ARG_INVALID_VALUE('event', 'state_changed', event));\n    }\n\n    if (!isFunction(observer)) {\n      throw new Error(INTERNALS.STRINGS.ERROR_MISSING_ARG_NAMED('observer', 'function', 'on'));\n    }\n\n    this._addUserObserver(observer);\n\n    if (isFunction(errorCb)) {\n      SharedEventEmitter.once(this._publicEvents.error, errorCb);\n    }\n\n    if (isFunction(successCb)) {\n      SharedEventEmitter.once(this._publicEvents.success, successCb);\n    }\n\n    return this;\n  }\n  /**\n   * Promise .then proxy\n   * @param fn\n   */\n\n\n  then(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n\n    if (this._promise) return this._promise.then.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n  /**\n   * Promise .catch proxy\n   * @param fn\n   */\n\n\n  catch(fn) {\n    this._promiseDeferred(); // $FlowFixMe: Unsure how to annotate `bind` here\n\n\n    if (this._promise) return this._promise.catch.bind(this._promise)(fn);\n    return undefined; // will never get here - just to keep flow happy\n  }\n\n}"]},"metadata":{},"sourceType":"module"}