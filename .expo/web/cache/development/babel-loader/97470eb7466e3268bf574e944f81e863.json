{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport AndroidChannel from \"./AndroidChannel\";\nimport AndroidChannelGroup from \"./AndroidChannelGroup\";\nimport { getNativeModule } from \"../../utils/native\";\n\nvar AndroidNotifications = function () {\n  function AndroidNotifications(notifications) {\n    _classCallCheck(this, AndroidNotifications);\n\n    this._notifications = notifications;\n  }\n\n  _createClass(AndroidNotifications, [{\n    key: \"createChannel\",\n    value: function createChannel(channel) {\n      if (Platform.OS === 'android') {\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(\"AndroidNotifications:createChannel expects an 'AndroidChannel' but got type \" + typeof channel);\n        }\n\n        return getNativeModule(this._notifications).createChannel(channel.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroup\",\n    value: function createChannelGroup(channelGroup) {\n      if (Platform.OS === 'android') {\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(\"AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n        }\n\n        return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannelGroups\",\n    value: function createChannelGroups(channelGroups) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channelGroups)) {\n          throw new Error(\"AndroidNotifications:createChannelGroups expects an 'Array' but got type \" + typeof channelGroups);\n        }\n\n        var nativeChannelGroups = [];\n\n        for (var i = 0; i < channelGroups.length; i++) {\n          var channelGroup = channelGroups[i];\n\n          if (!(channelGroup instanceof AndroidChannelGroup)) {\n            throw new Error(\"AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type \" + typeof channelGroup);\n          }\n\n          nativeChannelGroups.push(channelGroup.build());\n        }\n\n        return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"createChannels\",\n    value: function createChannels(channels) {\n      if (Platform.OS === 'android') {\n        if (!Array.isArray(channels)) {\n          throw new Error(\"AndroidNotifications:createChannels expects an 'Array' but got type \" + typeof channels);\n        }\n\n        var nativeChannels = [];\n\n        for (var i = 0; i < channels.length; i++) {\n          var channel = channels[i];\n\n          if (!(channel instanceof AndroidChannel)) {\n            throw new Error(\"AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type \" + typeof channel);\n          }\n\n          nativeChannels.push(channel.build());\n        }\n\n        return getNativeModule(this._notifications).createChannels(nativeChannels);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"removeDeliveredNotificationsByTag\",\n    value: function removeDeliveredNotificationsByTag(tag) {\n      if (Platform.OS === 'android') {\n        if (typeof tag !== 'string') {\n          throw new Error(\"AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type \" + typeof tag);\n        }\n\n        return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannelGroup\",\n    value: function deleteChannelGroup(groupId) {\n      if (Platform.OS === 'android') {\n        if (typeof groupId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannelGroup expects an 'string' but got type \" + typeof groupId);\n        }\n\n        return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"deleteChannel\",\n    value: function deleteChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:deleteChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return getNativeModule(this._notifications).deleteChannel(channelId);\n      }\n\n      return Promise.resolve();\n    }\n  }, {\n    key: \"getChannel\",\n    value: function getChannel(channelId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelId);\n        }\n\n        return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannels());\n      }\n\n      return Promise.resolve([]);\n    }\n  }, {\n    key: \"getChannelGroup\",\n    value: function getChannelGroup(channelGroupId) {\n      if (Platform.OS === 'android') {\n        if (typeof channelGroupId !== 'string') {\n          throw new Error(\"AndroidNotifications:getChannel expects an 'string' but got type \" + typeof channelGroupId);\n        }\n\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n      }\n\n      return Promise.resolve(null);\n    }\n  }, {\n    key: \"getChannelGroups\",\n    value: function getChannelGroups() {\n      if (Platform.OS === 'android') {\n        return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n      }\n\n      return Promise.resolve([]);\n    }\n  }]);\n\n  return AndroidNotifications;\n}();\n\nexport { AndroidNotifications as default };","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/notifications/AndroidNotifications.js"],"names":["AndroidChannel","AndroidChannelGroup","getNativeModule","AndroidNotifications","notifications","_notifications","channel","Platform","OS","Error","createChannel","build","Promise","resolve","channelGroup","createChannelGroup","channelGroups","Array","isArray","nativeChannelGroups","i","length","push","createChannelGroups","channels","nativeChannels","createChannels","tag","removeDeliveredNotificationsByTag","groupId","deleteChannelGroup","channelId","deleteChannel","getChannel","getChannels","channelGroupId","getChannelGroup","getChannelGroups"],"mappings":";;;AAKA,OAAOA,cAAP;AACA,OAAOC,mBAAP;AACA,SAASC,eAAT;;IACqBC,oB;AACnB,gCAAYC,aAAZ,EAA2B;AAAA;;AACzB,SAAKC,cAAL,GAAsBD,aAAtB;AACD;;;;kCAEaE,O,EAAS;AACrB,UAAIC,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,EAAEF,OAAO,YAAYN,cAArB,CAAJ,EAA0C;AACxC,gBAAM,IAAIS,KAAJ,kFAAyF,OAAOH,OAAhG,CAAN;AACD;;AAED,eAAOJ,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCK,aAArC,CAAmDJ,OAAO,CAACK,KAAR,EAAnD,CAAP;AACD;;AAED,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;;uCAEkBC,Y,EAAc;AAC/B,UAAIP,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,EAAEM,YAAY,YAAYb,mBAA1B,CAAJ,EAAoD;AAClD,gBAAM,IAAIQ,KAAJ,4FAAmG,OAAOK,YAA1G,CAAN;AACD;;AAED,eAAOZ,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCU,kBAArC,CAAwDD,YAAY,CAACH,KAAb,EAAxD,CAAP;AACD;;AAED,aAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;;wCAEmBG,a,EAAe;AACjC,UAAIT,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,CAACS,KAAK,CAACC,OAAN,CAAcF,aAAd,CAAL,EAAmC;AACjC,gBAAM,IAAIP,KAAJ,+EAAsF,OAAOO,aAA7F,CAAN;AACD;;AAED,YAAMG,mBAAmB,GAAG,EAA5B;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,aAAa,CAACK,MAAlC,EAA0CD,CAAC,EAA3C,EAA+C;AAC7C,cAAMN,YAAY,GAAGE,aAAa,CAACI,CAAD,CAAlC;;AAEA,cAAI,EAAEN,YAAY,YAAYb,mBAA1B,CAAJ,EAAoD;AAClD,kBAAM,IAAIQ,KAAJ,8GAAqH,OAAOK,YAA5H,CAAN;AACD;;AAEDK,UAAAA,mBAAmB,CAACG,IAApB,CAAyBR,YAAY,CAACH,KAAb,EAAzB;AACD;;AAED,eAAOT,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCkB,mBAArC,CAAyDJ,mBAAzD,CAAP;AACD;;AAED,aAAOP,OAAO,CAACC,OAAR,EAAP;AACD;;;mCAEcW,Q,EAAU;AACvB,UAAIjB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,CAACS,KAAK,CAACC,OAAN,CAAcM,QAAd,CAAL,EAA8B;AAC5B,gBAAM,IAAIf,KAAJ,0EAAiF,OAAOe,QAAxF,CAAN;AACD;;AAED,YAAMC,cAAc,GAAG,EAAvB;;AAEA,aAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGI,QAAQ,CAACH,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,cAAMd,OAAO,GAAGkB,QAAQ,CAACJ,CAAD,CAAxB;;AAEA,cAAI,EAAEd,OAAO,YAAYN,cAArB,CAAJ,EAA0C;AACxC,kBAAM,IAAIS,KAAJ,oGAA2G,OAAOH,OAAlH,CAAN;AACD;;AAEDmB,UAAAA,cAAc,CAACH,IAAf,CAAoBhB,OAAO,CAACK,KAAR,EAApB;AACD;;AAED,eAAOT,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCqB,cAArC,CAAoDD,cAApD,CAAP;AACD;;AAED,aAAOb,OAAO,CAACC,OAAR,EAAP;AACD;;;sDAEiCc,G,EAAK;AACrC,UAAIpB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,OAAOmB,GAAP,KAAe,QAAnB,EAA6B;AAC3B,gBAAM,IAAIlB,KAAJ,8FAAqG,OAAOkB,GAA5G,CAAN;AACD;;AAED,eAAOzB,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCuB,iCAArC,CAAuED,GAAvE,CAAP;AACD;;AAED,aAAOf,OAAO,CAACC,OAAR,EAAP;AACD;;;uCAEkBgB,O,EAAS;AAC1B,UAAItB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,OAAOqB,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,gBAAM,IAAIpB,KAAJ,+EAAsF,OAAOoB,OAA7F,CAAN;AACD;;AAED,eAAO3B,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCyB,kBAArC,CAAwDD,OAAxD,CAAP;AACD;;AAED,aAAOjB,OAAO,CAACC,OAAR,EAAP;AACD;;;kCAEakB,S,EAAW;AACvB,UAAIxB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,OAAOuB,SAAP,KAAqB,QAAzB,EAAmC;AACjC,gBAAM,IAAItB,KAAJ,0EAAiF,OAAOsB,SAAxF,CAAN;AACD;;AAED,eAAO7B,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqC2B,aAArC,CAAmDD,SAAnD,CAAP;AACD;;AAED,aAAOnB,OAAO,CAACC,OAAR,EAAP;AACD;;;+BAEUkB,S,EAAW;AACpB,UAAIxB,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,OAAOuB,SAAP,KAAqB,QAAzB,EAAmC;AACjC,gBAAM,IAAItB,KAAJ,uEAA8E,OAAOsB,SAArF,CAAN;AACD;;AAED,eAAOnB,OAAO,CAACC,OAAR,CAAgBX,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqC4B,UAArC,CAAgDF,SAAhD,CAAhB,CAAP;AACD;;AAED,aAAOnB,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;kCAEa;AACZ,UAAIN,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAOI,OAAO,CAACC,OAAR,CAAgBX,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqC6B,WAArC,EAAhB,CAAP;AACD;;AAED,aAAOtB,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;;oCAEesB,c,EAAgB;AAC9B,UAAI5B,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAI,OAAO2B,cAAP,KAA0B,QAA9B,EAAwC;AACtC,gBAAM,IAAI1B,KAAJ,uEAA8E,OAAO0B,cAArF,CAAN;AACD;;AAED,eAAOvB,OAAO,CAACC,OAAR,CAAgBX,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqC+B,eAArC,CAAqDD,cAArD,CAAhB,CAAP;AACD;;AAED,aAAOvB,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACD;;;uCAEkB;AACjB,UAAIN,QAAQ,CAACC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,eAAOI,OAAO,CAACC,OAAR,CAAgBX,eAAe,CAAC,KAAKG,cAAN,CAAf,CAAqCgC,gBAArC,EAAhB,CAAP;AACD;;AAED,aAAOzB,OAAO,CAACC,OAAR,CAAgB,EAAhB,CAAP;AACD;;;;;;SAvJkBV,oB","sourcesContent":["/**\n * \n * AndroidNotifications representation wrapper\n */\nimport { Platform } from 'react-native';\nimport AndroidChannel from './AndroidChannel';\nimport AndroidChannelGroup from './AndroidChannelGroup';\nimport { getNativeModule } from '../../utils/native';\nexport default class AndroidNotifications {\n  constructor(notifications) {\n    this._notifications = notifications;\n  }\n\n  createChannel(channel) {\n    if (Platform.OS === 'android') {\n      if (!(channel instanceof AndroidChannel)) {\n        throw new Error(`AndroidNotifications:createChannel expects an 'AndroidChannel' but got type ${typeof channel}`);\n      }\n\n      return getNativeModule(this._notifications).createChannel(channel.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroup(channelGroup) {\n    if (Platform.OS === 'android') {\n      if (!(channelGroup instanceof AndroidChannelGroup)) {\n        throw new Error(`AndroidNotifications:createChannelGroup expects an 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n      }\n\n      return getNativeModule(this._notifications).createChannelGroup(channelGroup.build());\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannelGroups(channelGroups) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channelGroups)) {\n        throw new Error(`AndroidNotifications:createChannelGroups expects an 'Array' but got type ${typeof channelGroups}`);\n      }\n\n      const nativeChannelGroups = [];\n\n      for (let i = 0; i < channelGroups.length; i++) {\n        const channelGroup = channelGroups[i];\n\n        if (!(channelGroup instanceof AndroidChannelGroup)) {\n          throw new Error(`AndroidNotifications:createChannelGroups expects array items of type 'AndroidChannelGroup' but got type ${typeof channelGroup}`);\n        }\n\n        nativeChannelGroups.push(channelGroup.build());\n      }\n\n      return getNativeModule(this._notifications).createChannelGroups(nativeChannelGroups);\n    }\n\n    return Promise.resolve();\n  }\n\n  createChannels(channels) {\n    if (Platform.OS === 'android') {\n      if (!Array.isArray(channels)) {\n        throw new Error(`AndroidNotifications:createChannels expects an 'Array' but got type ${typeof channels}`);\n      }\n\n      const nativeChannels = [];\n\n      for (let i = 0; i < channels.length; i++) {\n        const channel = channels[i];\n\n        if (!(channel instanceof AndroidChannel)) {\n          throw new Error(`AndroidNotifications:createChannels expects array items of type 'AndroidChannel' but got type ${typeof channel}`);\n        }\n\n        nativeChannels.push(channel.build());\n      }\n\n      return getNativeModule(this._notifications).createChannels(nativeChannels);\n    }\n\n    return Promise.resolve();\n  }\n\n  removeDeliveredNotificationsByTag(tag) {\n    if (Platform.OS === 'android') {\n      if (typeof tag !== 'string') {\n        throw new Error(`AndroidNotifications:removeDeliveredNotificationsByTag expects an 'string' but got type ${typeof tag}`);\n      }\n\n      return getNativeModule(this._notifications).removeDeliveredNotificationsByTag(tag);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannelGroup(groupId) {\n    if (Platform.OS === 'android') {\n      if (typeof groupId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannelGroup expects an 'string' but got type ${typeof groupId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannelGroup(groupId);\n    }\n\n    return Promise.resolve();\n  }\n\n  deleteChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:deleteChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return getNativeModule(this._notifications).deleteChannel(channelId);\n    }\n\n    return Promise.resolve();\n  }\n\n  getChannel(channelId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannel(channelId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannels() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannels());\n    }\n\n    return Promise.resolve([]);\n  }\n\n  getChannelGroup(channelGroupId) {\n    if (Platform.OS === 'android') {\n      if (typeof channelGroupId !== 'string') {\n        throw new Error(`AndroidNotifications:getChannel expects an 'string' but got type ${typeof channelGroupId}`);\n      }\n\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroup(channelGroupId));\n    }\n\n    return Promise.resolve(null);\n  }\n\n  getChannelGroups() {\n    if (Platform.OS === 'android') {\n      return Promise.resolve(getNativeModule(this._notifications).getChannelGroups());\n    }\n\n    return Promise.resolve([]);\n  }\n\n}"]},"metadata":{},"sourceType":"module"}