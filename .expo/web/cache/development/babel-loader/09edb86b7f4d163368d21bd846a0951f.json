{"ast":null,"code":"import DocumentReference from \"../DocumentReference\";\nimport Blob from \"../Blob\";\nimport { DOCUMENT_ID } from \"../FieldPath\";\nimport FieldValue from \"../FieldValue\";\nimport GeoPoint from \"../GeoPoint\";\nimport Path from \"../Path\";\nimport { typeOf } from \"../../../utils\";\nimport Timestamp from \"../Timestamp\";\nexport var buildNativeMap = function buildNativeMap(data) {\n  var nativeData = {};\n\n  if (data) {\n    Object.keys(data).forEach(function (key) {\n      var typeMap = buildTypeMap(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    });\n  }\n\n  return nativeData;\n};\nexport var buildNativeArray = function buildNativeArray(array) {\n  var nativeArray = [];\n\n  if (array) {\n    array.forEach(function (value) {\n      var typeMap = buildTypeMap(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    });\n  }\n\n  return nativeArray;\n};\nexport var buildTypeMap = function buildTypeMap(value) {\n  var type = typeOf(value);\n\n  if (Number.isNaN(value)) {\n    return {\n      type: 'nan',\n      value: null\n    };\n  }\n\n  if (value === Infinity) {\n    return {\n      type: 'infinity',\n      value: null\n    };\n  }\n\n  if (value === null || value === undefined) {\n    return {\n      type: 'null',\n      value: null\n    };\n  }\n\n  if (value === DOCUMENT_ID) {\n    return {\n      type: 'documentid',\n      value: null\n    };\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return {\n      type: type,\n      value: value\n    };\n  }\n\n  if (type === 'array') {\n    return {\n      type: type,\n      value: buildNativeArray(value)\n    };\n  }\n\n  if (type === 'object') {\n    if (value instanceof DocumentReference) {\n      return {\n        type: 'reference',\n        value: value.path\n      };\n    }\n\n    if (value instanceof GeoPoint) {\n      return {\n        type: 'geopoint',\n        value: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    }\n\n    if (value instanceof Timestamp) {\n      return {\n        type: 'timestamp',\n        value: {\n          seconds: value.seconds,\n          nanoseconds: value.nanoseconds\n        }\n      };\n    }\n\n    if (value instanceof Date) {\n      return {\n        type: 'date',\n        value: value.getTime()\n      };\n    }\n\n    if (value instanceof Blob) {\n      return {\n        type: 'blob',\n        value: value.toBase64()\n      };\n    }\n\n    if (value instanceof FieldValue) {\n      return {\n        type: 'fieldvalue',\n        value: {\n          elements: value.elements,\n          type: value.type\n        }\n      };\n    }\n\n    return {\n      type: 'object',\n      value: buildNativeMap(value)\n    };\n  }\n\n  console.warn(\"Unknown data type received \" + type);\n  return null;\n};\nexport var parseNativeMap = function parseNativeMap(firestore, nativeData) {\n  var data;\n\n  if (nativeData) {\n    data = {};\n    Object.keys(nativeData).forEach(function (key) {\n      data[key] = parseTypeMap(firestore, nativeData[key]);\n    });\n  }\n\n  return data;\n};\n\nvar parseNativeArray = function parseNativeArray(firestore, nativeArray) {\n  var array = [];\n\n  if (nativeArray) {\n    nativeArray.forEach(function (typeMap) {\n      array.push(parseTypeMap(firestore, typeMap));\n    });\n  }\n\n  return array;\n};\n\nvar parseTypeMap = function parseTypeMap(firestore, typeMap) {\n  var type = typeMap.type,\n      value = typeMap.value;\n\n  if (type === 'null') {\n    return null;\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return value;\n  }\n\n  if (type === 'array') {\n    return parseNativeArray(firestore, value);\n  }\n\n  if (type === 'object') {\n    return parseNativeMap(firestore, value);\n  }\n\n  if (type === 'reference') {\n    return new DocumentReference(firestore, Path.fromName(value));\n  }\n\n  if (type === 'geopoint') {\n    return new GeoPoint(value.latitude, value.longitude);\n  }\n\n  if (type === 'timestamp') {\n    return new Timestamp(value.seconds, value.nanoseconds);\n  }\n\n  if (type === 'date') {\n    return new Date(value);\n  }\n\n  if (type === 'blob') {\n    return Blob.fromBase64String(value);\n  }\n\n  if (type === 'infinity') {\n    return Infinity;\n  }\n\n  if (type === 'nan') {\n    return NaN;\n  }\n\n  console.warn(\"Unknown data type received \" + type);\n  return value;\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/firestore/utils/serialize.js"],"names":["DocumentReference","Blob","DOCUMENT_ID","FieldValue","GeoPoint","Path","typeOf","Timestamp","buildNativeMap","data","nativeData","Object","keys","forEach","key","typeMap","buildTypeMap","buildNativeArray","array","nativeArray","value","push","type","Number","isNaN","Infinity","undefined","path","latitude","longitude","seconds","nanoseconds","Date","getTime","toBase64","elements","console","warn","parseNativeMap","firestore","parseTypeMap","parseNativeArray","fromName","fromBase64String","NaN"],"mappings":"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","sourcesContent":["import DocumentReference from '../DocumentReference';\nimport Blob from '../Blob';\nimport { DOCUMENT_ID } from '../FieldPath';\nimport FieldValue from '../FieldValue';\nimport GeoPoint from '../GeoPoint';\nimport Path from '../Path';\nimport { typeOf } from '../../../utils';\nimport Timestamp from '../Timestamp';\n/*\n * Functions that build up the data needed to represent\n * the different types available within Firestore\n * for transmission to the native side\n */\n\nexport const buildNativeMap = data => {\n  const nativeData = {};\n\n  if (data) {\n    Object.keys(data).forEach(key => {\n      const typeMap = buildTypeMap(data[key]);\n\n      if (typeMap) {\n        nativeData[key] = typeMap;\n      }\n    });\n  }\n\n  return nativeData;\n};\nexport const buildNativeArray = array => {\n  const nativeArray = [];\n\n  if (array) {\n    array.forEach(value => {\n      const typeMap = buildTypeMap(value);\n\n      if (typeMap) {\n        nativeArray.push(typeMap);\n      }\n    });\n  }\n\n  return nativeArray;\n};\nexport const buildTypeMap = value => {\n  const type = typeOf(value);\n\n  if (Number.isNaN(value)) {\n    return {\n      type: 'nan',\n      value: null\n    };\n  }\n\n  if (value === Infinity) {\n    return {\n      type: 'infinity',\n      value: null\n    };\n  }\n\n  if (value === null || value === undefined) {\n    return {\n      type: 'null',\n      value: null\n    };\n  }\n\n  if (value === DOCUMENT_ID) {\n    return {\n      type: 'documentid',\n      value: null\n    };\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return {\n      type,\n      value\n    };\n  }\n\n  if (type === 'array') {\n    return {\n      type,\n      value: buildNativeArray(value)\n    };\n  }\n\n  if (type === 'object') {\n    if (value instanceof DocumentReference) {\n      return {\n        type: 'reference',\n        value: value.path\n      };\n    }\n\n    if (value instanceof GeoPoint) {\n      return {\n        type: 'geopoint',\n        value: {\n          latitude: value.latitude,\n          longitude: value.longitude\n        }\n      };\n    }\n\n    if (value instanceof Timestamp) {\n      return {\n        type: 'timestamp',\n        value: {\n          seconds: value.seconds,\n          nanoseconds: value.nanoseconds\n        }\n      };\n    }\n\n    if (value instanceof Date) {\n      return {\n        type: 'date',\n        value: value.getTime()\n      };\n    }\n\n    if (value instanceof Blob) {\n      return {\n        type: 'blob',\n        value: value.toBase64()\n      };\n    } // TODO: Salakar: Refactor in v6 - add internal `type` flag\n\n\n    if (value instanceof FieldValue) {\n      return {\n        type: 'fieldvalue',\n        value: {\n          elements: value.elements,\n          type: value.type\n        }\n      };\n    }\n\n    return {\n      type: 'object',\n      value: buildNativeMap(value)\n    };\n  }\n\n  console.warn(`Unknown data type received ${type}`);\n  return null;\n};\n/*\n * Functions that parse the received from the native\n * side and converts to the correct Firestore JS types\n */\n\nexport const parseNativeMap = (firestore, nativeData) => {\n  let data;\n\n  if (nativeData) {\n    data = {};\n    Object.keys(nativeData).forEach(key => {\n      data[key] = parseTypeMap(firestore, nativeData[key]);\n    });\n  }\n\n  return data;\n};\n\nconst parseNativeArray = (firestore, nativeArray) => {\n  const array = [];\n\n  if (nativeArray) {\n    nativeArray.forEach(typeMap => {\n      array.push(parseTypeMap(firestore, typeMap));\n    });\n  }\n\n  return array;\n};\n\nconst parseTypeMap = (firestore, typeMap) => {\n  const {\n    type,\n    value\n  } = typeMap;\n\n  if (type === 'null') {\n    return null;\n  }\n\n  if (type === 'boolean' || type === 'number' || type === 'string') {\n    return value;\n  }\n\n  if (type === 'array') {\n    return parseNativeArray(firestore, value);\n  }\n\n  if (type === 'object') {\n    return parseNativeMap(firestore, value);\n  }\n\n  if (type === 'reference') {\n    return new DocumentReference(firestore, Path.fromName(value));\n  }\n\n  if (type === 'geopoint') {\n    return new GeoPoint(value.latitude, value.longitude);\n  }\n\n  if (type === 'timestamp') {\n    return new Timestamp(value.seconds, value.nanoseconds);\n  }\n\n  if (type === 'date') {\n    return new Date(value);\n  }\n\n  if (type === 'blob') {\n    return Blob.fromBase64String(value);\n  }\n\n  if (type === 'infinity') {\n    return Infinity;\n  }\n\n  if (type === 'nan') {\n    return NaN;\n  }\n\n  console.warn(`Unknown data type received ${type}`);\n  return value;\n};"]},"metadata":{},"sourceType":"module"}