{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nimport { isString, isObject } from \"../../utils\";\nvar AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nvar ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport var MODULE_NAME = 'RNFirebaseAnalytics';\nexport var NAMESPACE = 'analytics';\n\nvar Analytics = function (_ModuleBase) {\n  _inherits(Analytics, _ModuleBase);\n\n  var _super = _createSuper(Analytics);\n\n  function Analytics(app) {\n    _classCallCheck(this, Analytics);\n\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  _createClass(Analytics, [{\n    key: \"logEvent\",\n    value: function logEvent(name) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!isString(name)) {\n        throw new Error(\"analytics.logEvent(): First argument 'name' is required and must be a string value.\");\n      }\n\n      if (typeof params !== 'undefined' && !isObject(params)) {\n        throw new Error(\"analytics.logEvent(): Second optional argument 'params' must be an object if provided.\");\n      }\n\n      if (ReservedEventNames.includes(name)) {\n        throw new Error(\"analytics.logEvent(): event name '\" + name + \"' is a reserved event name and can not be used.\");\n      }\n\n      if (!AlphaNumericUnderscore.test(name)) {\n        throw new Error(\"analytics.logEvent(): Event name '\" + name + \"' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.\");\n      }\n\n      if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).');\n      getNativeModule(this).logEvent(name, params);\n    }\n  }, {\n    key: \"setAnalyticsCollectionEnabled\",\n    value: function setAnalyticsCollectionEnabled(enabled) {\n      getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n    }\n  }, {\n    key: \"setCurrentScreen\",\n    value: function setCurrentScreen(screenName, screenClassOverride) {\n      getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n    }\n  }, {\n    key: \"setMinimumSessionDuration\",\n    value: function setMinimumSessionDuration() {\n      var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10000;\n      getNativeModule(this).setMinimumSessionDuration(milliseconds);\n    }\n  }, {\n    key: \"setSessionTimeoutDuration\",\n    value: function setSessionTimeoutDuration() {\n      var milliseconds = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1800000;\n      getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n    }\n  }, {\n    key: \"setUserId\",\n    value: function setUserId(id) {\n      if (id !== null && !isString(id)) {\n        throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n      }\n\n      getNativeModule(this).setUserId(id);\n    }\n  }, {\n    key: \"setUserProperty\",\n    value: function setUserProperty(name, value) {\n      if (value !== null && !isString(value)) {\n        throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n      }\n\n      getNativeModule(this).setUserProperty(name, value);\n    }\n  }, {\n    key: \"setUserProperties\",\n    value: function setUserProperties(object) {\n      var _this = this;\n\n      Object.keys(object).forEach(function (property) {\n        var value = object[property];\n\n        if (value !== null && !isString(value)) {\n          throw new Error(\"analytics.setUserProperties(): The property with name '\" + property + \"' must be a string value or null.\");\n        }\n\n        getNativeModule(_this).setUserProperty(property, object[property]);\n      });\n    }\n  }]);\n\n  return Analytics;\n}(ModuleBase);\n\nexport { Analytics as default };\nexport var statics = {};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/analytics/index.js"],"names":["ModuleBase","getNativeModule","isString","isObject","AlphaNumericUnderscore","ReservedEventNames","MODULE_NAME","NAMESPACE","Analytics","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","name","params","Error","includes","test","Object","keys","length","logEvent","enabled","setAnalyticsCollectionEnabled","screenName","screenClassOverride","setCurrentScreen","milliseconds","setMinimumSessionDuration","setSessionTimeoutDuration","id","setUserId","value","setUserProperty","object","forEach","property","statics"],"mappings":"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","sourcesContent":["/**\n * \n * Analytics representation wrapper\n */\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nimport { isString, isObject } from '../../utils';\nconst AlphaNumericUnderscore = /^[a-zA-Z0-9_]+$/;\nconst ReservedEventNames = ['app_clear_data', 'app_uninstall', 'app_update', 'error', 'first_open', 'in_app_purchase', 'notification_dismiss', 'notification_foreground', 'notification_open', 'notification_receive', 'os_update', 'session_start', 'user_engagement'];\nexport const MODULE_NAME = 'RNFirebaseAnalytics';\nexport const NAMESPACE = 'analytics';\nexport default class Analytics extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Logs an app event.\n   * @param  {string} name\n   * @param params\n   * @return {Promise}\n   */\n\n\n  logEvent(name, params = {}) {\n    if (!isString(name)) {\n      throw new Error(`analytics.logEvent(): First argument 'name' is required and must be a string value.`);\n    }\n\n    if (typeof params !== 'undefined' && !isObject(params)) {\n      throw new Error(`analytics.logEvent(): Second optional argument 'params' must be an object if provided.`);\n    } // check name is not a reserved event name\n\n\n    if (ReservedEventNames.includes(name)) {\n      throw new Error(`analytics.logEvent(): event name '${name}' is a reserved event name and can not be used.`);\n    } // name format validation\n\n\n    if (!AlphaNumericUnderscore.test(name)) {\n      throw new Error(`analytics.logEvent(): Event name '${name}' is invalid. Names should contain 1 to 32 alphanumeric characters or underscores.`);\n    } // maximum number of allowed params check\n\n\n    if (params && Object.keys(params).length > 25) throw new Error('analytics.logEvent(): Maximum number of parameters exceeded (25).'); // Parameter names can be up to 24 characters long and must start with an alphabetic character\n    // and contain only alphanumeric characters and underscores. Only String, long and double param\n    // types are supported. String parameter values can be up to 36 characters long. The \"firebase_\"\n    // prefix is reserved and should not be used for parameter names.\n\n    getNativeModule(this).logEvent(name, params);\n  }\n  /**\n   * Sets whether analytics collection is enabled for this app on this device.\n   * @param enabled\n   */\n\n\n  setAnalyticsCollectionEnabled(enabled) {\n    getNativeModule(this).setAnalyticsCollectionEnabled(enabled);\n  }\n  /**\n   * Sets the current screen name, which specifies the current visual context in your app.\n   * @param screenName\n   * @param screenClassOverride\n   */\n\n\n  setCurrentScreen(screenName, screenClassOverride) {\n    getNativeModule(this).setCurrentScreen(screenName, screenClassOverride);\n  }\n  /**\n   * Sets the minimum engagement time required before starting a session. The default value is 10000 (10 seconds).\n   * @param milliseconds\n   */\n\n\n  setMinimumSessionDuration(milliseconds = 10000) {\n    getNativeModule(this).setMinimumSessionDuration(milliseconds);\n  }\n  /**\n   * Sets the duration of inactivity that terminates the current session. The default value is 1800000 (30 minutes).\n   * @param milliseconds\n   */\n\n\n  setSessionTimeoutDuration(milliseconds = 1800000) {\n    getNativeModule(this).setSessionTimeoutDuration(milliseconds);\n  }\n  /**\n   * Sets the user ID property.\n   * @param id\n   */\n\n\n  setUserId(id) {\n    if (id !== null && !isString(id)) {\n      throw new Error('analytics.setUserId(): The supplied userId must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserId(id);\n  }\n  /**\n   * Sets a user property to a given value.\n   * @param name\n   * @param value\n   */\n\n\n  setUserProperty(name, value) {\n    if (value !== null && !isString(value)) {\n      throw new Error('analytics.setUserProperty(): The supplied property must be a string value or null.');\n    }\n\n    getNativeModule(this).setUserProperty(name, value);\n  }\n  /**\n   * Sets multiple user properties to the supplied values.\n   * @RNFirebaseSpecific\n   * @param object\n   */\n\n\n  setUserProperties(object) {\n    Object.keys(object).forEach(property => {\n      const value = object[property];\n\n      if (value !== null && !isString(value)) {\n        throw new Error(`analytics.setUserProperties(): The property with name '${property}' must be a string value or null.`);\n      }\n\n      getNativeModule(this).setUserProperty(property, object[property]);\n    });\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"module"}