{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport Trace from \"./Trace\";\nimport HttpMetric from \"./HttpMetric\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nexport var MODULE_NAME = 'RNFirebasePerformance';\nexport var NAMESPACE = 'perf';\nvar HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\n\nvar PerformanceMonitoring = function (_ModuleBase) {\n  _inherits(PerformanceMonitoring, _ModuleBase);\n\n  var _super = _createSuper(PerformanceMonitoring);\n\n  function PerformanceMonitoring(app) {\n    _classCallCheck(this, PerformanceMonitoring);\n\n    return _super.call(this, app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n\n  _createClass(PerformanceMonitoring, [{\n    key: \"setPerformanceCollectionEnabled\",\n    value: function setPerformanceCollectionEnabled(enabled) {\n      if (typeof enabled !== 'boolean') {\n        throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n      }\n\n      return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n    }\n  }, {\n    key: \"newTrace\",\n    value: function newTrace(trace) {\n      if (typeof trace !== 'string') {\n        throw new Error('firebase.perf().newTrace() requires a string value');\n      }\n\n      return new Trace(this, trace);\n    }\n  }, {\n    key: \"newHttpMetric\",\n    value: function newHttpMetric(url, httpMethod) {\n      if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n        throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n      }\n\n      if (!HTTP_METHODS[httpMethod]) {\n        throw new Error(\"firebase.perf().newHttpMetric() httpMethod should be one of \" + Object.keys(HTTP_METHODS).join(', '));\n      }\n\n      return new HttpMetric(this, url, httpMethod);\n    }\n  }]);\n\n  return PerformanceMonitoring;\n}(ModuleBase);\n\nexport { PerformanceMonitoring as default };\nexport var statics = {};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/perf/index.js"],"names":["Trace","HttpMetric","ModuleBase","getNativeModule","MODULE_NAME","NAMESPACE","HTTP_METHODS","CONNECT","DELETE","GET","HEAD","OPTIONS","PATCH","POST","PUT","TRACE","PerformanceMonitoring","app","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","enabled","Error","setPerformanceCollectionEnabled","trace","url","httpMethod","Object","keys","join","statics"],"mappings":";;;;;;;;;;AAIA,OAAOA,KAAP;AACA,OAAOC,UAAP;AACA,OAAOC,UAAP;AACA,SAASC,eAAT;AACA,OAAO,IAAMC,WAAW,GAAG,uBAApB;AACP,OAAO,IAAMC,SAAS,GAAG,MAAlB;AACP,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,IADU;AAEnBC,EAAAA,MAAM,EAAE,IAFW;AAGnBC,EAAAA,GAAG,EAAE,IAHc;AAInBC,EAAAA,IAAI,EAAE,IAJa;AAKnBC,EAAAA,OAAO,EAAE,IALU;AAMnBC,EAAAA,KAAK,EAAE,IANY;AAOnBC,EAAAA,IAAI,EAAE,IAPa;AAQnBC,EAAAA,GAAG,EAAE,IARc;AASnBC,EAAAA,KAAK,EAAE;AATY,CAArB;;IAWqBC,qB;;;;;AACnB,iCAAYC,GAAZ,EAAiB;AAAA;;AAAA,6BACTA,GADS,EACJ;AACTC,MAAAA,UAAU,EAAEd,WADH;AAETe,MAAAA,kBAAkB,EAAE,KAFX;AAGTC,MAAAA,mBAAmB,EAAE,KAHZ;AAITC,MAAAA,SAAS,EAAEhB;AAJF,KADI;AAOhB;;;;oDAQ+BiB,O,EAAS;AACvC,UAAI,OAAOA,OAAP,KAAmB,SAAvB,EAAkC;AAChC,cAAM,IAAIC,KAAJ,CAAU,4EAAV,CAAN;AACD;;AAED,aAAOpB,eAAe,CAAC,IAAD,CAAf,CAAsBqB,+BAAtB,CAAsDF,OAAtD,CAAP;AACD;;;6BAOQG,K,EAAO;AACd,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAM,IAAIF,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,aAAO,IAAIvB,KAAJ,CAAU,IAAV,EAAgByB,KAAhB,CAAP;AACD;;;kCASaC,G,EAAKC,U,EAAY;AAC7B,UAAI,OAAOD,GAAP,KAAe,QAAf,IAA2B,OAAOC,UAAP,KAAsB,QAArD,EAA+D;AAC7D,cAAM,IAAIJ,KAAJ,CAAU,2EAAV,CAAN;AACD;;AAED,UAAI,CAACjB,YAAY,CAACqB,UAAD,CAAjB,EAA+B;AAC7B,cAAM,IAAIJ,KAAJ,kEAAyEK,MAAM,CAACC,IAAP,CAAYvB,YAAZ,EAA0BwB,IAA1B,CAA+B,IAA/B,CAAzE,CAAN;AACD;;AAED,aAAO,IAAI7B,UAAJ,CAAe,IAAf,EAAqByB,GAArB,EAA0BC,UAA1B,CAAP;AACD;;;;EAtDgDzB,U;;SAA9Bc,qB;AAyDrB,OAAO,IAAMe,OAAO,GAAG,EAAhB","sourcesContent":["/**\n * \n * Performance monitoring representation wrapper\n */\nimport Trace from './Trace';\nimport HttpMetric from './HttpMetric';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nexport const MODULE_NAME = 'RNFirebasePerformance';\nexport const NAMESPACE = 'perf';\nconst HTTP_METHODS = {\n  CONNECT: true,\n  DELETE: true,\n  GET: true,\n  HEAD: true,\n  OPTIONS: true,\n  PATCH: true,\n  POST: true,\n  PUT: true,\n  TRACE: true\n};\nexport default class PerformanceMonitoring extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: false,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n  }\n  /**\n   * Globally enable or disable performance monitoring\n   * @param enabled\n   * @returns {*}\n   */\n\n\n  setPerformanceCollectionEnabled(enabled) {\n    if (typeof enabled !== 'boolean') {\n      throw new Error('firebase.perf().setPerformanceCollectionEnabled() requires a boolean value');\n    }\n\n    return getNativeModule(this).setPerformanceCollectionEnabled(enabled);\n  }\n  /**\n   * Returns a new trace instance\n   * @param trace\n   */\n\n\n  newTrace(trace) {\n    if (typeof trace !== 'string') {\n      throw new Error('firebase.perf().newTrace() requires a string value');\n    }\n\n    return new Trace(this, trace);\n  }\n  /**\n   * Return a new HttpMetric instance\n   * @param url\n   * @param httpMethod\n   * @returns {HttpMetric}\n   */\n\n\n  newHttpMetric(url, httpMethod) {\n    if (typeof url !== 'string' || typeof httpMethod !== 'string') {\n      throw new Error('firebase.perf().newHttpMetric() requires url and httpMethod string values');\n    }\n\n    if (!HTTP_METHODS[httpMethod]) {\n      throw new Error(`firebase.perf().newHttpMetric() httpMethod should be one of ${Object.keys(HTTP_METHODS).join(', ')}`);\n    }\n\n    return new HttpMetric(this, url, httpMethod);\n  }\n\n}\nexport const statics = {};"]},"metadata":{},"sourceType":"module"}