{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\orange7332\\\\capstone\\\\code-18122020-combined\\\\Screens\\\\SchedulingCountdownTimerScreen.js\";\nimport * as React from 'react';\nimport CountDown from 'react-native-countdown-component';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport firebase from 'firebase/app';\nimport \"firebase/auth\";\nimport 'firebase/database';\n\nfunction SchedulingCountdownTimerScreen(_ref) {\n  var route = _ref.route,\n      navigation = _ref.navigation;\n  var _route$params = route.params,\n      Time_before_finish = _route$params.Time_before_finish,\n      data = _route$params.data;\n\n  var handleFinish = function handleFinish() {\n    var user = firebase.auth().currentUser;\n    firebase.database().ref('/Socket ID/' + data.slice(17, 20)).update({\n      SocketOn: false,\n      Completion_Time: 0,\n      User_Email: user.email\n    }).then(function (data) {\n      console.log('data', data);\n    }).catch(function (error) {\n      console.log('error', error);\n    });\n  };\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: styles.Instructions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, \" Time before socket No. \", data.slice(17, 20), \" \", '\\n switches off'), React.createElement(CountDown, {\n    size: 30,\n    until: Time_before_finish * 60,\n    onFinish: function onFinish() {\n      return handleFinish() > navigation.navigate('Times Up');\n    },\n    digitStyle: {\n      backgroundColor: '#FFF',\n      borderWidth: 2,\n      borderColor: '#1CC625'\n    },\n    digitTxtStyle: {\n      color: '#000000'\n    },\n    timeLabelStyle: {\n      color: '#1CC625',\n      fontWeight: 'bold'\n    },\n    separatorStyle: {\n      color: '#000000'\n    },\n    timeToShow: ['H', 'M', 'S'],\n    timeLabels: {\n      h: 'Hour',\n      m: 'Minutes',\n      s: 'Seconds'\n    },\n    showSeparator: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.Stop_Button,\n    onPress: function onPress() {\n      return handleFinish() > navigation.navigate('Times Up');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, React.createElement(Text, {\n    style: styles.Button_Text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \" Stop Now \")));\n}\n\nvar styles = StyleSheet.create({\n  Instructions: {\n    textAlign: 'center',\n    marginLeft: 25,\n    marginRight: 25,\n    marginTop: 50,\n    marginBottom: 25,\n    color: \"#000\",\n    fontWeight: \"300\",\n    fontSize: 20\n  },\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#fff'\n  },\n  Stop_Button: {\n    backgroundColor: '#000080',\n    borderRadius: 4,\n    height: 52,\n    width: 300,\n    marginTop: 25,\n    marginBottom: 250,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  Button_Text: {\n    color: \"#FFF\",\n    fontWeight: \"600\"\n  }\n});\nexport default SchedulingCountdownTimerScreen;","map":{"version":3,"sources":["C:/Users/orange7332/capstone/code-18122020-combined/Screens/SchedulingCountdownTimerScreen.js"],"names":["React","CountDown","firebase","SchedulingCountdownTimerScreen","route","navigation","params","Time_before_finish","data","handleFinish","user","auth","currentUser","database","ref","slice","update","SocketOn","Completion_Time","User_Email","email","then","console","log","catch","error","styles","container","Instructions","navigate","backgroundColor","borderWidth","borderColor","color","fontWeight","h","m","s","Stop_Button","Button_Text","StyleSheet","create","textAlign","marginLeft","marginRight","marginTop","marginBottom","fontSize","flex","alignItems","justifyContent","borderRadius","height","width"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport CountDown from 'react-native-countdown-component';\r\nimport { View, Text, TouchableOpacity, StyleSheet} from 'react-native';\r\nimport firebase from 'firebase/app';\r\nimport \"firebase/auth\";\r\nimport 'firebase/database';\r\n\r\nfunction SchedulingCountdownTimerScreen({ route, navigation }) {\r\n    let {Time_before_finish, data} = route.params;\r\n\r\n    const handleFinish = () => {\r\n      var user = firebase.auth().currentUser;\r\n      \r\n      firebase.database().ref('/Socket ID/' + data.slice(17,20)).update({\r\n          SocketOn: false,\r\n          Completion_Time: 0,\r\n          User_Email: user.email,\r\n      }).then((data) => {\r\n          console.log('data', data)\r\n      }).catch((error) => {\r\n          console.log('error', error)\r\n      })\r\n  }\r\n\r\n    return (\r\n      <View style={styles.container}>\r\n        <Text style = {styles.Instructions}> Time before socket No. {data.slice(17,20)} {'\\n switches off'}</Text>\r\n      \r\n        <CountDown \r\n          size={30}\r\n          until={Time_before_finish*60}\r\n          onFinish={() => handleFinish() > navigation.navigate('Times Up')}\r\n          digitStyle={{backgroundColor: '#FFF', borderWidth: 2, borderColor: '#1CC625'}}\r\n          digitTxtStyle={{color: '#000000'}}\r\n          timeLabelStyle={{color: '#1CC625', fontWeight: 'bold'}}\r\n          separatorStyle={{color: '#000000'}}\r\n          timeToShow={['H', 'M', 'S']}\r\n          timeLabels={{h: 'Hour', m: 'Minutes', s: 'Seconds'}}\r\n          showSeparator\r\n        />\r\n\r\n        <TouchableOpacity\r\n          style={styles.Stop_Button}\r\n          onPress={() => handleFinish() > navigation.navigate('Times Up')}\r\n        >\r\n          <Text style = {styles.Button_Text}> Stop Now </Text>\r\n        </TouchableOpacity>\r\n      </View>\r\n    );\r\n  }\r\n\r\n  const styles = StyleSheet.create({\r\n    Instructions: {\r\n      textAlign: 'center',\r\n      marginLeft: 25,\r\n      marginRight: 25,\r\n      marginTop: 50,\r\n      marginBottom: 25,\r\n      color: \"#000\", \r\n      fontWeight: \"300\", \r\n      fontSize: 20\r\n    },\r\n\r\n    container: {\r\n        flex : 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff',\r\n    },\r\n\r\n    Stop_Button: {\r\n        backgroundColor : '#000080',\r\n        borderRadius : 4,\r\n        height: 52,\r\n        width : 300,\r\n        marginTop: 25,\r\n        marginBottom: 250,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n\r\n    Button_Text: {\r\n        color: \"#FFF\",\r\n        fontWeight: \"600\"\r\n    }\r\n});\r\n\r\nexport default SchedulingCountdownTimerScreen;"]},"metadata":{},"sourceType":"module"}