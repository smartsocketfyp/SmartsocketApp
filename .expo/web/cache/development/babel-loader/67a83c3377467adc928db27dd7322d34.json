{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\orange7332\\\\capstone\\\\code-18122020-combined\\\\node_modules\\\\react-native-charts\\\\src\\\\components\\\\BarChart\\\\index.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component, PropTypes } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { flatten, max, pluck, zip } from 'underscore';\nimport { dataSetPropType } from \"../../constants/propTypes\";\nimport Bar from \"../Bar\";\nimport Grid from \"../Grid\";\nimport styles from \"./styles\";\n\nvar BarChart = function (_Component) {\n  _inherits(BarChart, _Component);\n\n  var _super = _createSuper(BarChart);\n\n  function BarChart() {\n    _classCallCheck(this, BarChart);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(BarChart, [{\n    key: \"getStyles\",\n    value: function getStyles() {\n      var _this$props = this.props,\n          barSize = _this$props.barSize,\n          barSpacing = _this$props.barSpacing,\n          horizontal = _this$props.horizontal;\n      return styles({\n        barSize: barSize,\n        barSpacing: barSpacing,\n        horizontal: horizontal\n      });\n    }\n  }, {\n    key: \"getDataSetsMaxValue\",\n    value: function getDataSetsMaxValue() {\n      var dataSets = this.props.dataSets;\n      var dataSetsData = flatten(pluck(dataSets, 'data'));\n      var dataSetsValues = pluck(dataSetsData, 'value');\n      var dataSetsMaxValue = max(dataSetsValues);\n      return dataSetsMaxValue;\n    }\n  }, {\n    key: \"getGraduation\",\n    value: function getGraduation() {\n      var dataSetsMaxValue = this.getDataSetsMaxValue();\n      var calculatedGraduation = Math.ceil(Math.sqrt(dataSetsMaxValue));\n      return this.props.graduation || calculatedGraduation;\n    }\n  }, {\n    key: \"getGridMaxValue\",\n    value: function getGridMaxValue() {\n      var dataSetsMaxValue = this.getDataSetsMaxValue();\n      var graduation = this.getGraduation();\n      var gridMaxValue = Math.ceil(dataSetsMaxValue / graduation) * graduation;\n      return gridMaxValue;\n    }\n  }, {\n    key: \"renderGrid\",\n    value: function renderGrid(children) {\n      var horizontal = this.props.horizontal;\n      var gridMaxValue = this.getGridMaxValue();\n      var graduation = this.getGraduation();\n      return React.createElement(Grid, {\n        horizontal: horizontal,\n        graduation: graduation,\n        maxValue: gridMaxValue,\n        content: children,\n        style: this.getStyles().grid,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      });\n    }\n  }, {\n    key: \"renderBars\",\n    value: function renderBars() {\n      var _this = this;\n\n      var _this$props2 = this.props,\n          barStyle = _this$props2.barStyle,\n          dataSets = _this$props2.dataSets,\n          horizontal = _this$props2.horizontal;\n      console.log('TODO: Margin/pad datasets...');\n      var gridMaxValue = this.getGridMaxValue();\n      var dataSetsBars = dataSets.map(function (dataSet) {\n        return dataSet.data.map(function (data, index) {\n          return React.createElement(Bar, {\n            key: \"\" + dataSet.fillColor + index,\n            fillColor: dataSet.fillColor,\n            horizontal: horizontal,\n            value: data.value,\n            maxValue: gridMaxValue,\n            style: [_this.getStyles().bar, barStyle],\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 11\n            }\n          });\n        });\n      });\n      var bars = flatten(zip.apply(void 0, _toConsumableArray(dataSetsBars)));\n      return React.createElement(View, {\n        style: this.getStyles().bars,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }\n      }, bars);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          showGrid = _this$props3.showGrid,\n          style = _this$props3.style;\n      var bars = this.renderBars();\n      var chart = showGrid ? this.renderGrid(bars) : bars;\n      return React.createElement(View, {\n        style: [this.getStyles().container, style],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 7\n        }\n      }, chart);\n    }\n  }]);\n\n  return BarChart;\n}(Component);\n\nBarChart.propTypes = {\n  barSize: PropTypes.number,\n  barSpacing: PropTypes.number,\n  barStyle: View.propTypes.style,\n  dataSets: PropTypes.arrayOf(dataSetPropType).isRequired,\n  graduation: PropTypes.number,\n  horizontal: PropTypes.bool,\n  showGrid: PropTypes.bool.isRequired,\n  style: View.propTypes.style\n};\nBarChart.defaultProps = {\n  showGrid: true\n};\nexport { BarChart as default };","map":{"version":3,"sources":["C:/Users/orange7332/capstone/code-18122020-combined/node_modules/react-native-charts/src/components/BarChart/index.js"],"names":["React","Component","PropTypes","flatten","max","pluck","zip","dataSetPropType","Bar","Grid","styles","BarChart","props","barSize","barSpacing","horizontal","dataSets","dataSetsData","dataSetsValues","dataSetsMaxValue","getDataSetsMaxValue","calculatedGraduation","Math","ceil","sqrt","graduation","getGraduation","gridMaxValue","children","getGridMaxValue","getStyles","grid","barStyle","console","log","dataSetsBars","map","dataSet","data","index","fillColor","value","bar","bars","showGrid","style","renderBars","chart","renderGrid","container","propTypes","number","View","arrayOf","isRequired","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component, PropTypes } from 'react';\nimport { View } from 'react-native';\nimport { flatten, max, pluck, zip } from 'underscore';\nimport { dataSetPropType } from '../../constants/propTypes';\nimport Bar from '../Bar';\nimport Grid from '../Grid';\nimport styles from './styles';\n\nexport default class BarChart extends Component {\n  static propTypes = {\n    barSize: PropTypes.number,\n    barSpacing: PropTypes.number,\n    barStyle: View.propTypes.style,\n    dataSets: PropTypes.arrayOf(dataSetPropType).isRequired,\n    graduation: PropTypes.number,\n    horizontal: PropTypes.bool,\n    showGrid: PropTypes.bool.isRequired,\n    style: View.propTypes.style,\n  };\n\n  static defaultProps = {\n    showGrid: true,\n  };\n\n  getStyles() {\n    const {\n      barSize,\n      barSpacing,\n      horizontal,\n    } = this.props;\n\n    return styles({\n      barSize,\n      barSpacing,\n      horizontal,\n    });\n  }\n\n  getDataSetsMaxValue() {\n    const {\n      dataSets,\n    } = this.props;\n\n    const dataSetsData = flatten(pluck(dataSets, 'data'));\n    const dataSetsValues = pluck(dataSetsData, 'value');\n    const dataSetsMaxValue = max(dataSetsValues);\n\n    return dataSetsMaxValue;\n  }\n\n  getGraduation() {\n    const dataSetsMaxValue = this.getDataSetsMaxValue();\n    const calculatedGraduation = Math.ceil(Math.sqrt(dataSetsMaxValue));\n\n    return this.props.graduation || calculatedGraduation;\n  }\n\n  getGridMaxValue() {\n    const dataSetsMaxValue = this.getDataSetsMaxValue();\n    const graduation = this.getGraduation();\n    const gridMaxValue = Math.ceil(dataSetsMaxValue / graduation) * graduation;\n\n    return gridMaxValue;\n  }\n\n  renderGrid(children) {\n    const {\n      horizontal,\n    } = this.props;\n\n    const gridMaxValue = this.getGridMaxValue();\n    const graduation = this.getGraduation();\n\n    return (\n      <Grid\n        horizontal={horizontal}\n        graduation={graduation}\n        maxValue={gridMaxValue}\n        content={children}\n        style={this.getStyles().grid}\n      />\n    );\n  }\n\n  renderBars() {\n    const {\n      barStyle,\n      dataSets,\n      horizontal,\n    } = this.props;\n\n    // TODO: Margin/pad datasets...\n    console.log('TODO: Margin/pad datasets...');\n    const gridMaxValue = this.getGridMaxValue();\n    const dataSetsBars = dataSets.map(dataSet => {\n      return dataSet.data.map((data, index) => {\n        return (\n          <Bar\n            key={`${dataSet.fillColor}${index}`}\n            fillColor={dataSet.fillColor}\n            horizontal={horizontal}\n            value={data.value}\n            maxValue={gridMaxValue}\n            style={[this.getStyles().bar, barStyle]}\n          />\n        );\n      });\n    });\n    const bars = flatten(zip(...dataSetsBars));\n\n    return (\n      <View style={this.getStyles().bars}>\n        {bars}\n      </View>\n    );\n  }\n\n  render() {\n    const {\n      showGrid,\n      style,\n    } = this.props;\n\n    const bars = this.renderBars();\n    const chart = showGrid\n                ? this.renderGrid(bars)\n                : bars;\n\n    return (\n      <View style={[this.getStyles().container, style]}>\n        {chart}\n      </View>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}