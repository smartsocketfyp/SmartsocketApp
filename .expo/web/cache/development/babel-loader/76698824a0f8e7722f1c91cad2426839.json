{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\fong\\\\Desktop\\\\code-18122020-combined\\\\Screens\\\\ResetPasswordScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\n\nvar SignUpScreen = function (_React$Component) {\n  _inherits(SignUpScreen, _React$Component);\n\n  var _super = _createSuper(SignUpScreen);\n\n  function SignUpScreen() {\n    var _this;\n\n    _classCallCheck(this, SignUpScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      password: \"\",\n      confirmpassword: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(SignUpScreen, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.Instructions,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }\n      }, \" Reset your password here\"), React.createElement(TextInput, {\n        style: styles.Password,\n        placeholder: \"Password*\",\n        value: this.state.password,\n        onChangeText: function onChangeText(password) {\n          return _this2.setState({\n            password: password\n          });\n        },\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 21\n        }\n      }), React.createElement(TextInput, {\n        style: styles.Confirm_Password,\n        placeholder: \"Confirm Password*\",\n        value: this.state.confirmpassword,\n        onChangeText: function onChangeText(confirmpassword) {\n          return _this2.setState({\n            confirmpassword: confirmpassword\n          });\n        },\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }\n      }), React.createElement(Text, {\n        style: this.state.password != this.state.confirmpassword ? styles.Warning_Message : styles.Password_Accepted,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }\n      }, this.state.password != this.state.confirmpassword ? 'Please Confirm Password again' : 'Password Match!'), React.createElement(TouchableOpacity, {\n        style: styles.Reset_Button,\n        disabled: this.state.password == '' || this.state.confirmpassword == '' || this.state.password != this.state.confirmpassword,\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate(\"Password Reset\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 21\n        }\n      }, React.createElement(Text, {\n        style: styles.Button_Text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }\n      }, \" Reset \"))));\n    }\n  }]);\n\n  return SignUpScreen;\n}(React.Component);\n\nexport { SignUpScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n    backgroundColor: '#fff'\n  },\n  Instructions: {\n    textAlign: 'center',\n    color: \"#000\",\n    fontWeight: \"bold\",\n    fontSize: 25,\n    marginTop: 50,\n    marginBottom: 25\n  },\n  Password: {\n    height: 50,\n    width: 300,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginTop: 25,\n    marginBottom: 25\n  },\n  Confirm_Password: {\n    height: 50,\n    width: 300,\n    borderColor: 'gray',\n    borderWidth: 1,\n    marginTop: 25,\n    marginBottom: 25\n  },\n  Warning_Message: {\n    color: \"#FF0000\",\n    fontWeight: \"600\",\n    marginTop: 25,\n    marginBottom: 25\n  },\n  Password_Accepted: {\n    color: \"#00FF00\",\n    fontWeight: \"600\",\n    marginTop: 25,\n    marginBottom: 25\n  },\n  Reset_Button: {\n    backgroundColor: '#000080',\n    borderRadius: 4,\n    height: 52,\n    width: 300,\n    marginTop: 25,\n    marginBottom: 50,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  Button_Text: {\n    color: \"#FFF\",\n    fontWeight: \"600\"\n  }\n});","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/Screens/ResetPasswordScreen.js"],"names":["React","SignUpScreen","state","password","confirmpassword","styles","container","Instructions","Password","setState","Confirm_Password","Warning_Message","Password_Accepted","Reset_Button","props","navigation","navigate","Button_Text","Component","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","textAlign","color","fontWeight","fontSize","marginTop","marginBottom","height","width","borderColor","borderWidth","borderRadius"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { View, Text, TextInput, TouchableOpacity, ScrollView, StyleSheet} from 'react-native';\r\n//import * as firebase from 'firebase';\r\n//import firebase from 'firebase/app';\r\n// import \"firebase/auth\";\r\n//import { firebase } from '@react-native-firebase/auth';\r\n\r\n\r\nexport default class SignUpScreen extends React.Component {\r\n    state = {\r\n        password : \"\",\r\n        confirmpassword : \"\"\r\n    }\r\n    \r\n    render(){\r\n\r\n\t\treturn(\r\n            <ScrollView>\r\n                <View style={styles.container}>\r\n                    <Text style = {styles.Instructions}> Reset your password here</Text>\r\n\r\n                    <TextInput\r\n                        style={styles.Password}\r\n                        placeholder=\"Password*\"\r\n                        value={this.state.password}\r\n                        onChangeText={password => this.setState({password})}\r\n                        secureTextEntry\r\n                    />\r\n\r\n                    <TextInput\r\n                        style={styles.Confirm_Password}\r\n                        placeholder=\"Confirm Password*\"\r\n                        value={this.state.confirmpassword}\r\n                        onChangeText={confirmpassword => this.setState({confirmpassword})}\r\n                        secureTextEntry\r\n                    />\r\n\r\n                    <Text style={(this.state.password != this.state.confirmpassword) ? styles.Warning_Message : styles.Password_Accepted}> \r\n                        {(this.state.password != this.state.confirmpassword) ? 'Please Confirm Password again' : 'Password Match!'}\r\n                    </Text>\r\n                    \r\n                    <TouchableOpacity\r\n                        style={styles.Reset_Button}\r\n                        disabled = \r\n                        {\r\n                            (this.state.password == '')||\r\n                            (this.state.confirmpassword == '')||\r\n                            (this.state.password != this.state.confirmpassword)\r\n                        } \r\n                        onPress={() => this.props.navigation.navigate(\"Password Reset\")}\r\n                    >\r\n                        <Text style = {styles.Button_Text}> Reset </Text>\r\n                    </TouchableOpacity>\r\n                </View>\r\n            </ScrollView>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex : 1,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#fff',\r\n    },\r\n    \r\n    Instructions: {\r\n        textAlign: 'center',\r\n        color: \"#000\", \r\n        fontWeight: \"bold\", \r\n        fontSize: 25,\r\n        marginTop: 50,\r\n        marginBottom: 25,\r\n    },\r\n\r\n    Password: {\r\n        height: 50, \r\n        width : 300,\r\n        borderColor: 'gray', \r\n        borderWidth: 1,\r\n        marginTop: 25,\r\n        marginBottom: 25,\r\n    },\r\n\r\n    Confirm_Password: {\r\n        height: 50, \r\n        width : 300,\r\n        borderColor: 'gray', \r\n        borderWidth: 1,\r\n        marginTop: 25,\r\n        marginBottom: 25, \r\n    },\r\n\r\n    Warning_Message: {\r\n        color: \"#FF0000\",\r\n        fontWeight: \"600\",\r\n        marginTop: 25,\r\n        marginBottom: 25,\r\n    },\r\n\r\n    Password_Accepted: {\r\n        color: \"#00FF00\",\r\n        fontWeight: \"600\",\r\n        marginTop: 25,\r\n        marginBottom: 25,\r\n    },\r\n\r\n    Reset_Button: {\r\n        backgroundColor : '#000080',\r\n        borderRadius : 4,\r\n        height: 52,\r\n        width : 300,\r\n        marginTop: 25,\r\n        marginBottom: 50,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n\r\n    Button_Text: {\r\n        color: \"#FFF\",\r\n        fontWeight: \"600\"\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}