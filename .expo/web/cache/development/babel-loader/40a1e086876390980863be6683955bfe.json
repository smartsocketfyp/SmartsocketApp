{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport User from \"./User\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport { isAndroid, isBoolean } from \"../../utils\";\nimport { getLogger } from \"../../utils/log\";\nimport { getNativeModule } from \"../../utils/native\";\nimport INTERNALS from \"../../utils/internals\";\nimport ConfirmationResult from \"./phone/ConfirmationResult\";\nimport PhoneAuthListener from \"./phone/PhoneAuthListener\";\nimport AuthSettings from \"./AuthSettings\";\nimport EmailAuthProvider from \"./providers/EmailAuthProvider\";\nimport PhoneAuthProvider from \"./providers/PhoneAuthProvider\";\nimport GoogleAuthProvider from \"./providers/GoogleAuthProvider\";\nimport GithubAuthProvider from \"./providers/GithubAuthProvider\";\nimport OAuthProvider from \"./providers/OAuthProvider\";\nimport TwitterAuthProvider from \"./providers/TwitterAuthProvider\";\nimport FacebookAuthProvider from \"./providers/FacebookAuthProvider\";\nimport AppleAuthProvider from \"./providers/AppleAuthProvider\";\nvar NATIVE_EVENTS = ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'];\nexport var MODULE_NAME = 'RNFirebaseAuth';\nexport var NAMESPACE = 'auth';\n\nvar Auth = function (_ModuleBase) {\n  _inherits(Auth, _ModuleBase);\n\n  var _super = _createSuper(Auth);\n\n  function Auth(app) {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    var NativeModule = getNativeModule(_assertThisInitialized(_this));\n    _this._user = null;\n    _this._settings = null;\n    _this._authResult = false;\n    _this._languageCode = NativeModule.APP_LANGUAGE[app._name] || NativeModule.APP_LANGUAGE['[DEFAULT]'];\n\n    if (NativeModule.APP_USER[app._name]) {\n      _this._setUser(NativeModule.APP_USER[app._name]);\n    }\n\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'auth_state_changed'), function (state) {\n      _this._setUser(state.user);\n\n      SharedEventEmitter.emit(getAppEventName(_assertThisInitialized(_this), 'onAuthStateChanged'), _this._user);\n    });\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'phone_auth_state_changed'), function (event) {\n      var eventKey = \"phone:auth:\" + event.requestKey + \":\" + event.type;\n      SharedEventEmitter.emit(eventKey, event.state);\n    });\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'auth_id_token_changed'), function (auth) {\n      _this._setUser(auth.user);\n\n      SharedEventEmitter.emit(getAppEventName(_assertThisInitialized(_this), 'onIdTokenChanged'), _this._user);\n    });\n    NativeModule.addAuthStateListener();\n    NativeModule.addIdTokenListener();\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"_setUser\",\n    value: function _setUser(user) {\n      this._user = user ? new User(this, user) : null;\n      this._authResult = true;\n      SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n      return this._user;\n    }\n  }, {\n    key: \"_setUserCredential\",\n    value: function _setUserCredential(userCredential) {\n      var user = new User(this, userCredential.user);\n      this._user = user;\n      this._authResult = true;\n      SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n      return {\n        additionalUserInfo: userCredential.additionalUserInfo,\n        user: user\n      };\n    }\n  }, {\n    key: \"onAuthStateChanged\",\n    value: function onAuthStateChanged(listener) {\n      var _this2 = this;\n\n      getLogger(this).info('Creating onAuthStateChanged listener');\n      SharedEventEmitter.addListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n      if (this._authResult) listener(this._user || null);\n      return function () {\n        getLogger(_this2).info('Removing onAuthStateChanged listener');\n        SharedEventEmitter.removeListener(getAppEventName(_this2, 'onAuthStateChanged'), listener);\n      };\n    }\n  }, {\n    key: \"onIdTokenChanged\",\n    value: function onIdTokenChanged(listener) {\n      var _this3 = this;\n\n      getLogger(this).info('Creating onIdTokenChanged listener');\n      SharedEventEmitter.addListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n      if (this._authResult) listener(this._user || null);\n      return function () {\n        getLogger(_this3).info('Removing onIdTokenChanged listener');\n        SharedEventEmitter.removeListener(getAppEventName(_this3, 'onIdTokenChanged'), listener);\n      };\n    }\n  }, {\n    key: \"onUserChanged\",\n    value: function onUserChanged(listener) {\n      var _this4 = this;\n\n      getLogger(this).info('Creating onUserChanged listener');\n      SharedEventEmitter.addListener(getAppEventName(this, 'onUserChanged'), listener);\n      if (this._authResult) listener(this._user || null);\n      return function () {\n        getLogger(_this4).info('Removing onUserChanged listener');\n        SharedEventEmitter.removeListener(getAppEventName(_this4, 'onUserChanged'), listener);\n      };\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      var _this5 = this;\n\n      return getNativeModule(this).signOut().then(function () {\n        _this5._setUser();\n      });\n    }\n  }, {\n    key: \"signInAnonymously\",\n    value: function signInAnonymously() {\n      var _this6 = this;\n\n      return getNativeModule(this).signInAnonymously().then(function (userCredential) {\n        return _this6._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInAnonymouslyAndRetrieveData\",\n    value: function signInAnonymouslyAndRetrieveData() {\n      var _this7 = this;\n\n      console.warn('Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.');\n      return getNativeModule(this).signInAnonymously().then(function (userCredential) {\n        return _this7._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"createUserWithEmailAndPassword\",\n    value: function createUserWithEmailAndPassword(email, password) {\n      var _this8 = this;\n\n      return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this8._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"createUserAndRetrieveDataWithEmailAndPassword\",\n    value: function createUserAndRetrieveDataWithEmailAndPassword(email, password) {\n      var _this9 = this;\n\n      console.warn('Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.');\n      return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this9._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithEmailAndPassword\",\n    value: function signInWithEmailAndPassword(email, password) {\n      var _this10 = this;\n\n      return getNativeModule(this).signInWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this10._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInAndRetrieveDataWithEmailAndPassword\",\n    value: function signInAndRetrieveDataWithEmailAndPassword(email, password) {\n      var _this11 = this;\n\n      console.warn('Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword.');\n      return getNativeModule(this).signInWithEmailAndPassword(email, password).then(function (userCredential) {\n        return _this11._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCustomToken\",\n    value: function signInWithCustomToken(customToken) {\n      var _this12 = this;\n\n      return getNativeModule(this).signInWithCustomToken(customToken).then(function (userCredential) {\n        return _this12._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInAndRetrieveDataWithCustomToken\",\n    value: function signInAndRetrieveDataWithCustomToken(customToken) {\n      var _this13 = this;\n\n      console.warn('Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken.');\n      return getNativeModule(this).signInWithCustomToken(customToken).then(function (userCredential) {\n        return _this13._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithCredential\",\n    value: function signInWithCredential(credential) {\n      var _this14 = this;\n\n      return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {\n        return _this14._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInAndRetrieveDataWithCredential\",\n    value: function signInAndRetrieveDataWithCredential(credential) {\n      var _this15 = this;\n\n      console.warn('Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.');\n      return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(function (userCredential) {\n        return _this15._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"signInWithPhoneNumber\",\n    value: function signInWithPhoneNumber(phoneNumber, forceResend) {\n      var _this16 = this;\n\n      if (isAndroid) {\n        return getNativeModule(this).signInWithPhoneNumber(phoneNumber, forceResend || false).then(function (result) {\n          return new ConfirmationResult(_this16, result.verificationId);\n        });\n      }\n\n      return getNativeModule(this).signInWithPhoneNumber(phoneNumber).then(function (result) {\n        return new ConfirmationResult(_this16, result.verificationId);\n      });\n    }\n  }, {\n    key: \"verifyPhoneNumber\",\n    value: function verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n      var _forceResend = forceResend;\n      var _autoVerifyTimeout = 60;\n\n      if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n        _forceResend = autoVerifyTimeoutOrForceResend;\n      } else {\n        _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n      }\n\n      return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n    }\n  }, {\n    key: \"sendPasswordResetEmail\",\n    value: function sendPasswordResetEmail(email, actionCodeSettings) {\n      return getNativeModule(this).sendPasswordResetEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"sendSignInLinkToEmail\",\n    value: function sendSignInLinkToEmail(email, actionCodeSettings) {\n      return getNativeModule(this).sendSignInLinkToEmail(email, actionCodeSettings);\n    }\n  }, {\n    key: \"isSignInWithEmailLink\",\n    value: function isSignInWithEmailLink(emailLink) {\n      return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n    }\n  }, {\n    key: \"signInWithEmailLink\",\n    value: function signInWithEmailLink(email, emailLink) {\n      var _this17 = this;\n\n      return getNativeModule(this).signInWithEmailLink(email, emailLink).then(function (userCredential) {\n        return _this17._setUserCredential(userCredential);\n      });\n    }\n  }, {\n    key: \"confirmPasswordReset\",\n    value: function confirmPasswordReset(code, newPassword) {\n      return getNativeModule(this).confirmPasswordReset(code, newPassword);\n    }\n  }, {\n    key: \"applyActionCode\",\n    value: function applyActionCode(code) {\n      var _this18 = this;\n\n      return getNativeModule(this).applyActionCode(code).then(function (user) {\n        _this18._setUser(user);\n      });\n    }\n  }, {\n    key: \"checkActionCode\",\n    value: function checkActionCode(code) {\n      return getNativeModule(this).checkActionCode(code);\n    }\n  }, {\n    key: \"fetchSignInMethodsForEmail\",\n    value: function fetchSignInMethodsForEmail(email) {\n      return getNativeModule(this).fetchSignInMethodsForEmail(email);\n    }\n  }, {\n    key: \"verifyPasswordResetCode\",\n    value: function verifyPasswordResetCode(code) {\n      return getNativeModule(this).verifyPasswordResetCode(code);\n    }\n  }, {\n    key: \"getRedirectResult\",\n    value: function getRedirectResult() {\n      throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));\n    }\n  }, {\n    key: \"setPersistence\",\n    value: function setPersistence() {\n      throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));\n    }\n  }, {\n    key: \"signInWithPopup\",\n    value: function signInWithPopup() {\n      throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));\n    }\n  }, {\n    key: \"signInWithRedirect\",\n    value: function signInWithRedirect() {\n      throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect'));\n    }\n  }, {\n    key: \"useDeviceLanguage\",\n    value: function useDeviceLanguage() {\n      throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));\n    }\n  }, {\n    key: \"languageCode\",\n    set: function set(code) {\n      this._languageCode = code;\n      getNativeModule(this).setLanguageCode(code);\n    },\n    get: function get() {\n      return this._languageCode;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      if (!this._settings) {\n        this._settings = new AuthSettings(this);\n      }\n\n      return this._settings;\n    }\n  }, {\n    key: \"currentUser\",\n    get: function get() {\n      return this._user;\n    }\n  }]);\n\n  return Auth;\n}(ModuleBase);\n\nexport { Auth as default };\nexport var statics = {\n  EmailAuthProvider: EmailAuthProvider,\n  PhoneAuthProvider: PhoneAuthProvider,\n  GoogleAuthProvider: GoogleAuthProvider,\n  GithubAuthProvider: GithubAuthProvider,\n  TwitterAuthProvider: TwitterAuthProvider,\n  FacebookAuthProvider: FacebookAuthProvider,\n  AppleAuthProvider: AppleAuthProvider,\n  OAuthProvider: OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  }\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/auth/index.js"],"names":["User","ModuleBase","getAppEventName","SharedEventEmitter","isAndroid","isBoolean","getLogger","getNativeModule","INTERNALS","ConfirmationResult","PhoneAuthListener","AuthSettings","EmailAuthProvider","PhoneAuthProvider","GoogleAuthProvider","GithubAuthProvider","OAuthProvider","TwitterAuthProvider","FacebookAuthProvider","AppleAuthProvider","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Auth","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","NativeModule","_user","_settings","_authResult","_languageCode","APP_LANGUAGE","_name","APP_USER","_setUser","addListener","state","user","emit","event","eventKey","requestKey","type","auth","addAuthStateListener","addIdTokenListener","userCredential","additionalUserInfo","listener","info","removeListener","signOut","then","signInAnonymously","_setUserCredential","console","warn","email","password","createUserWithEmailAndPassword","signInWithEmailAndPassword","customToken","signInWithCustomToken","credential","signInWithCredential","providerId","token","secret","phoneNumber","forceResend","signInWithPhoneNumber","result","verificationId","autoVerifyTimeoutOrForceResend","_forceResend","_autoVerifyTimeout","actionCodeSettings","sendPasswordResetEmail","sendSignInLinkToEmail","emailLink","includes","signInWithEmailLink","code","newPassword","confirmPasswordReset","applyActionCode","checkActionCode","fetchSignInMethodsForEmail","verifyPasswordResetCode","Error","STRINGS","ERROR_UNSUPPORTED_MODULE_METHOD","setLanguageCode","statics","PhoneAuthState","CODE_SENT","AUTO_VERIFY_TIMEOUT","AUTO_VERIFIED","ERROR"],"mappings":";;;;;;;;;;;AAIA,OAAOA,IAAP;AACA,OAAOC,UAAP;AACA,SAASC,eAAT,EAA0BC,kBAA1B;AACA,SAASC,SAAT,EAAoBC,SAApB;AACA,SAASC,SAAT;AACA,SAASC,eAAT;AACA,OAAOC,SAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,YAAP;AAEA,OAAOC,iBAAP;AACA,OAAOC,iBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,kBAAP;AACA,OAAOC,aAAP;AACA,OAAOC,mBAAP;AACA,OAAOC,oBAAP;AACA,OAAOC,iBAAP;AACA,IAAMC,aAAa,GAAG,CAAC,oBAAD,EAAuB,uBAAvB,EAAgD,0BAAhD,CAAtB;AACA,OAAO,IAAMC,WAAW,GAAG,gBAApB;AACP,OAAO,IAAMC,SAAS,GAAG,MAAlB;;IACcC,I;;;;;AACnB,gBAAYC,GAAZ,EAAiB;AAAA;;AAAA;;AACf,8BAAMA,GAAN,EAAW;AACTC,MAAAA,MAAM,EAAEL,aADC;AAETM,MAAAA,UAAU,EAAEL,WAFH;AAGTM,MAAAA,kBAAkB,EAAE,IAHX;AAITC,MAAAA,mBAAmB,EAAE,KAJZ;AAKTC,MAAAA,SAAS,EAAEP;AALF,KAAX;AAOA,QAAMQ,YAAY,GAAGvB,eAAe,+BAApC;AACA,UAAKwB,KAAL,GAAa,IAAb;AACA,UAAKC,SAAL,GAAiB,IAAjB;AACA,UAAKC,WAAL,GAAmB,KAAnB;AACA,UAAKC,aAAL,GAAqBJ,YAAY,CAACK,YAAb,CAA0BX,GAAG,CAACY,KAA9B,KAAwCN,YAAY,CAACK,YAAb,CAA0B,WAA1B,CAA7D;;AAEA,QAAIL,YAAY,CAACO,QAAb,CAAsBb,GAAG,CAACY,KAA1B,CAAJ,EAAsC;AACpC,YAAKE,QAAL,CAAcR,YAAY,CAACO,QAAb,CAAsBb,GAAG,CAACY,KAA1B,CAAd;AACD;;AAEDjC,IAAAA,kBAAkB,CAACoC,WAAnB,CAEArC,eAAe,gCAAO,oBAAP,CAFf,EAE6C,UAAAsC,KAAK,EAAI;AACpD,YAAKF,QAAL,CAAcE,KAAK,CAACC,IAApB;;AAEAtC,MAAAA,kBAAkB,CAACuC,IAAnB,CAAwBxC,eAAe,gCAAO,oBAAP,CAAvC,EAAqE,MAAK6B,KAA1E;AACD,KAND;AAOA5B,IAAAA,kBAAkB,CAACoC,WAAnB,CAEArC,eAAe,gCAAO,0BAAP,CAFf,EAEmD,UAAAyC,KAAK,EAAI;AAC1D,UAAMC,QAAQ,mBAAiBD,KAAK,CAACE,UAAvB,SAAqCF,KAAK,CAACG,IAAzD;AACA3C,MAAAA,kBAAkB,CAACuC,IAAnB,CAAwBE,QAAxB,EAAkCD,KAAK,CAACH,KAAxC;AACD,KALD;AAMArC,IAAAA,kBAAkB,CAACoC,WAAnB,CAEArC,eAAe,gCAAO,uBAAP,CAFf,EAEgD,UAAA6C,IAAI,EAAI;AACtD,YAAKT,QAAL,CAAcS,IAAI,CAACN,IAAnB;;AAEAtC,MAAAA,kBAAkB,CAACuC,IAAnB,CAAwBxC,eAAe,gCAAO,kBAAP,CAAvC,EAAmE,MAAK6B,KAAxE;AACD,KAND;AAOAD,IAAAA,YAAY,CAACkB,oBAAb;AACAlB,IAAAA,YAAY,CAACmB,kBAAb;AAvCe;AAwChB;;;;6BAEQR,I,EAAM;AACb,WAAKV,KAAL,GAAaU,IAAI,GAAG,IAAIzC,IAAJ,CAAS,IAAT,EAAeyC,IAAf,CAAH,GAA0B,IAA3C;AACA,WAAKR,WAAL,GAAmB,IAAnB;AACA9B,MAAAA,kBAAkB,CAACuC,IAAnB,CAAwBxC,eAAe,CAAC,IAAD,EAAO,eAAP,CAAvC,EAAgE,KAAK6B,KAArE;AACA,aAAO,KAAKA,KAAZ;AACD;;;uCAEkBmB,c,EAAgB;AACjC,UAAMT,IAAI,GAAG,IAAIzC,IAAJ,CAAS,IAAT,EAAekD,cAAc,CAACT,IAA9B,CAAb;AACA,WAAKV,KAAL,GAAaU,IAAb;AACA,WAAKR,WAAL,GAAmB,IAAnB;AACA9B,MAAAA,kBAAkB,CAACuC,IAAnB,CAAwBxC,eAAe,CAAC,IAAD,EAAO,eAAP,CAAvC,EAAgE,KAAK6B,KAArE;AACA,aAAO;AACLoB,QAAAA,kBAAkB,EAAED,cAAc,CAACC,kBAD9B;AAELV,QAAAA,IAAI,EAAJA;AAFK,OAAP;AAID;;;uCAWkBW,Q,EAAU;AAAA;;AAC3B9C,MAAAA,SAAS,CAAC,IAAD,CAAT,CAAgB+C,IAAhB,CAAqB,sCAArB;AACAlD,MAAAA,kBAAkB,CAACoC,WAAnB,CAA+BrC,eAAe,CAAC,IAAD,EAAO,oBAAP,CAA9C,EAA4EkD,QAA5E;AACA,UAAI,KAAKnB,WAAT,EAAsBmB,QAAQ,CAAC,KAAKrB,KAAL,IAAc,IAAf,CAAR;AACtB,aAAO,YAAM;AACXzB,QAAAA,SAAS,CAAC,MAAD,CAAT,CAAgB+C,IAAhB,CAAqB,sCAArB;AACAlD,QAAAA,kBAAkB,CAACmD,cAAnB,CAAkCpD,eAAe,CAAC,MAAD,EAAO,oBAAP,CAAjD,EAA+EkD,QAA/E;AACD,OAHD;AAID;;;qCAOgBA,Q,EAAU;AAAA;;AACzB9C,MAAAA,SAAS,CAAC,IAAD,CAAT,CAAgB+C,IAAhB,CAAqB,oCAArB;AACAlD,MAAAA,kBAAkB,CAACoC,WAAnB,CAA+BrC,eAAe,CAAC,IAAD,EAAO,kBAAP,CAA9C,EAA0EkD,QAA1E;AACA,UAAI,KAAKnB,WAAT,EAAsBmB,QAAQ,CAAC,KAAKrB,KAAL,IAAc,IAAf,CAAR;AACtB,aAAO,YAAM;AACXzB,QAAAA,SAAS,CAAC,MAAD,CAAT,CAAgB+C,IAAhB,CAAqB,oCAArB;AACAlD,QAAAA,kBAAkB,CAACmD,cAAnB,CAAkCpD,eAAe,CAAC,MAAD,EAAO,kBAAP,CAAjD,EAA6EkD,QAA7E;AACD,OAHD;AAID;;;kCAOaA,Q,EAAU;AAAA;;AACtB9C,MAAAA,SAAS,CAAC,IAAD,CAAT,CAAgB+C,IAAhB,CAAqB,iCAArB;AACAlD,MAAAA,kBAAkB,CAACoC,WAAnB,CAA+BrC,eAAe,CAAC,IAAD,EAAO,eAAP,CAA9C,EAAuEkD,QAAvE;AACA,UAAI,KAAKnB,WAAT,EAAsBmB,QAAQ,CAAC,KAAKrB,KAAL,IAAc,IAAf,CAAR;AACtB,aAAO,YAAM;AACXzB,QAAAA,SAAS,CAAC,MAAD,CAAT,CAAgB+C,IAAhB,CAAqB,iCAArB;AACAlD,QAAAA,kBAAkB,CAACmD,cAAnB,CAAkCpD,eAAe,CAAC,MAAD,EAAO,eAAP,CAAjD,EAA0EkD,QAA1E;AACD,OAHD;AAID;;;8BAOS;AAAA;;AACR,aAAO7C,eAAe,CAAC,IAAD,CAAf,CAAsBgD,OAAtB,GAAgCC,IAAhC,CAAqC,YAAM;AAChD,QAAA,MAAI,CAAClB,QAAL;AACD,OAFM,CAAP;AAGD;;;wCAQmB;AAAA;;AAClB,aAAO/B,eAAe,CAAC,IAAD,CAAf,CAAsBkD,iBAAtB,GAA0CD,IAA1C,CAA+C,UAAAN,cAAc;AAAA,eAAI,MAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA7D,CAAP;AACD;;;uDASkC;AAAA;;AACjCS,MAAAA,OAAO,CAACC,IAAR,CAAa,4EAAb;AACA,aAAOrD,eAAe,CAAC,IAAD,CAAf,CAAsBkD,iBAAtB,GAA0CD,IAA1C,CAA+C,UAAAN,cAAc;AAAA,eAAI,MAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA7D,CAAP;AACD;;;mDAU8BW,K,EAAOC,Q,EAAU;AAAA;;AAC9C,aAAOvD,eAAe,CAAC,IAAD,CAAf,CAAsBwD,8BAAtB,CAAqDF,KAArD,EAA4DC,QAA5D,EAAsEN,IAAtE,CAA2E,UAAAN,cAAc;AAAA,eAAI,MAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAAzF,CAAP;AACD;;;kEAW6CW,K,EAAOC,Q,EAAU;AAAA;;AAC7DH,MAAAA,OAAO,CAACC,IAAR,CAAa,sGAAb;AACA,aAAOrD,eAAe,CAAC,IAAD,CAAf,CAAsBwD,8BAAtB,CAAqDF,KAArD,EAA4DC,QAA5D,EAAsEN,IAAtE,CAA2E,UAAAN,cAAc;AAAA,eAAI,MAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAAzF,CAAP;AACD;;;+CAU0BW,K,EAAOC,Q,EAAU;AAAA;;AAC1C,aAAOvD,eAAe,CAAC,IAAD,CAAf,CAAsByD,0BAAtB,CAAiDH,KAAjD,EAAwDC,QAAxD,EAAkEN,IAAlE,CAAuE,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAArF,CAAP;AACD;;;8DAWyCW,K,EAAOC,Q,EAAU;AAAA;;AACzDH,MAAAA,OAAO,CAACC,IAAR,CAAa,8FAAb;AACA,aAAOrD,eAAe,CAAC,IAAD,CAAf,CAAsByD,0BAAtB,CAAiDH,KAAjD,EAAwDC,QAAxD,EAAkEN,IAAlE,CAAuE,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAArF,CAAP;AACD;;;0CASqBe,W,EAAa;AAAA;;AACjC,aAAO1D,eAAe,CAAC,IAAD,CAAf,CAAsB2D,qBAAtB,CAA4CD,WAA5C,EAAyDT,IAAzD,CAA8D,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA5E,CAAP;AACD;;;yDAUoCe,W,EAAa;AAAA;;AAChDN,MAAAA,OAAO,CAACC,IAAR,CAAa,oFAAb;AACA,aAAOrD,eAAe,CAAC,IAAD,CAAf,CAAsB2D,qBAAtB,CAA4CD,WAA5C,EAAyDT,IAAzD,CAA8D,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA5E,CAAP;AACD;;;yCAQoBiB,U,EAAY;AAAA;;AAC/B,aAAO5D,eAAe,CAAC,IAAD,CAAf,CAAsB6D,oBAAtB,CAA2CD,UAAU,CAACE,UAAtD,EAAkEF,UAAU,CAACG,KAA7E,EAAoFH,UAAU,CAACI,MAA/F,EAAuGf,IAAvG,CAA4G,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA1H,CAAP;AACD;;;wDASmCiB,U,EAAY;AAAA;;AAC9CR,MAAAA,OAAO,CAACC,IAAR,CAAa,kFAAb;AACA,aAAOrD,eAAe,CAAC,IAAD,CAAf,CAAsB6D,oBAAtB,CAA2CD,UAAU,CAACE,UAAtD,EAAkEF,UAAU,CAACG,KAA7E,EAAoFH,UAAU,CAACI,MAA/F,EAAuGf,IAAvG,CAA4G,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA1H,CAAP;AACD;;;0CAOqBsB,W,EAAaC,W,EAAa;AAAA;;AAC9C,UAAIrE,SAAJ,EAAe;AACb,eAAOG,eAAe,CAAC,IAAD,CAAf,CAAsBmE,qBAAtB,CAA4CF,WAA5C,EAAyDC,WAAW,IAAI,KAAxE,EAA+EjB,IAA/E,CAAoF,UAAAmB,MAAM;AAAA,iBAAI,IAAIlE,kBAAJ,CAAuB,OAAvB,EAA6BkE,MAAM,CAACC,cAApC,CAAJ;AAAA,SAA1F,CAAP;AACD;;AAED,aAAOrE,eAAe,CAAC,IAAD,CAAf,CAAsBmE,qBAAtB,CAA4CF,WAA5C,EAAyDhB,IAAzD,CAA8D,UAAAmB,MAAM;AAAA,eAAI,IAAIlE,kBAAJ,CAAuB,OAAvB,EAA6BkE,MAAM,CAACC,cAApC,CAAJ;AAAA,OAApE,CAAP;AACD;;;sCAaiBJ,W,EAAaK,8B,EAAgCJ,W,EAAa;AAC1E,UAAIK,YAAY,GAAGL,WAAnB;AACA,UAAIM,kBAAkB,GAAG,EAAzB;;AAEA,UAAI1E,SAAS,CAACwE,8BAAD,CAAb,EAA+C;AAC7CC,QAAAA,YAAY,GAAGD,8BAAf;AACD,OAFD,MAEO;AACLE,QAAAA,kBAAkB,GAAGF,8BAArB;AACD;;AAED,aAAO,IAAInE,iBAAJ,CAAsB,IAAtB,EAA4B8D,WAA5B,EAAyCO,kBAAzC,EAA6DD,YAA7D,CAAP;AACD;;;2CAQsBjB,K,EAAOmB,kB,EAAoB;AAChD,aAAOzE,eAAe,CAAC,IAAD,CAAf,CAAsB0E,sBAAtB,CAA6CpB,KAA7C,EAAoDmB,kBAApD,CAAP;AACD;;;0CAQqBnB,K,EAAOmB,kB,EAAoB;AAC/C,aAAOzE,eAAe,CAAC,IAAD,CAAf,CAAsB2E,qBAAtB,CAA4CrB,KAA5C,EAAmDmB,kBAAnD,CAAP;AACD;;;0CAOqBG,S,EAAW;AAC/B,aAAO,OAAOA,SAAP,KAAqB,QAArB,KAAkCA,SAAS,CAACC,QAAV,CAAmB,aAAnB,KAAqCD,SAAS,CAACC,QAAV,CAAmB,eAAnB,CAAvE,MAAgHD,SAAS,CAACC,QAAV,CAAmB,UAAnB,KAAkCD,SAAS,CAACC,QAAV,CAAmB,YAAnB,CAAlJ,CAAP;AACD;;;wCAUmBvB,K,EAAOsB,S,EAAW;AAAA;;AACpC,aAAO5E,eAAe,CAAC,IAAD,CAAf,CAAsB8E,mBAAtB,CAA0CxB,KAA1C,EAAiDsB,SAAjD,EAA4D3B,IAA5D,CAAiE,UAAAN,cAAc;AAAA,eAAI,OAAI,CAACQ,kBAAL,CAAwBR,cAAxB,CAAJ;AAAA,OAA/E,CAAP;AACD;;;yCAWoBoC,I,EAAMC,W,EAAa;AACtC,aAAOhF,eAAe,CAAC,IAAD,CAAf,CAAsBiF,oBAAtB,CAA2CF,IAA3C,EAAiDC,WAAjD,CAAP;AACD;;;oCAUeD,I,EAAM;AAAA;;AACpB,aAAO/E,eAAe,CAAC,IAAD,CAAf,CAAsBkF,eAAtB,CAAsCH,IAAtC,EAA4C9B,IAA5C,CAAiD,UAAAf,IAAI,EAAI;AAC9D,QAAA,OAAI,CAACH,QAAL,CAAcG,IAAd;AACD,OAFM,CAAP;AAGD;;;oCAUe6C,I,EAAM;AACpB,aAAO/E,eAAe,CAAC,IAAD,CAAf,CAAsBmF,eAAtB,CAAsCJ,IAAtC,CAAP;AACD;;;+CAO0BzB,K,EAAO;AAChC,aAAOtD,eAAe,CAAC,IAAD,CAAf,CAAsBoF,0BAAtB,CAAiD9B,KAAjD,CAAP;AACD;;;4CAEuByB,I,EAAM;AAC5B,aAAO/E,eAAe,CAAC,IAAD,CAAf,CAAsBqF,uBAAtB,CAA8CN,IAA9C,CAAP;AACD;;;wCAoDmB;AAClB,YAAM,IAAIO,KAAJ,CAAUrF,SAAS,CAACsF,OAAV,CAAkBC,+BAAlB,CAAkD,MAAlD,EAA0D,mBAA1D,CAAV,CAAN;AACD;;;qCAEgB;AACf,YAAM,IAAIF,KAAJ,CAAUrF,SAAS,CAACsF,OAAV,CAAkBC,+BAAlB,CAAkD,MAAlD,EAA0D,gBAA1D,CAAV,CAAN;AACD;;;sCAEiB;AAChB,YAAM,IAAIF,KAAJ,CAAUrF,SAAS,CAACsF,OAAV,CAAkBC,+BAAlB,CAAkD,MAAlD,EAA0D,iBAA1D,CAAV,CAAN;AACD;;;yCAEoB;AACnB,YAAM,IAAIF,KAAJ,CAAUrF,SAAS,CAACsF,OAAV,CAAkBC,+BAAlB,CAAkD,MAAlD,EAA0D,oBAA1D,CAAV,CAAN;AACD;;;wCAGmB;AAClB,YAAM,IAAIF,KAAJ,CAAUrF,SAAS,CAACsF,OAAV,CAAkBC,+BAAlB,CAAkD,MAAlD,EAA0D,mBAA1D,CAAV,CAAN;AACD;;;sBA/DgBT,I,EAAM;AACrB,WAAKpD,aAAL,GAAqBoD,IAArB;AACA/E,MAAAA,eAAe,CAAC,IAAD,CAAf,CAAsByF,eAAtB,CAAsCV,IAAtC;AACD,K;wBAQkB;AACjB,aAAO,KAAKpD,aAAZ;AACD;;;wBASc;AACb,UAAI,CAAC,KAAKF,SAAV,EAAqB;AAEnB,aAAKA,SAAL,GAAiB,IAAIrB,YAAJ,CAAiB,IAAjB,CAAjB;AACD;;AAED,aAAO,KAAKqB,SAAZ;AACD;;;wBAOiB;AAChB,aAAO,KAAKD,KAAZ;AACD;;;;EA/Z+B9B,U;;SAAbsB,I;AA2brB,OAAO,IAAM0E,OAAO,GAAG;AACrBrF,EAAAA,iBAAiB,EAAjBA,iBADqB;AAErBC,EAAAA,iBAAiB,EAAjBA,iBAFqB;AAGrBC,EAAAA,kBAAkB,EAAlBA,kBAHqB;AAIrBC,EAAAA,kBAAkB,EAAlBA,kBAJqB;AAKrBE,EAAAA,mBAAmB,EAAnBA,mBALqB;AAMrBC,EAAAA,oBAAoB,EAApBA,oBANqB;AAOrBC,EAAAA,iBAAiB,EAAjBA,iBAPqB;AAQrBH,EAAAA,aAAa,EAAbA,aARqB;AASrBkF,EAAAA,cAAc,EAAE;AACdC,IAAAA,SAAS,EAAE,MADG;AAEdC,IAAAA,mBAAmB,EAAE,SAFP;AAGdC,IAAAA,aAAa,EAAE,UAHD;AAIdC,IAAAA,KAAK,EAAE;AAJO;AATK,CAAhB","sourcesContent":["/**\n * \n * Auth representation wrapper\n */\nimport User from './User';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { isAndroid, isBoolean } from '../../utils';\nimport { getLogger } from '../../utils/log';\nimport { getNativeModule } from '../../utils/native';\nimport INTERNALS from '../../utils/internals';\nimport ConfirmationResult from './phone/ConfirmationResult';\nimport PhoneAuthListener from './phone/PhoneAuthListener';\nimport AuthSettings from './AuthSettings'; // providers\n\nimport EmailAuthProvider from './providers/EmailAuthProvider';\nimport PhoneAuthProvider from './providers/PhoneAuthProvider';\nimport GoogleAuthProvider from './providers/GoogleAuthProvider';\nimport GithubAuthProvider from './providers/GithubAuthProvider';\nimport OAuthProvider from './providers/OAuthProvider';\nimport TwitterAuthProvider from './providers/TwitterAuthProvider';\nimport FacebookAuthProvider from './providers/FacebookAuthProvider';\nimport AppleAuthProvider from './providers/AppleAuthProvider';\nconst NATIVE_EVENTS = ['auth_state_changed', 'auth_id_token_changed', 'phone_auth_state_changed'];\nexport const MODULE_NAME = 'RNFirebaseAuth';\nexport const NAMESPACE = 'auth';\nexport default class Auth extends ModuleBase {\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    const NativeModule = getNativeModule(this);\n    this._user = null;\n    this._settings = null;\n    this._authResult = false;\n    this._languageCode = NativeModule.APP_LANGUAGE[app._name] || NativeModule.APP_LANGUAGE['[DEFAULT]'];\n\n    if (NativeModule.APP_USER[app._name]) {\n      this._setUser(NativeModule.APP_USER[app._name]);\n    }\n\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onAuthStateChanged\n    getAppEventName(this, 'auth_state_changed'), state => {\n      this._setUser(state.user);\n\n      SharedEventEmitter.emit(getAppEventName(this, 'onAuthStateChanged'), this._user);\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public events based on event.type\n    getAppEventName(this, 'phone_auth_state_changed'), event => {\n      const eventKey = `phone:auth:${event.requestKey}:${event.type}`;\n      SharedEventEmitter.emit(eventKey, event.state);\n    });\n    SharedEventEmitter.addListener( // sub to internal native event - this fans out to\n    // public event name: onIdTokenChanged\n    getAppEventName(this, 'auth_id_token_changed'), auth => {\n      this._setUser(auth.user);\n\n      SharedEventEmitter.emit(getAppEventName(this, 'onIdTokenChanged'), this._user);\n    });\n    NativeModule.addAuthStateListener();\n    NativeModule.addIdTokenListener();\n  }\n\n  _setUser(user) {\n    this._user = user ? new User(this, user) : null;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return this._user;\n  }\n\n  _setUserCredential(userCredential) {\n    const user = new User(this, userCredential.user);\n    this._user = user;\n    this._authResult = true;\n    SharedEventEmitter.emit(getAppEventName(this, 'onUserChanged'), this._user);\n    return {\n      additionalUserInfo: userCredential.additionalUserInfo,\n      user\n    };\n  }\n  /*\n   * WEB API\n   */\n\n  /**\n   * Listen for auth changes.\n   * @param listener\n   */\n\n\n  onAuthStateChanged(listener) {\n    getLogger(this).info('Creating onAuthStateChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onAuthStateChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onAuthStateChanged'), listener);\n    };\n  }\n  /**\n   * Listen for id token changes.\n   * @param listener\n   */\n\n\n  onIdTokenChanged(listener) {\n    getLogger(this).info('Creating onIdTokenChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onIdTokenChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onIdTokenChanged'), listener);\n    };\n  }\n  /**\n   * Listen for user changes.\n   * @param listener\n   */\n\n\n  onUserChanged(listener) {\n    getLogger(this).info('Creating onUserChanged listener');\n    SharedEventEmitter.addListener(getAppEventName(this, 'onUserChanged'), listener);\n    if (this._authResult) listener(this._user || null);\n    return () => {\n      getLogger(this).info('Removing onUserChanged listener');\n      SharedEventEmitter.removeListener(getAppEventName(this, 'onUserChanged'), listener);\n    };\n  }\n  /**\n   * Sign the current user out\n   * @return {Promise}\n   */\n\n\n  signOut() {\n    return getNativeModule(this).signOut().then(() => {\n      this._setUser();\n    });\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInAnonymously() {\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in anonymously\n   *\n   * @deprecated Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInAnonymouslyAndRetrieveData() {\n    console.warn('Deprecated signInAnonymouslyAndRetrieveData in favor of signInAnonymously.');\n    return getNativeModule(this).signInAnonymously().then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n\n  createUserWithEmailAndPassword(email, password) {\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Create a user with the email/password functionality\n   *\n   * @deprecated Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise indicating the completion\n   */\n\n\n  createUserAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated createUserAndRetrieveDataWithEmailAndPassword in favor of createUserWithEmailAndPassword.');\n    return getNativeModule(this).createUserWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n\n  signInWithEmailAndPassword(email, password) {\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign a user in with email/password\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword\n   * @param  {string} email    The user's email\n   * @param  {string} password The user's password\n   * @return {Promise}         A promise that is resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithEmailAndPassword(email, password) {\n    console.warn('Deprecated signInAndRetrieveDataWithEmailAndPassword in favor of signInWithEmailAndPassword.');\n    return getNativeModule(this).signInWithEmailAndPassword(email, password).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n\n  signInWithCustomToken(customToken) {\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a custom auth token\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken\n   * @param  {string} customToken  A self-signed custom auth token.\n   * @return {Promise}             A promise resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithCustomToken(customToken) {\n    console.warn('Deprecated signInAndRetrieveDataWithCustomToken in favor of signInWithCustomToken.');\n    return getNativeModule(this).signInWithCustomToken(customToken).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n\n  signInWithCredential(credential) {\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Sign the user in with a third-party authentication provider\n   *\n   * @deprecated Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.\n   * @return {Promise}           A promise resolved upon completion\n   */\n\n\n  signInAndRetrieveDataWithCredential(credential) {\n    console.warn('Deprecated signInAndRetrieveDataWithCredential in favor of signInWithCredential.');\n    return getNativeModule(this).signInWithCredential(credential.providerId, credential.token, credential.secret).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Asynchronously signs in using a phone number.\n   *\n   */\n\n\n  signInWithPhoneNumber(phoneNumber, forceResend) {\n    if (isAndroid) {\n      return getNativeModule(this).signInWithPhoneNumber(phoneNumber, forceResend || false).then(result => new ConfirmationResult(this, result.verificationId));\n    }\n\n    return getNativeModule(this).signInWithPhoneNumber(phoneNumber).then(result => new ConfirmationResult(this, result.verificationId));\n  }\n  /**\n   * Returns a PhoneAuthListener to listen to phone verification events,\n   * on the final completion event a PhoneAuthCredential can be generated for\n   * authentication purposes.\n   *\n   * @param phoneNumber\n   * @param autoVerifyTimeoutOrForceResend Android Only\n   * @param forceResend Android Only\n   * @returns {PhoneAuthListener}\n   */\n\n\n  verifyPhoneNumber(phoneNumber, autoVerifyTimeoutOrForceResend, forceResend) {\n    let _forceResend = forceResend;\n    let _autoVerifyTimeout = 60;\n\n    if (isBoolean(autoVerifyTimeoutOrForceResend)) {\n      _forceResend = autoVerifyTimeoutOrForceResend;\n    } else {\n      _autoVerifyTimeout = autoVerifyTimeoutOrForceResend;\n    }\n\n    return new PhoneAuthListener(this, phoneNumber, _autoVerifyTimeout, _forceResend);\n  }\n  /**\n   * Send reset password instructions via email\n   * @param {string} email The email to send password reset instructions\n   * @param actionCodeSettings\n   */\n\n\n  sendPasswordResetEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendPasswordResetEmail(email, actionCodeSettings);\n  }\n  /**\n   * Sends a sign-in email link to the user with the specified email\n   * @param {string} email The email account to sign in with.\n   * @param actionCodeSettings\n   */\n\n\n  sendSignInLinkToEmail(email, actionCodeSettings) {\n    return getNativeModule(this).sendSignInLinkToEmail(email, actionCodeSettings);\n  }\n  /**\n   * Checks if an incoming link is a sign-in with email link.\n   * @param {string} emailLink Sign-in email link.\n   */\n\n\n  isSignInWithEmailLink(emailLink) {\n    return typeof emailLink === 'string' && (emailLink.includes('mode=signIn') || emailLink.includes('mode%3DsignIn')) && (emailLink.includes('oobCode=') || emailLink.includes('oobCode%3D'));\n  }\n  /**\n   * Asynchronously signs in using an email and sign-in email link.\n   *\n   * @param {string} email The email account to sign in with.\n   * @param {string} emailLink Sign-in email link.\n   * @return {Promise} A promise resolved upon completion\n   */\n\n\n  signInWithEmailLink(email, emailLink) {\n    return getNativeModule(this).signInWithEmailLink(email, emailLink).then(userCredential => this._setUserCredential(userCredential));\n  }\n  /**\n   * Completes the password reset process, given a confirmation code and new password.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#confirmPasswordReset\n   * @param code\n   * @param newPassword\n   * @return {Promise.<Null>}\n   */\n\n\n  confirmPasswordReset(code, newPassword) {\n    return getNativeModule(this).confirmPasswordReset(code, newPassword);\n  }\n  /**\n   * Applies a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#applyActionCode\n   * @param code\n   * @return {Promise.<Null>}\n   */\n\n\n  applyActionCode(code) {\n    return getNativeModule(this).applyActionCode(code).then(user => {\n      this._setUser(user);\n    });\n  }\n  /**\n   * Checks a verification code sent to the user by email or other out-of-band mechanism.\n   *\n   * @link https://firebase.google.com/docs/reference/js/firebase.auth.Auth#checkActionCode\n   * @param code\n   * @return {Promise.<any>|Promise<ActionCodeInfo>}\n   */\n\n\n  checkActionCode(code) {\n    return getNativeModule(this).checkActionCode(code);\n  }\n  /**\n   * Returns a list of authentication methods that can be used to sign in a given user (identified by its main email address).\n   * @return {Promise}\n   */\n\n\n  fetchSignInMethodsForEmail(email) {\n    return getNativeModule(this).fetchSignInMethodsForEmail(email);\n  }\n\n  verifyPasswordResetCode(code) {\n    return getNativeModule(this).verifyPasswordResetCode(code);\n  }\n  /**\n   * Sets the language for the auth module.\n   *\n   * @param code\n   */\n\n\n  set languageCode(code) {\n    this._languageCode = code;\n    getNativeModule(this).setLanguageCode(code);\n  }\n  /**\n   * The language for the auth module.\n   *\n   * @return {string}\n   */\n\n\n  get languageCode() {\n    return this._languageCode;\n  }\n  /**\n   * The current Auth instance's settings. This is used to edit/read configuration\n   * related options like app verification mode for phone authentication.\n   *\n   * @return {AuthSettings}\n   */\n\n\n  get settings() {\n    if (!this._settings) {\n      // lazy initialize\n      this._settings = new AuthSettings(this);\n    }\n\n    return this._settings;\n  }\n  /**\n   * Get the currently signed in user\n   * @return {Promise}\n   */\n\n\n  get currentUser() {\n    return this._user;\n  }\n  /**\n   * KNOWN UNSUPPORTED METHODS\n   */\n\n\n  getRedirectResult() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'getRedirectResult'));\n  }\n\n  setPersistence() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'setPersistence'));\n  }\n\n  signInWithPopup() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithPopup'));\n  }\n\n  signInWithRedirect() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'signInWithRedirect'));\n  } // firebase issue - https://github.com/invertase/react-native-firebase/pull/655#issuecomment-349904680\n\n\n  useDeviceLanguage() {\n    throw new Error(INTERNALS.STRINGS.ERROR_UNSUPPORTED_MODULE_METHOD('auth', 'useDeviceLanguage'));\n  }\n\n}\nexport const statics = {\n  EmailAuthProvider,\n  PhoneAuthProvider,\n  GoogleAuthProvider,\n  GithubAuthProvider,\n  TwitterAuthProvider,\n  FacebookAuthProvider,\n  AppleAuthProvider,\n  OAuthProvider,\n  PhoneAuthState: {\n    CODE_SENT: 'sent',\n    AUTO_VERIFY_TIMEOUT: 'timeout',\n    AUTO_VERIFIED: 'verified',\n    ERROR: 'error'\n  }\n};"]},"metadata":{},"sourceType":"module"}