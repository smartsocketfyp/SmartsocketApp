{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport NativeModules from \"react-native-web/dist/exports/NativeModules\";\nimport StorageRef from \"./reference\";\nimport { getAppEventName, SharedEventEmitter } from \"../../utils/events\";\nimport { getLogger } from \"../../utils/log\";\nimport { stripTrailingSlash } from \"../../utils\";\nimport ModuleBase from \"../../utils/ModuleBase\";\nimport { getNativeModule } from \"../../utils/native\";\nvar FirebaseStorage = NativeModules.RNFirebaseStorage;\nvar NATIVE_EVENTS = ['storage_event', 'storage_error'];\nexport var MODULE_NAME = 'RNFirebaseStorage';\nexport var NAMESPACE = 'storage';\n\nvar Storage = function (_ModuleBase) {\n  _inherits(Storage, _ModuleBase);\n\n  var _super = _createSuper(Storage);\n\n  function Storage(app) {\n    var _this;\n\n    _classCallCheck(this, Storage);\n\n    _this = _super.call(this, app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'storage_event'), _this._handleStorageEvent.bind(_assertThisInitialized(_this)));\n    SharedEventEmitter.addListener(getAppEventName(_assertThisInitialized(_this), 'storage_error'), _this._handleStorageEvent.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Storage, [{\n    key: \"ref\",\n    value: function ref(path) {\n      return new StorageRef(this, path);\n    }\n  }, {\n    key: \"refFromURL\",\n    value: function refFromURL(url) {\n      return new StorageRef(this, \"url::\" + url);\n    }\n  }, {\n    key: \"setMaxOperationRetryTime\",\n    value: function setMaxOperationRetryTime(time) {\n      getNativeModule(this).setMaxOperationRetryTime(time);\n    }\n  }, {\n    key: \"setMaxUploadRetryTime\",\n    value: function setMaxUploadRetryTime(time) {\n      getNativeModule(this).setMaxUploadRetryTime(time);\n    }\n  }, {\n    key: \"setMaxDownloadRetryTime\",\n    value: function setMaxDownloadRetryTime(time) {\n      getNativeModule(this).setMaxDownloadRetryTime(time);\n    }\n  }, {\n    key: \"_getSubEventName\",\n    value: function _getSubEventName(path, eventName) {\n      return getAppEventName(this, path + \"-\" + eventName);\n    }\n  }, {\n    key: \"_handleStorageEvent\",\n    value: function _handleStorageEvent(event) {\n      var path = event.path,\n          eventName = event.eventName;\n      var body = event.body || {};\n      getLogger(this).debug('_handleStorageEvent: ', path, eventName, body);\n      SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n    }\n  }, {\n    key: \"_handleStorageError\",\n    value: function _handleStorageError(err) {\n      var path = err.path,\n          eventName = err.eventName;\n      var body = err.body || {};\n      getLogger(this).debug('_handleStorageError ->', err);\n      SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n    }\n  }, {\n    key: \"_addListener\",\n    value: function _addListener(path, eventName, cb) {\n      SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n    }\n  }, {\n    key: \"_removeListener\",\n    value: function _removeListener(path, eventName, origCB) {\n      SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n    }\n  }]);\n\n  return Storage;\n}(ModuleBase);\n\nexport { Storage as default };\nexport var statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: stripTrailingSlash(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: stripTrailingSlash(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: stripTrailingSlash(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};","map":{"version":3,"sources":["C:/Users/fong/Desktop/code-18122020-combined/node_modules/react-native-firebase/dist/modules/storage/index.js"],"names":["StorageRef","getAppEventName","SharedEventEmitter","getLogger","stripTrailingSlash","ModuleBase","getNativeModule","FirebaseStorage","NativeModules","RNFirebaseStorage","NATIVE_EVENTS","MODULE_NAME","NAMESPACE","Storage","app","events","moduleName","hasMultiAppSupport","hasCustomUrlSupport","namespace","addListener","_handleStorageEvent","bind","path","url","time","setMaxOperationRetryTime","setMaxUploadRetryTime","setMaxDownloadRetryTime","eventName","event","body","debug","emit","_getSubEventName","err","cb","origCB","removeListener","statics","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELLED","ERROR","Native","MAIN_BUNDLE_PATH","CACHES_DIRECTORY_PATH","DOCUMENT_DIRECTORY_PATH","EXTERNAL_DIRECTORY_PATH","EXTERNAL_STORAGE_DIRECTORY_PATH","TEMP_DIRECTORY_PATH","LIBRARY_DIRECTORY_PATH","FILETYPE_REGULAR","FILETYPE_DIRECTORY"],"mappings":"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","sourcesContent":["/**\n * \n * Storage representation wrapper\n */\nimport { NativeModules } from 'react-native';\nimport StorageRef from './reference';\nimport { getAppEventName, SharedEventEmitter } from '../../utils/events';\nimport { getLogger } from '../../utils/log';\nimport { stripTrailingSlash } from '../../utils';\nimport ModuleBase from '../../utils/ModuleBase';\nimport { getNativeModule } from '../../utils/native';\nconst FirebaseStorage = NativeModules.RNFirebaseStorage;\nconst NATIVE_EVENTS = ['storage_event', 'storage_error'];\nexport const MODULE_NAME = 'RNFirebaseStorage';\nexport const NAMESPACE = 'storage';\nexport default class Storage extends ModuleBase {\n  /**\n   *\n   * @param app\n   * @param options\n   */\n  constructor(app) {\n    super(app, {\n      events: NATIVE_EVENTS,\n      moduleName: MODULE_NAME,\n      hasMultiAppSupport: true,\n      hasCustomUrlSupport: false,\n      namespace: NAMESPACE\n    });\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_event'), this._handleStorageEvent.bind(this));\n    SharedEventEmitter.addListener(getAppEventName(this, 'storage_error'), this._handleStorageEvent.bind(this));\n  }\n  /**\n   * Returns a reference for the given path in the default bucket.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#ref\n   * @param path\n   * @returns {StorageReference}\n   */\n\n\n  ref(path) {\n    return new StorageRef(this, path);\n  }\n  /**\n   * Returns a reference for the given absolute URL.\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#refFromURL\n   * @param url\n   * @returns {StorageReference}\n   */\n\n\n  refFromURL(url) {\n    // TODO don't think this is correct?\n    return new StorageRef(this, `url::${url}`);\n  }\n  /**\n   * setMaxOperationRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxOperationRetryTime\n   * @param time The new maximum operation retry time in milliseconds.\n   */\n\n\n  setMaxOperationRetryTime(time) {\n    getNativeModule(this).setMaxOperationRetryTime(time);\n  }\n  /**\n   * setMaxUploadRetryTime\n   * @url https://firebase.google.com/docs/reference/js/firebase.storage.Storage#setMaxUploadRetryTime\n   * @param time The new maximum upload retry time in milliseconds.\n   */\n\n\n  setMaxUploadRetryTime(time) {\n    getNativeModule(this).setMaxUploadRetryTime(time);\n  }\n  /**\n   * setMaxDownloadRetryTime\n   * @url N/A\n   * @param time The new maximum download retry time in milliseconds.\n   */\n\n\n  setMaxDownloadRetryTime(time) {\n    getNativeModule(this).setMaxDownloadRetryTime(time);\n  }\n  /**\n   * INTERNALS\n   */\n\n\n  _getSubEventName(path, eventName) {\n    return getAppEventName(this, `${path}-${eventName}`);\n  }\n\n  _handleStorageEvent(event) {\n    const {\n      path,\n      eventName\n    } = event;\n    const body = event.body || {};\n    getLogger(this).debug('_handleStorageEvent: ', path, eventName, body);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _handleStorageError(err) {\n    const {\n      path,\n      eventName\n    } = err;\n    const body = err.body || {};\n    getLogger(this).debug('_handleStorageError ->', err);\n    SharedEventEmitter.emit(this._getSubEventName(path, eventName), body);\n  }\n\n  _addListener(path, eventName, cb) {\n    SharedEventEmitter.addListener(this._getSubEventName(path, eventName), cb);\n  }\n\n  _removeListener(path, eventName, origCB) {\n    SharedEventEmitter.removeListener(this._getSubEventName(path, eventName), origCB);\n  }\n\n}\nexport const statics = {\n  TaskEvent: {\n    STATE_CHANGED: 'state_changed'\n  },\n  TaskState: {\n    RUNNING: 'running',\n    PAUSED: 'paused',\n    SUCCESS: 'success',\n    CANCELLED: 'cancelled',\n    ERROR: 'error'\n  },\n  Native: FirebaseStorage ? {\n    MAIN_BUNDLE_PATH: stripTrailingSlash(FirebaseStorage.MAIN_BUNDLE_PATH),\n    CACHES_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.CACHES_DIRECTORY_PATH),\n    DOCUMENT_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.DOCUMENT_DIRECTORY_PATH),\n    EXTERNAL_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_DIRECTORY_PATH),\n    EXTERNAL_STORAGE_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.EXTERNAL_STORAGE_DIRECTORY_PATH),\n    TEMP_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.TEMP_DIRECTORY_PATH),\n    LIBRARY_DIRECTORY_PATH: stripTrailingSlash(FirebaseStorage.LIBRARY_DIRECTORY_PATH),\n    FILETYPE_REGULAR: stripTrailingSlash(FirebaseStorage.FILETYPE_REGULAR),\n    FILETYPE_DIRECTORY: stripTrailingSlash(FirebaseStorage.FILETYPE_DIRECTORY)\n  } : {}\n};"]},"metadata":{},"sourceType":"module"}